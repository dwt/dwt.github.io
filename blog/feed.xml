<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Martin Häckers Blog - Software, Go / Baduk / Weiqi, Liquid Democracy</title><link href="https://h%C3%A4cker.net/en/blog/" rel="alternate"></link><link href="https://h%C3%A4cker.net/blog/feed.xml" rel="self"></link><id>urn:uuid:d0d51cf8-c6be-310d-a416-bf22c1661ce7</id><updated>2021-04-17T00:00:00Z</updated><author><name></name></author><subtitle></subtitle><entry><title>Open Source Flugelektronik mit Lora</title><link href="https://h%C3%A4cker.net/blog/2021/4/open-source-flugelektronik-mit-lorawan/" rel="alternate"></link><updated>2021-04-17T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:8fe7de32-bbfb-385d-9e4c-ae441b249a37</id><content type="html">&lt;p&gt;Inzwischen gibt es mehrere Projekte die Lora Funktechnik für Ad-Hoc-Netzwerke in der Luft (und am Boden) verwenden.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lyusupov/SoftRF"&gt;SoftRF&lt;/a&gt; ist vermutlich das bekannteste, da es mit günstiger Hardware eigentlich alle Standards unterstützt. &lt;a href="https://de.aliexpress.com/item/4001286458852.html"&gt;Dieses&lt;/a&gt; für in der Luft und und &lt;a href="https://de.aliexpress.com/item/4000571051141.html"&gt;dieses&lt;/a&gt; als Gegengerät am Boden und für Experimente - jeweils in der in Europa zugelassenen 868Mhz Variante - habe ich mir besorgt, da sie nur jeweils €25€ Kosten.&lt;/p&gt;
&lt;p&gt;SoftRF kommt darauf sogar schon vorinstalliert, das ist wirklich sehr komfortabel.&lt;/p&gt;
&lt;p&gt;In Betrieb lassen sich die Geräte auch ganz gut nehmen, einfach via USB an den Rechner anschließen, bei dem einen geht dann ein WLAN auf über das man es Konfigurieren kann, bei dem anderen hat man direkten Zugriff über die Serielle.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pyserial
$ python -m serial.tools.list_ports
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
$ python -m serial.tools.miniterm /path/to/port
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Easy peasy.&lt;/p&gt;
&lt;p&gt;Next Tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/NMEA_0183"&gt;NMEA&lt;/a&gt; Nachrichten Parsen und lesbar Ausgeben&lt;/li&gt;
&lt;li&gt;Das zweite Gerät über Bluetooth Low Energy verbinden&lt;/li&gt;
&lt;li&gt;BLE mit einem meiner Flug-Computer-Smartphone Apps verbinden - &lt;a href="http://flyskyhy.com"&gt;FlySkyHy&lt;/a&gt; oder &lt;a href="https://evario.variosoft.eu"&gt;eVario&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Herausfinden was es braucht um da noch einen guten Barometrischen Sensor mit einzubauen&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Crosswords Puzzle</title><link href="https://h%C3%A4cker.net/blog/2021/3/crosswords-puzzle/" rel="alternate"></link><updated>2021-03-15T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:895a87f6-13a4-3267-81c9-628608a973e3</id><content type="html">&lt;p&gt;Kreuzworträtsel finde ich eigentlich langweilig. Aber die Idee die Vorgaben über Reguläre Ausdrücke zu machen finde ich &lt;em&gt;klasse&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jimbly.github.io/regex-crossword/"&gt;Hier geht es zum Puzzle&lt;/a&gt; - mit Herzlichem Dank an &lt;a href="https://github.com/Jimbly"&gt;Jimb Esser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ursprünglich entworfen hat es &lt;a href="https://web.mit.edu/puzzle/www/2013/coinheist.com/rubik/a_regular_crossword/"&gt;Dan Gulotta am MIT&lt;/a&gt; aber die JS Implementierung von &lt;a href="https://github.com/Jimbly"&gt;Jimb Esser&lt;/a&gt; ist einfach Gold wert.&lt;/p&gt;
</content></entry><entry><title>Thermik-Gradienten lesen</title><link href="https://h%C3%A4cker.net/blog/2021/3/thermik-gradienten-lesen/" rel="alternate"></link><updated>2021-03-14T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:23bd1f52-29c2-3a35-aecc-fe7397d5869c</id><content type="html">&lt;p&gt;Im aktuellen Thermik-Magazin gab es einen Artikel über Thermik-Gradienten - und insbesondere diese kleine Tabelle, die es leicht macht aus der Stärke der Gradienten auf die vorhandene Thermik zu schließen. Note to self: Gradienten über 0,7 vorerst vermeiden.&lt;/p&gt;
&lt;p&gt;&lt;img src="Gradient Legende.png" alt="Gradienten Legende"&gt;&lt;/p&gt;
</content></entry><entry><title>Dependable API Evolution</title><link href="https://h%C3%A4cker.net/blog/2021/2/dependable-api-evolution/" rel="alternate"></link><updated>2021-02-18T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:1c73ef64-b4ea-3a59-93bd-e814a6091a95</id><content type="html">&lt;p&gt;This is an old text that I just found on my hard disk. It's too good not to publish I think, as pretty much everything in it is still completely relevant. So here goes - a shout to the past, as this was written ca. 2014. At the time I discovered Semantic Versioning - and was discontent, because it is simply not enough. We as a community need a better name for what we want to do with APIs - just Semantic Versioning is not enough to reliably move forward and stay sane.&lt;/p&gt;
&lt;h2&gt;My Suggestion: Define Dependable API Evolution&lt;/h2&gt;
&lt;p&gt;The problem that prompted me to write this: I am sick and tired of APIs that do not evolve and that have old warts that are not fixed. At the same time I hate APIs that make every update to multi hour 'joy-ride' of debugging and finding out why the heck my system doesn't work anymore.&lt;/p&gt;
&lt;p&gt;For this I think that &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt; is just not enough.&lt;/p&gt;
&lt;p&gt;As an API provider you should adopt a dependable API evolution strategy that gives your users timely updates and new functionality, makes updating to a your newest version a breeze and joy because of new features instead of a reason for despair because of the amount of work it requires.&lt;/p&gt;
&lt;p&gt;As an API user you should demand this so that you can send you patches and actually hope that they will get into the next version in a timely manner while it is not a burden to update to new revisions. And then there is the small part of actually enjoying an API that works and is extended in a good and healthy way.&lt;/p&gt;
&lt;p&gt;Consider libraries like jQuery or Apples Cocoa where it is pretty much a no brainer to update to the newest version immediately. At the same time, they stay current and adapt and absorb new emerging patterns in a timely manner while fixing old warts and making the framework more and more consistent all the time. (Ok, some warts are not fixeable, but they try very hard)&lt;/p&gt;
&lt;p&gt;I think it is Common Sense to do &lt;strong&gt;Dependable API Evolution&lt;/strong&gt;, but for some reason it hasn't yet caught on as common knowledge - and there is no easy way to refer anyone to a document that explains it. So here I go.&lt;/p&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API's suddenly change names / types / behaviour from version to version&lt;/li&gt;
&lt;li&gt;API's are suddenly removed from version to version without a warning period&lt;/li&gt;
&lt;li&gt;Bugs/ Inconsistencies in APIs are not fixed&lt;/li&gt;
&lt;li&gt;New and improved patterns or API designs are not adapted in a timely matter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extremes to avoid:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Python Standard Library Syndrome&lt;/em&gt;: Your Library is so &lt;em&gt;stable&lt;/em&gt; that a module has to be dead/ unmaintained for 3-5 years before you consider adding it to your library. Some symptoms: API changes rarely, your API has very inconsistent naming, and design pattern use varies widely across your API. Also many of the non core modules have alternatives in the wild that have a vastly more fluent / short / powerful / consistent / modern APIs. Consider the Python standard library. Almost no development happens in there, many of it's modules are 10 and more years old with only the most required bugfixes going in. Not even the standard naming convention of python is used consistently throughout it's API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Python 3k Syndrome&lt;/em&gt;: Your users stick with an old version of your API and are very reluctant to update. Symptoms: You are forced to release new versions of it instead focussing your engineering on the newest version. You add Interims Versions, i.e evolutions of the old API version to make it easier for your users to switch to the newest version. You release new versions of your new API that add in old features again to make it easier for your users to upgrade. Consider the introduction of Python 3.0. Nobody used it. Three major revisions where required (3.0, 3.1, 3.2) before the community is actually considering its adoption. (And now - 2021 -  some 12 years after this text was written, there is still a lot of software around that is on Python 2).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Thousands of Patches Flying in Close Formation Syndrome&lt;/em&gt;: Different parts of the API have very different fluency to it and don't match very well. Symptoms: Knowing one part of the API doesn't make it any easier to guess the names and workings of other parts of your API. Documentation cannot be consolidated by talking about the Design Patterns adopted by your framework, but instead is separated from each other and also very needed because you need to look at it for every module anew.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;DOM API Syndrome&lt;/em&gt;: Different implementations / versions of your API are so inconsistent, that it is almost impossible for users to consume all of them. Symptoms: There are adapter packages around to wrap your API and make it easier for users to actually use them and allow them to target different versions of that API that are in use in the wild. Consider the success of jQuery that does nothing that hiding the DOM-APIs behind something sane and manageable. (2021 me here - the web has started to tackle this problem, but boy, is this still a nightmare. Just the fact that projects like &lt;a href="https://caniuse.com"&gt;can I use&lt;/a&gt; are so much needed…)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Ruby Debugger Syndrome&lt;/em&gt;: Different versions of your API change so much that consumers are unable to evolve an API that builds on it. Symptoms: Different versions of your API have different incompatible packages that implement the same functionality in an incompatible way. Backwards compatibility is virtually impossible. Consider the different Ruby-Debugger gems that have sprung up for the various versions of the interpreter. 'ruby-debug' for Ruby 1.8, 'ruby-debugger19' and later 'debugger' for Ruby 1.9, 'byebug' for Ruby 2.0 and it seems Ruby 2.1, already needs another different debugger package. Maybe it is 'pry' now...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Version 2 Rewrite Syndrome&lt;/em&gt;: Symptoms: You have a branch in your repository that contains your next version, because it's so much different that you really need to retain a branch of the current version to apply bugfixes while you finish up the next version. Again, Python 2 and 3 comes to mind as an abhorrent example of this problem. 12 years after the release of Python 3.0 the, old version 2 branch was still around and kind of alive as small features where added, bugs fixed. Thats a problem - not a great achievement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Have a clear deprecation cycle and use it. It should stretch over multiple versions, and depending on the size or importance of that Deprecated API, this could be several major versions.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your deprecation cycle should contain these steps (which could itself be a multi version rollout)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deprecated APIs are clearly marked in the documentation and source.&lt;/li&gt;
&lt;li&gt;There is a clear statement in the source or documentation what the expected alternative is. What is the the developer expected to do / use instead?&lt;/li&gt;
&lt;li&gt;Using a deprecated API should emit a warning.&lt;/li&gt;
&lt;li&gt;Deprecated API is removed from the documentation. Still using it raises a warning.&lt;/li&gt;
&lt;li&gt;Switch that warning to an error for developers, while only warning users.&lt;/li&gt;
&lt;li&gt;Then and only then it should disappear. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the single most important thing to do, everything else follows from this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Don't just change / remove API. You released it? It's out there. Deprecate it but retain it for a time and then remove it! Document what users are expected to do instead. This documentation should be referred to / included in the warning that is raised when that API is used.&lt;/li&gt;
&lt;li&gt;Document warts that you cannot fix anymore because they are too engrained in the API and are too widely adopted. It is important that your users understand that this is a wart and nothing to use as an example for others or patches that they send you. This ensures that your errors of the past are not repeated.&lt;/li&gt;
&lt;li&gt;Never miss an opportunity to change your API to make it more uniform and or adopt a deeper pattern across it.&lt;/li&gt;
&lt;li&gt;Focus a major part of your documentation on the patterns that underly your API and then don't repeat yourself in every part of the documentation but just refer to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do this and your API becomes more and more coherent over time. Users of such an API can often just use  a broad lisit of your API packages / objects / methods that are easy to scan / search. With that they can get an overview of what is available at a glance. They will often not need detailed documentation as they can just guess how stuff works, what stuff is named, how error handling works, … All of that makes for coding that is enjoyable and code just flows out of your fingers.&lt;/p&gt;
&lt;p&gt;Also, users will update in a heartbeat allowing you to actually focus on newer versions, instead of having to maintain long term stable old versions and waste developer time on this rather non productive stuff.&lt;/p&gt;
&lt;p&gt;What do you think? Should I set up a webpage like  &lt;a href="http://semver.org"&gt;semver.org&lt;/a&gt;? Do we need stickers like &lt;img src="https://img.shields.io/badge/Dependable%20API%20Evolution-1.0-success" alt="Dependable API Evolution"&gt;?&lt;/p&gt;
&lt;p&gt;Text will be evolved (on Github)[&lt;a href="https://github.com/dwt/Dependable_API_Evolution"&gt;https://github.com/dwt/Dependable_API_Evolution&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Feedback welcome.&lt;/p&gt;
</content></entry><entry><title>Yeehaw! Endlich wieder ein Blog!</title><link href="https://h%C3%A4cker.net/blog/2018/7/yeehaw-endlich-wieder-ein-blog/" rel="alternate"></link><updated>2018-07-16T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:76b8ddbb-b7f4-3df6-9fb0-dba24029518d</id><content type="html">&lt;p&gt;Lange hat es gedauert - Ahem.&lt;/p&gt;
&lt;p&gt;In den letzten Monaten habe ich mich mit &lt;a href="https://getlektor.com"&gt;Lektor&lt;/a&gt; auseinandergesetzt. Mit ein Paar Plugins (&lt;a href="https://github.com/humrochagf/lektor-creative-commons"&gt;CreativeCommons&lt;/a&gt; und &lt;a href="https://github.com/lektor/lektor-markdown-highlighter"&gt;Markdown Highlighter&lt;/a&gt;) kann man viel Spaß beim Blog-Post schreiben haben.&lt;/p&gt;
&lt;p&gt;Der große Vorteil von Lektor ist, dass man eine komplett statische Seite damit rendert. Man kann die Seite danach also über ein CDN ausliefern - 'Internet Scale' ist also gar kein Problem…&lt;/p&gt;
&lt;p&gt;Solche Systeme gibt es natürlich viele - aber mit Lektor kriegt man zusätzlich noch ein CMS (das Lokal läuft) - oder auch hinter &lt;code&gt;.htaccess&lt;/code&gt; geschützt laufen kann, so dass man keine Sorgen haben muss, dass einem über so eine Webseite der Server aufgemacht wird.&lt;/p&gt;
&lt;p&gt;Aber Lektor überzeugt auch mit einer moderat einfachen &lt;a href="https://www.getlektor.com/docs/api/"&gt;API&lt;/a&gt;, selbst plugins dafür zu schreiben ist einfach und macht Spaß. Fast wie es bei &lt;a href="https://trac.edgewall.org"&gt;Track&lt;/a&gt; ganz am Anfang auch einmal war. ☺️&lt;/p&gt;
&lt;p&gt;Ich freue mich darüber dass ich jetzt eine voll-responsive Seite haben, die mit HTML und CSS wirklich auskommt - no JS needed. (Ich werde aber vielleicht in der Zukunft für Experimente auch JS in der Seite verwenden). Für jetzt ist es erst mal das Experiment wie lange ich ohne JS auskomme.&lt;/p&gt;
&lt;p&gt;Da wäre zum Beispiel das Menü - das auf Mobil mit Animation schön aufklappt. Hierzu habe ich verschiedene Techniken kombiniert.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Die Verhältnisse der ganzen Abmessungen werden über &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables"&gt;CSS-Variablen&lt;/a&gt; und &lt;a href="https://developer.mozilla.org/de/docs/Web/CSS/calc"&gt;CSS-Calc&lt;/a&gt; einmal global gesetzt. Das geht zwar noch nicht vollständig, da man CSS Variablen &lt;a href="https://stackoverflow.com/questions/40722882/css-native-variables-not-working-in-media-queries#40723269"&gt;nicht in Media Queries einsetzen kann&lt;/a&gt;, aber immerhin. Einzig dass man Stylesheets noch nicht 'nested' aufschreiben kann stört.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Die Animation beim klick auf das &lt;a href="https://de.wikipedia.org/wiki/Hamburger-Menü-Icon"&gt;Hamburger Menü&lt;/a&gt; sowie das Öffnen des Menüs kommt komplett ohne JS aus. Damit das geht braucht es ein DOM Element, dass den State 'ein oder ausgeblendet' hält, gleichzeitig via CSS abgefragt werden kann sowie diesen State durch Klick auf ein anderes Element ändert. Well, dafür funktioniert lustiger Weise das &lt;code&gt;&amp;lt;input type=checkbox id=menu-state&amp;gt;&lt;/code&gt; Element. Das wechselt den &lt;code&gt;checked&lt;/code&gt;-Zustand, was mann dankenswerter Weise in CSS mittels &lt;code&gt;:checked&lt;/code&gt; herausfinden kann. Der Clou ist aber, dass man irgendwo anders im Dokument ein &lt;code&gt;&amp;lt;label for=menu-state&amp;gt;&lt;/code&gt; haben kann, auf das man Klicken kann um diesen State zu wechseln. Und &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; kann man im Gegensatz zu &lt;code&gt;&amp;lt;input type=checkbox&amp;gt;&lt;/code&gt; in allen Browsern vernünftig stylen. Und man kann mittels &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations"&gt;CSS-Animationen&lt;/a&gt; alles animieren. Fuck yeah!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content></entry><entry><title>Lockless Algorithms</title><link href="https://h%C3%A4cker.net/blog/2015/2/lockless-algorithms/" rel="alternate"></link><updated>2015-02-14T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:eb502ea1-c872-354b-a2ed-37da2b8d4fd1</id><content type="html">&lt;p&gt;Schon lange habe ich keine so passende Visualisierung mehr für etwas gesehen:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Non-blocking_algorithm"&gt;Lockless Algorithms / Schlosslose Algorithmen&lt;/a&gt;:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ufK2XRGUjuc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="http://devopsreactions.tumblr.com/post/110529123748/lockess-algorithm"&gt;via devopsreactions&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Melderecht Datenweitergabe jetzt ohne Zustimmung</title><link href="https://h%C3%A4cker.net/blog/2012/7/melderecht-datenweitergabe-jetzt-ohne-zustimmung/" rel="alternate"></link><updated>2012-07-12T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:f9b2c4b3-498a-38e3-b72a-93628bcc1502</id><content type="html">&lt;p&gt;Das ist doch ein Juwel: Melderechter sollen in Zukunft meine Daten an jedes Industrieunternehmen weitergeben dürfen - wenn die Firma die Daten für ein "update" schon vorhandener Daten anfragt.&lt;/p&gt;
&lt;p&gt;Was pikanterweise die Voraussetzung fast jeder Anfrage ist.&lt;/p&gt;
&lt;p&gt;Dem kann man dann gar nicht mehr widersprechen - de fakto hat man also keine Möglichkeit mehr dieser Geschäftspraktik der Meldeämter wenigstens für sich persönlich Einhalt zu gebieten.&lt;/p&gt;
&lt;p&gt;Compact hält dagegen und hofft auf 200.000 unterstützer in möglichst kurzer Zeit:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.campact.de/melderecht/sn1/signer"&gt;http://www.campact.de/melderecht/sn1/signer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dafür!&lt;/p&gt;
</content></entry><entry><title>SSL Certificate Trouble</title><link href="https://h%C3%A4cker.net/blog/2011/11/ssl-certificate-trouble/" rel="alternate"></link><updated>2011-11-18T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:55f253b1-c615-3b3e-b74a-00b812b567ae</id><content type="html">&lt;p&gt;If you should ever stumble upon this bug, consider yourself very lucky that I have found the solution to this already, because it took me &lt;em&gt;AGES&lt;/em&gt; to figure this out. No shit.&lt;/p&gt;
&lt;p&gt;So here's the problem: We used a self signed certificate on on of our servers and curl and all tools relying on curl just couldn't connect to this server at all (with certificate validation). Despite the fact that the root certificate that signed the server certificate was happily in my keychain and marked as trusted.&lt;/p&gt;
&lt;p&gt;The solution first: Turns out that the Keychain will eat certificates in many formats, specifically it supports DER and PEM. curl however can't use the DER certificate in the keychain and just reports it as missing. Exporting the certificate, converting it to PEM and then reimporting it (making sure to remove the DER version beforehand) fixed it.&lt;/p&gt;
&lt;p&gt;I converted the file with this command
&lt;code&gt;openssl x509 -inform DER -in some.ser.ver.der -out some.serv.ver.pem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here's some of the error messages I got:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;% &lt;/span&gt;curl -I https://some.serv.ver -v
&lt;span class="go"&gt;* About to connect() to some.serv.ver port 443 (#0)&lt;/span&gt;
&lt;span class="go"&gt;*   Trying some.ip... connected&lt;/span&gt;
&lt;span class="go"&gt;* Connected to some.ser.ver (some.ip) port 443 (#0)&lt;/span&gt;
&lt;span class="go"&gt;* SSLv3, TLS handshake, Client hello (1):&lt;/span&gt;
&lt;span class="go"&gt;* SSLv3, TLS handshake, Server hello (2):&lt;/span&gt;
&lt;span class="go"&gt;* SSLv3, TLS handshake, CERT (11):&lt;/span&gt;
&lt;span class="go"&gt;* SSLv3, TLS alert, Server hello (2):&lt;/span&gt;
&lt;span class="go"&gt;* SSL certificate problem, verify that the CA cert is OK. Details:&lt;/span&gt;
&lt;span class="go"&gt;error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed&lt;/span&gt;
&lt;span class="go"&gt;* Closing connection #0&lt;/span&gt;
&lt;span class="go"&gt;curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:&lt;/span&gt;
&lt;span class="go"&gt;error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed&lt;/span&gt;
&lt;span class="go"&gt;More details here: http://curl.haxx.se/docs/sslcerts.html&lt;/span&gt;

&lt;span class="go"&gt;curl performs SSL certificate verification by default, using a &amp;quot;bundle&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt; of Certificate Authority (CA) public keys (CA certs). If the default&lt;/span&gt;
&lt;span class="go"&gt; bundle file isn&amp;#39;t adequate, you can specify an alternate file&lt;/span&gt;
&lt;span class="go"&gt; using the --cacert option.&lt;/span&gt;
&lt;span class="go"&gt;If this HTTPS server uses a certificate signed by a CA represented in&lt;/span&gt;
&lt;span class="go"&gt; the bundle, the certificate verification probably failed due to a&lt;/span&gt;
&lt;span class="go"&gt; problem with the certificate (it might be expired, or the name might&lt;/span&gt;
&lt;span class="go"&gt; not match the domain name in the URL).&lt;/span&gt;
&lt;span class="go"&gt;If you&amp;#39;d like to turn off curl&amp;#39;s verification of the certificate, use&lt;/span&gt;
&lt;span class="go"&gt; the -k (or --insecure) option.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you hit this brick wall - hope this helps you too.&lt;/p&gt;
</content></entry><entry><title>Mappei Stützen und Rechnungsstellung</title><link href="https://h%C3%A4cker.net/blog/2011/7/mappei-stu-tzen-und-rechnungsstellung/" rel="alternate"></link><updated>2011-07-12T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:cadcbbbe-0824-3eb4-bac5-94db67a4b98f</id><content type="html">&lt;p&gt;Gerade habe ich endlich für mein GTD-System ein super-Zubehör gefunden, &lt;a href="http://classei.de/de/boxen/mappenstuetzen.html"&gt;Mappenstützen von Classei&lt;/a&gt;. Der große Vorteil davon: Die Mappen stehen in den Boxen auch stabil wenn diese nicht voll sind - damit kann man seine GTD-Ablage viel entspannter aufbauen. :)&lt;/p&gt;
&lt;p&gt;Und noch ein witziges Detail: Classei gewährt 2% Skonto wenn man zügig bezahlt. Das bedeutet natürlich das sie eigentlich 2% mehr verlangen, wenn man nicht zügig bezahlt. Ich wette aber, dass das viele Leute dazu veranlasst schnell zu bezahlen. Und das finde ich einen schönen Trick. :-)&lt;/p&gt;
</content></entry><entry><title>Musik ist doch was feines</title><link href="https://h%C3%A4cker.net/blog/2011/4/musik-ist-doch-was-feines/" rel="alternate"></link><updated>2011-04-05T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:e2cdcdf6-cdd6-301d-951a-e6526191a6d9</id><content type="html">&lt;p&gt;Da gibts so viele Möglichkeiten.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=dmoDLyiQYKw"&gt;Auf einem Floppy-Drive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.robotlab.de/instru/video.htm"&gt;Auf einem Roboterarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=Ht96HJ01SE4"&gt;Auf einem Scanner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=qEG-1iYpgKU"&gt;Tesla Spulen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=fp4jQNa_9sY"&gt;Festplatten&lt;/a&gt; &lt;a href="http://www.youtube.com/watch?v=g8Y1i6_IMwU"&gt;und nochmal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=OhnK5LdUCiQ"&gt;Schleifgeräten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Iranische Männer weinen nicht...</title><link href="https://h%C3%A4cker.net/blog/2011/3/iranische-ma-nner-weinen-nicht/" rel="alternate"></link><updated>2011-03-21T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:04cda5c1-d229-34a8-8a4f-ed445a00c4b5</id><content type="html">&lt;p&gt;... hat Ihm seine Mutter beigebracht als er ein Fahrad wollte dass sie sich nicht leisten konnte. Und dann weinte er so stark dass er sein Auto nicht mehr weiter fahren konnte und am Straßenrand anhalten musste.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thegreenwave-film.com/"&gt;http://www.thegreenwave-film.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dieser Film hat mich tief traurig gemacht, weil es Länder wie den Iran gibt, in denen so viele Menschen nicht ihre Freiheit genießen und so sorgenfrei aufwachsen und leben können wie ich das hier konnte und kann.&lt;/p&gt;
&lt;p&gt;Sehr sehenswert.&lt;/p&gt;
</content></entry><entry><title>Ägypten</title><link href="https://h%C3%A4cker.net/blog/2011/1/a-gypten/" rel="alternate"></link><updated>2011-01-30T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:e0b721e6-c4bb-369d-a95d-9e9fd2eac3d7</id><content type="html">&lt;p&gt;&lt;a href="http://twitpic.com/3u6gvc"&gt;http://twitpic.com/3u6gvc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dabei läufts mir jedesmal wenn ich das anschaue kalt über den rücken.&lt;/p&gt;
</content></entry><entry><title>Umfragen und Ergebnisse - so gehts!</title><link href="https://h%C3%A4cker.net/blog/2011/1/umfragen-und-ergebnisse-so-gehts/" rel="alternate"></link><updated>2011-01-10T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:d088f698-ed47-37bd-86f2-77b871974fde</id><content type="html">&lt;p&gt;Viel zu selten kriegt man mal bescheid wenn man an einer Umfrage / Untersuchung teilgenommen hat und dann endlich die Ergebnisse vorlegen.&lt;/p&gt;
&lt;p&gt;Um so schöner wenn das mal funktioniert!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.philhist.uni-augsburg.de/lehrstuehle/germanistik/sprachwissenschaft/ada/runde_7/"&gt;Die Uni Augsburg hat das mal richtig gemacht!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und dann auch gleich &lt;a href="http://www.philhist.uni-augsburg.de/lehrstuehle/germanistik/sprachwissenschaft/ada/runde_8/"&gt;zur nächsten Runde eingeladen&lt;/a&gt;. Jawohl!&lt;/p&gt;
</content></entry><entry><title>Liquid Feedback</title><link href="https://h%C3%A4cker.net/blog/2011/1/liquid-feedback/" rel="alternate"></link><updated>2011-01-03T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:d01b3242-3864-3d90-897d-2a3f887719e3</id><content type="html">&lt;p&gt;&lt;a href="http://darkbln.wordpress.com/2011/01/03/offener-brief-liquid-democracy/"&gt;Darauf&lt;/a&gt; bin ich heute gestoßen.&lt;/p&gt;
&lt;p&gt;Interessant.&lt;/p&gt;
&lt;p&gt;Was mir durch den Kopf geht: Schade, What goes around comes around, wie geht es mit Liquid bei den Piraten weiter? Wie geht es bei dem Projekt weiter wenn die haupt-Triebfeder nicht mehr treibt?&lt;/p&gt;
&lt;p&gt;Mal nachdenken.&lt;/p&gt;
</content></entry><entry><title>Die meisten wissenschaftlichen Ergebnisse sind falsch</title><link href="https://h%C3%A4cker.net/blog/2011/1/die-meisten-wissenschaftlichen-ergebnisse-sind-falsch/" rel="alternate"></link><updated>2011-01-03T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:066472b0-872f-35f9-9bc4-e71a7d8fea1d</id><content type="html">&lt;p&gt;Geiler Titel eh? Trotzdem das Ergebnis gut replizierbarer wissenschaftlicher Forschung. Hach die Ironie.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.newyorker.com/reporting/2010/12/13/101213fa_fact_lehrer?currentPage=all"&gt;Hier gibt es dazu einen sehr schönen Artikel.&lt;/a&gt; (via fefe)&lt;/p&gt;
</content></entry><entry><title>Angst vor Badewannen?</title><link href="https://h%C3%A4cker.net/blog/2010/11/angst-vor-badewannen/" rel="alternate"></link><updated>2010-11-24T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:b6b6736d-da76-31a3-9aed-27601212ba36</id><content type="html">&lt;p&gt;Diese ganze Terror-Panik-Mache geht mir sowas von auf den Geist - das ich in Diskussionen dazu schon immer ganz ungemütlich werde.&lt;/p&gt;
&lt;p&gt;Und immer fallen mir dann die entscheidenden Argumente dazu nicht ein - zum Beispiel zu so einem Security-Theater wie gerade am hier am Bahnhof, wo irgend ein Arsch eine Tüte hat stehen lassen und für Stunden der ganze U-Bahnhof gesperrt war und alle U-Bahnen weiträumig umgeleitet / gesperrt wurden.&lt;/p&gt;
&lt;p&gt;Grah!&lt;/p&gt;
&lt;p&gt;Da kann ich mich doch nur einem &lt;a href="http://www.schneier.com/blog/archives/2007/12/refuse_to_be_te.html"&gt;Blogpost von Bruce Schneier&lt;/a&gt; anschließen:&lt;/p&gt;
&lt;p&gt;I am not afraid of terrorism, and I want you to stop being afraid on my behalf. Please start scaling back the official government war on terror. Please replace it with a smaller, more focused anti-terrorist police effort in keeping with the rule of law. Please stop overreacting. I understand that it will not be possible to stop all terrorist acts. I accept that. I am not afraid.&lt;/p&gt;
&lt;p&gt;Jawoll!&lt;/p&gt;
&lt;p&gt;Bitte anschließen - und &lt;a href="http://www.youtube.com/watch?v=ka5FdP-gNF0"&gt;das Video dazu&lt;/a&gt; kucken.&lt;/p&gt;
</content></entry><entry><title>Nukleare Abschreckung</title><link href="https://h%C3%A4cker.net/blog/2010/11/nukleare-abschreckung/" rel="alternate"></link><updated>2010-11-19T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:3ef4346f-24ea-3787-8184-f82999833f8b</id><content type="html">&lt;p&gt;Bei den Gorleben Protesten kriegt man ja inzwischen doch eine ganze menge gute Informationen - sogar manchmal über die großen Medien. Und man interessiert sich auch mal ein wenig zu dem Thema.&lt;/p&gt;
&lt;p&gt;Sehr gut gefallen hat mir dabei &lt;a href="http://gffstream-3.vo.llnwd.net/c1/download/1289332860/quarks/wdr_fernsehen_quarks_und_co_20101109.mp4"&gt;diese Quarks &amp;amp; Co Sendung&lt;/a&gt; die ich hier auch wärmstens weiterempfehlen möchte.&lt;/p&gt;
&lt;p&gt;Vor allem war mir überhaupt nicht klar WIE groß die Katastrophe in der Asse derzeit eigentlich ist.&lt;/p&gt;
&lt;p&gt;Anschaubefehl.&lt;/p&gt;
&lt;p&gt;Ein paar Gedankenanstöße:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wenn es eine Stelle gibt an der so gegen sämtliche Regeln des Verstandes und der Sicherheit verstoßen wurde&lt;/li&gt;
&lt;li&gt;Dann gibt es in der Nähe von dieser Stelle noch mehr ähnliche Probleme&lt;/li&gt;
&lt;li&gt;Eines davon &lt;a href="http://www.spiegel.de/wissenschaft/technik/0,1518,654829,00.html"&gt;zum Beispiel das AKW Biblis&lt;/a&gt;. Die Techniker dort wollen es nicht mehr Reparieren da sie dann "... mit einem Bein im Gefängnis ständen...".&lt;/li&gt;
&lt;li&gt;Jetzt bitte genau nachdenken wie viele dieser Problemfälle immer noch vor uns Geheim gehalten werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;grusel&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Update: Wer noch nicht genug gegruselt ist, dem empfehle ich &lt;a href="http://elementarfragen.de/2010/06/ef03-tschernobyl/"&gt;diesen Podcast mit Sebastian Pflugbeil&lt;/a&gt; der sich als Atomphysiker mal den Reaktor in Tschernobyl sehr genau angeschaut hat (er ist dort gewesen!).&lt;/p&gt;
</content></entry><entry><title>Interessante Details zur Castor Lieferung</title><link href="https://h%C3%A4cker.net/blog/2010/11/interessante-details-zur-castor-lieferung/" rel="alternate"></link><updated>2010-11-08T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:f12be98d-6401-32e8-85a8-3c1f727ffd6c</id><content type="html">&lt;ol&gt;
&lt;li&gt;Die Castoren sind (durch die Strahlung?) 120 grad heiß wenn sie geliefert werden, Eier die man darauf wirft verkohlen sofort. :-)&lt;/li&gt;
&lt;li&gt;Die Castoren müssen erst mal 30 Jahre auskühlen bevor sie überhaupt in einer Salzmine endgelagert werden können&lt;/li&gt;
&lt;li&gt;Diese 30 Jahre stehen sie in einer Blechhalle nicht weit von Gorleben und strahlen da (hoffentlich nicht) vor sich hin&lt;/li&gt;
&lt;li&gt;Bevor sie in Gorleben eingelagert werden können müssen sie noch in kleinere Behälter 'Pollux' genannt umgefüllt werden&lt;/li&gt;
&lt;li&gt;Die Technologie dafür gibt es noch gar nicht&lt;/li&gt;
&lt;li&gt;Gorleben als Endlager ist noch gar nicht genehmigt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Krass. &lt;a href="http://www.zeit.de/2003/48/Gorleben"&gt;via&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Unsere Obsession mit der Shell</title><link href="https://h%C3%A4cker.net/blog/2010/10/unsere-obsession-mit-der-shell/" rel="alternate"></link><updated>2010-10-26T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:eeea5555-a9ea-33de-80a2-076bfc8a1aa7</id><content type="html">&lt;p&gt;Grade dachte ich mir ich mache mal wieder zum Spaß etwas an einem Open Source Projekt, checke es aus und will es mal bauen um etwas im Code herum zu lesen - und das erste was mir passiert ist das der Build-Prozess einfach irgendwann verstirbt.&lt;/p&gt;
&lt;p&gt;Nach einiger Debugging Zeit stellt sich dann heraus das das selbstgestrickte build-system (eine Sammlung von Shell-Scripten) halt nicht mit spaces im Pfad zu den Sourcen klarkommt.&lt;/p&gt;
&lt;p&gt;Gnarf! Wieso macht man sowas in Shell? Muss das sein?&lt;/p&gt;
&lt;p&gt;Ok, aber es gibt ja workarounds, und die kenne ich ja auch und die lassen sich ja auch relativ einfach einbauen. ABER: Nicht mal die Abhängigkeiten ([&lt;a href="http://pkg-config.freedesktop.org/"&gt;pkg-config&lt;/a&gt;] in diesem Fall) baut mit spaces im Pfad.&lt;/p&gt;
&lt;p&gt;ARGH!&lt;/p&gt;
&lt;p&gt;Und natürlich haben die ein &lt;a href="http://www.shlomifish.org/open-source/anti/autohell/"&gt;Autohell&lt;/a&gt; buildsystem an das ich nun wirklich nicht ranfassen will. :-(&lt;/p&gt;
&lt;p&gt;Wie sollen wir als Softwareentwickler eigentlich irgendwann zu dem Punkt kommen wo unsere Software auch nur so etwas einfaches wie Pfade korrekt verarbeitet - also mit Leezreichen, Umlauten und Sonderzeichen (jep '/' ist auch gemeint) - wenn nicht mal unsere Eigenen Build-Tools und Shell-Sprachen damit verlässlich klar kommen? Also die Basis auf die einfach immer wieder zurückgegriffen wird?&lt;/p&gt;
&lt;p&gt;Unglaublich.&lt;/p&gt;
</content></entry><entry><title>Objective-C Metaprogrammierung: Blöcke zu Methoden</title><link href="https://h%C3%A4cker.net/blog/2010/6/objective-c-metaprogrammierung-blo-cke-zu-methoden/" rel="alternate"></link><updated>2010-06-20T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:6b20c8fd-cabc-364e-a374-0bed3dd07d1c</id><content type="html">&lt;p&gt;Die Ruby Welt verwendet Blöcke (Closures) liebend gerne für alles mögliche. Zum Beispiel als Builder-Methapher um Baumstrukturen (XML, GUI's, HTML, Tests) in der Sprache hinzuschreiben und dann nur noch in die Target-Sprache zu rendern.&lt;/p&gt;
&lt;p&gt;Das sieht in Tests zum Beispiel so aus:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;something&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should do fnord&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;someObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_fnordy&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Der Trick dabei ist das alles von &lt;code&gt;do&lt;/code&gt; bis &lt;code&gt;end&lt;/code&gt; jeweils ein Block ist der von der Methode describe oder it dann in eine UnitTest Klassenstruktur eingehängt wird um dann später als 'ganz normale' unit tests ausgeführt zu werden.&lt;/p&gt;
&lt;p&gt;Jetzt wo Objective-C auch Blöcke unterstützt (ok, die können natürlich weniger als das Ruby Equivalent) müsste das eigenltich auch gehen - und siehe da mit &lt;a href="http://github.com/pivotal/cedar"&gt;Cedar&lt;/a&gt; gibt es auch schon einen ersten Versuch &lt;a href="http://rspec.info/"&gt;RSpec&lt;/a&gt; in Objective-C nachzubauen.&lt;/p&gt;
&lt;p&gt;Well und daher habe ich mir mal angeschaut wie weit man denn kommt wenn man in Objective-C einen Block in eine Instanz-Methode umwandeln will.&lt;/p&gt;
&lt;p&gt;Gleich vorneweg - das Typ-System von Objective-C macht mir hier einen kleinen Strich durch die Rechnung - ich habe es nicht geschafft einen Block nicht direkt als Funktions-pointer verwenden.&lt;/p&gt;
&lt;p&gt;Aber mit etwas Umweg geht es doch.&lt;/p&gt;
&lt;p&gt;Der Trick ist das Blöcke auch &lt;code&gt;id&lt;/code&gt;'s sein können, d.h. man kann sie bequem in ein NSMutableDictionary packen.&lt;/p&gt;
&lt;p&gt;Also brauche ich auf meiner Klasse nur ein Dictionary, speichere die Blöcke darin mit dem Namen der Methode ab und baue mir einen generischen Dispatcher-IMP der den Selector (zweites unsichtbares Argument jeder Objective-C Methode) verwendet um den Block aus aus dem Dictionary zu ziehen und führe ihn dann einfach aus.&lt;/p&gt;
&lt;p&gt;[source:/open-source/adding-blocks-as-methods/trunk/AttachBlocksAsMethods.m So sieht dass dann aus]&lt;/p&gt;
</content></entry><entry><title>Die schönsten Testsuiten</title><link href="https://h%C3%A4cker.net/blog/2010/5/die-scho-nsten-testsuiten/" rel="alternate"></link><updated>2010-05-29T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:06c0043d-c478-36af-bb70-a116206f4b8c</id><content type="html">&lt;p&gt;Sowas wünsche ich mir auch mal für andere Programmiersprachen. Eine ständig aktuelle Hitliste der schönsten Testsuiten von Open Source software.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.plataformatec.com.br/2010/04/best-ruby-open-source-test-suites-awards/"&gt;Sowas hier&lt;/a&gt; - aber systematisch und crowdsourced immer aktuell.&lt;/p&gt;
&lt;p&gt;Hach, man kann träumen. :-)&lt;/p&gt;
</content></entry><entry><title>Klarträumen</title><link href="https://h%C3%A4cker.net/blog/2010/4/klartra-umen/" rel="alternate"></link><updated>2010-04-06T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:e12fdf80-36f9-38ff-a202-aa4fa0158fe8</id><content type="html">&lt;p&gt;&lt;a href="http://de.wikipedia.org/wiki/Klartraum"&gt;Klarträumen&lt;/a&gt; ist etwas das ich gerne lernen möchte und das mich derzeit beschäftigt. Erste Resultate habe ich schon - denn nach Jahren in denen ich mich vielleicht an einen Traum pro halbes Jahr erinnern konnte, erinnere ich mich jetzt an ein bis drei Träume pro nacht.&lt;/p&gt;
&lt;p&gt;Stattlich. :-)&lt;/p&gt;
&lt;p&gt;Sehr gut funktioniert für mich dass ich vor dem Schlafengehen via iPhone noch ein zwei YouTube Videos zu Klarträumen sehe um mich a) fortzubilden und b) mein Gehirn mit Klarträumen zu beschäftigen um die Warscheinlichkeit zu erhöhen dass ich mich an Träume erinnere (und später dass ich in einem Traum merke dass ich träume).&lt;/p&gt;
&lt;p&gt;Eine super Einführung finde ich nach wie vor &lt;a href="http://www.youtube.com/watch?v=e3GJTkG60X4"&gt;Reece Jones&lt;/a&gt; &lt;a href="http://www.youtube.com/watch?v=qK0hDfBvZh0"&gt;2&lt;/a&gt;, &lt;a href="http://www.youtube.com/watch?v=aZO3RSI7PnI"&gt;3&lt;/a&gt;, aber auch andere Videos von ihm sind interessant (gleiten allerdings recht schnell in viel zu esoterische Gefilde ab für meinen Geschmack).&lt;/p&gt;
&lt;p&gt;Abends (und morgens bevor ich noch einmal zum Träumen einschlafe) verwende ich momentan zur Beschäftigung mit meinem Träumen die Videos von &lt;a href="http://www.youtube.com/user/lucidipedia"&gt;Lucidipedia&lt;/a&gt; die zwar etwa länglich, dafür aber gut verständlich und sehr Detailreich gute Tips zum Träumen geben. Besonders gefallen mir daran die vielen Beispiele die er gibt und die Art wie er sie erklärt.&lt;/p&gt;
&lt;p&gt;Noch ein paar Webseiten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://de.wikipedia.org/wiki/Klartraum"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://de.wikibooks.org/wiki/Klartraum"&gt;Wikibook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lucidipedia.com/"&gt;Lucidipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lucidity.com/"&gt;Lucidity Institute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aber auch eine einfache &lt;a href="http://www.youtube.com/results?search_query=lucid+dreaming"&gt;YouTube&lt;/a&gt; Suche bringt erstaunlich viele Ergebnisse.&lt;/p&gt;
</content></entry><entry><title>jQuery editInPlace</title><link href="https://h%C3%A4cker.net/blog/2010/3/jquery-editinplace/" rel="alternate"></link><updated>2010-03-26T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:5f46fb6b-2e21-3c20-9173-40e5d2678381</id><content type="html">&lt;p&gt;Well, I just finished some major reworking of that jQuery plugin, so now it has [browser:/open-source/jquery-edit-in-place/trunk/spec/unit/spec.js a real testsuite] and conforms to the &lt;a href="http://docs.jquery.com/Plugins/Authoring"&gt;jQuery Plugin Guidelines&lt;/a&gt; and doesn't pollute the core prototypes (of String) anymore.&lt;/p&gt;
&lt;p&gt;There are a few new features, most prominent the ability to define a class to apply for the hover effect (so you can style the hover in css instead of having to hand in the colors directly and more control over the way errors are presented so it is easier to embed into bigger applications.&lt;/p&gt;
&lt;p&gt;So enjoy &lt;a href="http://jquery-in-place-editor.googlecode.com/svn/trunk/demo/index.html"&gt;the demo&lt;/a&gt;  and &lt;a href="http://code.google.com/p/jquery-in-place-editor/downloads/list"&gt;the download&lt;/a&gt; while they are hot, and keep a bookmark to &lt;a href="http://code.google.com/p/jquery-in-place-editor/"&gt;the project homepage&lt;/a&gt;. :)&lt;/p&gt;
&lt;p&gt;Stuff I'd like to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://visionmedia.github.com/jspec/"&gt;JSpec&lt;/a&gt; rocks, writing tests with it is a breeze. The DOM Testrunner they have could use some work though to become even more usefull&lt;/li&gt;
&lt;li&gt;Writing the tests with no dom insertion is a &lt;em&gt;great&lt;/em&gt; technique to get a fast testsuite where you can almost guarantee that it has no test-ordering issues.&lt;/li&gt;
&lt;li&gt;jQuery allows you to almost completely drive the interaction with the editor as a user would, making it almost like an acceptance test (and with very little dependency on the internal working of the editor.&lt;/li&gt;
&lt;li&gt;Refactoring JavaScript Code is hard if you don't have a testsuite. My Advice: Break it down into smaller bits. I found it incredibly hard to refactor larger pieces of the code, as not having a testsuite means there's no way you know what still works. :/&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Wo findet Innovation beim Lehren statt?</title><link href="https://h%C3%A4cker.net/blog/2010/2/wo-findet-innovation-beim-lehren-statt/" rel="alternate"></link><updated>2010-02-14T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:7c8710a9-1c1b-3f35-9bf2-83949430e2fc</id><content type="html">&lt;p&gt;Früher mal dachte ich, dass das ja in den Universitäten sein muss. Schließlich ist da alles auf einem fleck. Forscher und Lehrer und Schüler.&lt;/p&gt;
&lt;p&gt;Optimale Bedingungen eigentlich - nur dass dort an der Lehre überhaupt nicht geforscht wurde. Schließlich war das ja nur ein Anhängsel das Zeit kostet. Kein Forschungsgebiet.&lt;/p&gt;
&lt;p&gt;In der Schule natürlich sowieso nicht und danach?&lt;/p&gt;
&lt;p&gt;Im Beruf?&lt;/p&gt;
&lt;p&gt;Ich bin natürlich mein eigenes Forschungssubjekt, weil ich weiter lerne und das beobachte. Und für mich selber ist es natürlich so dass ich ständig mit Innovationen habe, durch meine Möglichkeit das Netz zu verwenden.&lt;/p&gt;
&lt;p&gt;Aber ab und an trifft man auf etwas großartiges. In einem &lt;a href="http://itc.conversationsnetwork.org/shows/detail4386.html"&gt;Interview von John Udell&lt;/a&gt; bin ich auf die &lt;a href="http://khanacademy.org/"&gt;Khan Academy&lt;/a&gt; gestoßen.&lt;/p&gt;
&lt;p&gt;Das ist ein Mensch der seine Erfüllung darin findet dass er kurze Videos (~10 Minuten lang) aufnimmt in denen er eine Sache - ein Konzept aus Mathematik, Physik, Chemie, Finanzen und vielen weiteren Themen.&lt;/p&gt;
&lt;p&gt;Und die sind gut!&lt;/p&gt;
&lt;p&gt;Ausserdem hat er &lt;a href="http://khanexercises.appspot.com/"&gt;eine Software online gestellt&lt;/a&gt; die ein sehr spannendes Konzept verfolgt: Wissen ist dort als Graph aufgestellt - von einfachster Addition bis zu relativ komplexen Themen. (Aber viel weniger als als Video verfügbar ist).&lt;/p&gt;
&lt;p&gt;Der Clou: Man fängt bei einfacher Addition an  und kriegt die nächst-Schwierigeren Aufgaben erst wenn man 10 Aufgaben aus einem Wissensgebiet erfolgreich direkt hintereinander gelöst hat.&lt;/p&gt;
&lt;p&gt;Dazu gibt es jeweils den ganzen Lösungsweg plus einen Link auf das dazugehörige Video wenn man es noch mal im Detail braucht.&lt;/p&gt;
&lt;p&gt;Das führt dazu dass Kinder gerade bei Mathe ihre Lücken auffüllen können die sie irgendwo im Verständnis haben. Und das finde ich Großartig - denn das ist eines der größten Probleme von Großgruppen-Lernen. Wenn ein Thema vorbei ist, dann ist es vorbei - egal ob man es verstanden hat oder nicht.&lt;/p&gt;
&lt;p&gt;Verdammt schade dass es noch soo lange dauern wird bis solche Konzepte auch in der "Offiziellen" Lehre angekommen sind.&lt;/p&gt;
</content></entry><entry><title>Gletscher Rückzug</title><link href="https://h%C3%A4cker.net/blog/2010/2/gletscher-ru-ckzug/" rel="alternate"></link><updated>2010-02-08T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:c6767358-8669-33cb-beb4-bd5c05b507b9</id><content type="html">&lt;p&gt;Klima-Veränderung ist ein schwer zugängliches Thema.&lt;/p&gt;
&lt;p&gt;Aber auch Sau-Wichtig. Und daher finde ich es grandios was James Balog für eine Arbeit gemacht hat um den Gletscher-Rückzug zu dokumentieren. Mit knapp 30 Zeitraffer-Kammeras macht er über Jahre Hinweg jede Stunde ein Bild von vielen Gletschern und daraus dann einen Film.&lt;/p&gt;
&lt;p&gt;Wow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gibts bei &lt;a href="http://www.ted.com/talks/james_balog_time_lapse_proof_of_extreme_ice_loss.html"&gt;TED als Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oder auf &lt;a href="http://www.extremeicesurvey.org/"&gt;der Homepage des Projekts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mein &lt;a href="http://www.extremeicesurvey.org/index.php/new_gallery/timelapse_171/"&gt;Lieblingsvideo dort bisher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>100 mal Floss Weekly</title><link href="https://h%C3%A4cker.net/blog/2010/1/100-mal-floss-weekly/" rel="alternate"></link><updated>2010-01-31T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:62b43a9d-7182-3515-bde8-0a8e6269a187</id><content type="html">&lt;p&gt;:) Einer meiner Lieblingspodcasts hat es jetzt auf die 100. Ausgabe gebracht.&lt;/p&gt;
&lt;p&gt;Und da muss ich doch mal gratulieren. Vor allem weil ich bei der Quiz-Show über Programmiersprachen und deren Verbreitung absolut herzhaft gelacht habe. :-)&lt;/p&gt;
&lt;p&gt;Hörenswert! Immer wieder großartige Interviews mit Machern von Open Source Projekten.&lt;/p&gt;
&lt;p&gt;[Hier gehts zur 100-sten Show &lt;a href="http://twit.tv/floss100"&gt;http://twit.tv/floss100&lt;/a&gt;]&lt;/p&gt;
</content></entry><entry><title>Softwareentwicklung als Kooperatives Spiel</title><link href="https://h%C3%A4cker.net/blog/2010/1/softwareentwicklung-als-kooperatives-spiel/" rel="alternate"></link><updated>2010-01-28T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:ee76d24c-6c22-3f63-86cd-5969a4cd286d</id><content type="html">&lt;p&gt;Das ist ein steinalter &lt;a href="http://alistair.cockburn.us/Software+development+as+a+cooperative+game"&gt;Vortrag von Alistair Cockburn&lt;/a&gt; (gesprochen Co-Burn) in dem er darlegt wieso er findet das das eine sehr gute Sichtweise auf Softwareprojekte ist.&lt;/p&gt;
&lt;p&gt;Der Vortrag ist schon 10 Jahre alt - und trotzdem finde ich ihn sehr Aktuell.&lt;/p&gt;
&lt;p&gt;Lesenswert!&lt;/p&gt;
</content></entry><entry><title>Python Saug Punkte contd.: x += y ist nicht x = x + y</title><link href="https://h%C3%A4cker.net/blog/2010/1/python-saug-punkte-contd-x-y-ist-nicht-x-x-y/" rel="alternate"></link><updated>2010-01-15T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:f1e549a2-ef5a-3f55-a04b-200a4d4e654c</id><content type="html">&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; []&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [&amp;#39;foo&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doh. Wie kann das sein? Kommt man von C ist das erst mal sehr verblüffend - und auch die meisten anderen Programmiersprachen die ich kenne verwenden &lt;code&gt;a += b&lt;/code&gt; als equivalent für &lt;code&gt;a = a + b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Well, nicht so Python. Weil &lt;a href="http://www.python.org/dev/peps/pep-0203/"&gt;da gab es offenbar mal Programmierer&lt;/a&gt; die fanden dass man Code der mit Matrizen rechnet lieber mit Operatoren schreiben möchte weil sich das besser ließt. Natürlich nicht mit den normalen operatoren wie */+-, weil, da kann man ja den empfänger nicht in place modifizieren, und wie jeder weiß sind Matrizen ja so groß dass die dann nicht mehr in den Ram passen.&lt;/p&gt;
&lt;p&gt;Also haben sie die &lt;op&gt;= operatoren in Python so spezifiziert, dass sie ihre left-hand-variable in place modifizieren wenn diese mutable sind.&lt;/p&gt;
&lt;p&gt;:-(&lt;/p&gt;
</content></entry><entry><title>Python Saugpunkte: Klassenobjekte</title><link href="https://h%C3%A4cker.net/blog/2010/1/python-saugpunkte-klassenobjekte/" rel="alternate"></link><updated>2010-01-13T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:f28147d0-1623-3ddf-88c2-44440ed73e7a</id><content type="html">&lt;p&gt;Klassenobjekte sind special - daher hat man im boddy einer klasse keinen Zugriff auf das klassenobjekt.&lt;/p&gt;
&lt;p&gt;Weil, self ist ja auch nicht automatisch und man muss es in Methoden immer als explizites Argument hinschreiben, und so etwas gibt es ja bei Klassen nicht, denn das sind ja keine Methoden und daher kann man halt das Klassenobjekt nicht referenzieren im body.&lt;/p&gt;
&lt;p&gt;Doh.&lt;/p&gt;
&lt;p&gt;Und das nervt natürlich total bei der meta-programmierung.&lt;/p&gt;
&lt;p&gt;Hier mal ein Beispiel von etwas SQL-Alchemy Code wo mir das wieder aufgefallen ist:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;proposal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proposal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;polls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Poll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin_time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das geht nicht, weil ich auf Poll nicht zugreifen kann und damit nicht auf andere attribute der Klasse. Der Workaround den SQLAlchemy dafür macht ist das man einen String hineinreicht und die den dann aufwendig parsen. Total gar nicht toll.&lt;/p&gt;
&lt;p&gt;:-(&lt;/p&gt;
</content></entry><entry><title>Grand Unified Theory of Programming?</title><link href="https://h%C3%A4cker.net/blog/2010/1/grand-unified-theory-of-programming/" rel="alternate"></link><updated>2010-01-13T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:e4d4a914-89d5-3169-abac-1cfb36c66a65</id><content type="html">&lt;p&gt;Das höchste Ziel in der Physik ist alle Kräfte durch eine Formel auszudrücken bzw. sie in Beziehung zueinander zu setzen. Maxwell zum Beispiel gelang das für elektrische und magnetische Felder - und dafür ist er noch heute berühmt.&lt;/p&gt;
&lt;p&gt;In der Software-Entwicklung gibt es so etwas bisher nicht. Klar, es gibt Daumenregeln, so wie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep it &lt;a href="http://en.wikipedia.org/wiki/Don&amp;#39;t_repeat_yourself"&gt;DRY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stephane.ducasse.free.fr/FreeBooks/BestSmalltalkPractices/Draft-Smalltalk%20Best%20Practice%20Patterns%20Kent%20Beck.pdf"&gt;Keep your Methods Small&lt;/a&gt; **&lt;/li&gt;
&lt;li&gt;Work &lt;a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod"&gt;SOLID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Obay the &lt;a href="http://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;und so weiter…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aber, und das ist der wichtige Teil: diese Daumenregeln sind keine Unifikation die die verschiedenen Probleme beim Programmieren abwägen und in Beziehung setzen.&lt;/p&gt;
&lt;p&gt;Daher finde ich &lt;a href="http://onestepback.org/"&gt;Jim Weirichs&lt;/a&gt; Vortrag &lt;a href="http://mwrc2009.confreaks.com/14-mar-2009-18-10-the-building-blocks-of-modularity-jim-weirich.html"&gt;The Building Blocks of Modularity&lt;/a&gt; sehr spannend - denn da stellt er den Ansatz der &lt;a href="http://www.slideshare.net/LittleBIGRuby/the-building-blocks-of-modularity"&gt;Connascence&lt;/a&gt; vor (ab Folie 35).&lt;/p&gt;
&lt;p&gt;Das ist letztlich eine Klassifizierung welche Art von Abhängigkeit man sich durch welche Programmiertechnik einfängt - und damit kann man 'normales' Refactoring anwenden um von problematischeren Connascence's (?) zu weniger problematischen zu kommen.&lt;/p&gt;
&lt;p&gt;Ach ja, ursprünglich kommt das aus dem Buch &lt;a href="http://books.google.com/books?id=089qQgAACAAJ"&gt;What every Programmer should know about Object Oriented Design&lt;/a&gt;. Davon kann man aber Getrost nur noch den dritten Teil lesen (über Connascence) - der rest ist nach 15 Jahren einfach veraltet. :)&lt;/p&gt;
&lt;p&gt;** Niemand sagt das so gut wie Kent Beck: "Lots of little pieces - Good code invariably has small methods and small objects. Only by factoring the system into many small pieces of state and function can you hope to satisfy the “once and only once” rule. I get lots of resistance to this idea, especially from experienced developers, but no one thing I do to systems provides as much help as breaking it into more pieces."&lt;/p&gt;
</content></entry><entry><title>Python Saug Punkte contd.</title><link href="https://h%C3%A4cker.net/blog/2010/1/python-saug-punkte-contd/" rel="alternate"></link><updated>2010-01-11T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:8c310be9-8b20-3b57-a73b-306886d1f487</id><content type="html">&lt;p&gt;Eine Sache die mich bei Python immer wieder ärgert ist die Tatsache dass Standardwerte für Methodenargumente zur Parsezeit festgelegt werden anstatt zur Aufrufzeit.&lt;/p&gt;
&lt;p&gt;Das ist total doof, denn dadurch teilen sich alle aufrufe der Funktion den gleichen default-wert - was zwar schön schnell sein mag, aber trotzdem in fast allen Fällen nur bei nicht veränderbaren Objekten (so wie Integer und Strings) Sinn ergibt.&lt;/p&gt;
&lt;p&gt;So führt das dazu dass man in Python eine ganze Menge Workarounds braucht um mit default-argumenten zu arbeiten.&lt;/p&gt;
&lt;p&gt;Das wichtigste dabei ist der default typ None. Das ist der workaround für alle mutable-objekte, da man die in fast keinem Fall zwischen verschiedenen Methodenaufrufen teilen möchte. So sieht das aus:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;end_poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# work with end_time...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Der Punkt hier ist dass man datetime.utcnow() nicht in das standard Argument hineinschreiben kann, da man sonst bei jedem Aufruf der Methode den gleichen Wert hätte: Die Parsezeit. Nicht sonderlich nützlich.&lt;/p&gt;
&lt;p&gt;Das hat zur Folge dass man:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aus der Signatur nicht sehen was das Standardargument ist (utc/gmt oder vielleicht ewas ganz anderes?). Immerhin gibt es inzwischen immer mehr IDEs die diese Signatur beim aufrufen für autocompletion nutzen oder sie wenigstens anzeigen können.&lt;/li&gt;
&lt;li&gt;Man beim verwenden von Standardargumenten immer überlegen muss ob man dieses Argument jetzt in die Methodendefinition oder in den Body aufnehmen muss.&lt;/li&gt;
&lt;li&gt;für jedes Standardargument noch mal zwei extra Zeilen braucht. Das nervt vor allem deswegen weil man sich mit den standard Argumenten ja Zeilen sparen möchte. Das heißt die Kosten für Standard-Argumente steigen und man benutzt sie seltener.&lt;/li&gt;
&lt;li&gt;die default argumente noch mal separat dokumentieren muss, da ein dokumentations-extraktions-Werkzeug ja den Code nicht sieht, der das tatsächliche Standardargument setzt. Und natürlich hat man dann noch mal DRY verletzt da die Information jetzt zwei mal da steht.&lt;/li&gt;
&lt;li&gt;richtig fiese Bugs kriegt, weil viele Leute diese Probleme nicht kennen oder sie ab und an vergessen und mal ein &lt;code&gt;list()&lt;/code&gt;, &lt;code&gt;dict()&lt;/code&gt; oder &lt;code&gt;set()&lt;/code&gt; als Standardwert nehmen was dan für viel Freude beim Debuggen sorgt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, know your Python und vorsicht mit Standardargumenten!&lt;/p&gt;
&lt;p&gt;Vielleicht kriegen wir ja irgendwann von unserem BDFL ein &lt;code&gt;from __future__ import runtime_standard_argument_evaluation&lt;/code&gt;.&lt;/p&gt;
</content></entry><entry><title>SOLID object oriented design</title><link href="https://h%C3%A4cker.net/blog/2010/1/solid-object-oriented-design/" rel="alternate"></link><updated>2010-01-10T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:e4559082-d3eb-3117-87de-3d84d54ead54</id><content type="html">&lt;p&gt;Ein Vortrag von der &lt;a href="http://goruco2009.confreaks.com/30-may-2009-15-40-solid-object-oriented-design-sandi-metz.html"&gt;GORUCO&lt;/a&gt; - sehr zu empfehlen.&lt;/p&gt;
&lt;p&gt;Besonders gefallen hat mir ihr Fazit dass man mehr als nur &lt;a href="http://en.wikipedia.org/wiki/Don&amp;#39;t_repeat_yourself"&gt;DRY&lt;/a&gt; als Prinzip beim Refactoring anwenden soll um bei gutem Code anzukommen.&lt;/p&gt;
&lt;p&gt;Sandy Metz empfiehlt das man sich an den 'Grünen' Stellen des Red/Green/Refactor Zyklus für jedes Objekt diese Fragen stellt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is it DRY?&lt;/li&gt;
&lt;li&gt;Does it have one responsibility?&lt;/li&gt;
&lt;li&gt;Does everything in it change at the same time?&lt;/li&gt;
&lt;li&gt;Does it depend (only) on things that change less often than it does?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Und bringt das auch an einem ordentlichen Beispiel auf den Punkt.&lt;/p&gt;
&lt;p&gt;Alles in allem: Ein Vortrag der zum Nachdenken über den eigenen Code-Stil einlädt. Empfehlenswert!&lt;/p&gt;
</content></entry><entry><title>Method argument naming confusion</title><link href="https://h%C3%A4cker.net/blog/2010/1/method-argument-naming-confusion/" rel="alternate"></link><updated>2010-01-08T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:e6dbe7a1-d18f-3f7d-beb9-2bd61ec1369a</id><content type="html">&lt;p&gt;Schon seit einigen Wochen bin ich am grübeln, nach welcher Regel ich in Python meine variablen für Methoden-Argumente benennen soll. Das ist erstaunlicherweise gar nicht so klar.&lt;/p&gt;
&lt;p&gt;Hier mal das Problem: In Objective-C ist alles sehr klar und einfach (von Smalltalk kommend). Jede Methoden-Deklaration besteht abwechselnd aus einem Teil Methodennamen und dann einer Variablen. Hier mal ein Beispiel:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;setValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aValue&lt;/span&gt; &lt;span class="nf"&gt;forKey:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aKey&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das hat den großen Vorteil dass man den Methodennamen benutzen kann um Stück für Stück die Argumente zu dokumentieren. Verwendet wird das so, dass das Stück Methodennamen das vor einem Argument kommt die Rolle beschreibt die das Argument spielen wird, während der Name der Variablen eher generisch ist und sich eher am Typ orientiert. Dazu kommt natürlich das man die Typen auch explizit auszeichnen kann, was die notwendigkeit für die Typ-Annotation im Namen der Variablen im vergleich zu Smalltalk oder Python noch mal vermindert und man kann ihn ganz der Rolle hingeben die die Variable in der Methode spielen wird - versehen mit dem a/an/some/etc. prefix der Argumente (als generische Instanzen von etwas) von den lokalen und instanz-variablen unterscheidet.&lt;/p&gt;
&lt;p&gt;In Python geht das so nicht. Man kann versuchen das auf zwei wegen anzunähern:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_value_for_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="c1"&gt;# benutze als: some_dict.set_value_for_key(&amp;#39;value&amp;#39;, &amp;#39;key&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das hat den Vorteil das man die Argumente mehr oder weniger benennen kann wie man möchte, aber den Nachteil das die Dokumentation der argumente nicht mit diesen zusammen ist. Das hat schon mal den unangenehmen seiteneffekt das es sehr viel schlechter auf mehrere Argumente skaliert und damit sehr fix mehr extra-dokumentation nötig macht.&lt;/p&gt;
&lt;p&gt;Der andere Weg wäre so:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;for_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="c1"&gt;#benutze als: some_dict.set(value=&amp;#39;value&amp;#39;, for_key=&amp;#39;key&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das hat den Vorteil dass der MethodenNamen von der Dokumentationshürde befreit ist - und damit Kurz wird.  Auf der anderen Seite sind die Argument-Namen jetzt effektiv teil des Methoden-Namens und damit kann man sie nicht mehr so gut benutzen um den Typ der Argumente zu dokumentieren.&lt;/p&gt;
&lt;p&gt;:-(&lt;/p&gt;
&lt;p&gt;Das ist der Grund wieso ich die Objective-C / Smalltalk Syntax so gerne mag, weil es darin so einfach ist selbstdokumentierenden Code von hoher qualität zu schreiben.&lt;/p&gt;
</content></entry><entry><title>Here be electric dragons</title><link href="https://h%C3%A4cker.net/blog/2010/1/here-be-electric-dragons/" rel="alternate"></link><updated>2010-01-08T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:235d7d10-6598-3d18-9e90-12da2a1db8a6</id><content type="html">&lt;p&gt;Ich vertrete ja schon länger den Punkt dass ein Grundeinkommen eine Notwendigkeit sein wird in einer Gesellschaft in der Maschinen uns alle physischen Arbeiten abnehmen können.&lt;/p&gt;
&lt;p&gt;Well, jetzt habe ich endlich jemanden gefunden der dieses Argument auch vertritt.&lt;/p&gt;
&lt;p&gt;Auf dem 26C3 im Vortrag &lt;a href="http://events.ccc.de/congress/2009/Fahrplan/events/3452.en.html"&gt;Here be electric dragons&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sehr sehenswert!&lt;/p&gt;
</content></entry><entry><title>Python Saug-Punkte</title><link href="https://h%C3%A4cker.net/blog/2009/12/python-saug-punkte/" rel="alternate"></link><updated>2009-12-23T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:6d74eccf-34e1-327e-8a6c-ab82a7abc2ac</id><content type="html">&lt;p&gt;Viele standard-funktionen und module in python haben zu kurze namen.&lt;/p&gt;
&lt;p&gt;Das ist deshalb ein Problem weil, man diese Namen nicht für lokale Variablen verwenden kann bzw. ungewollt eine Standardfunktion überschreibt.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; zum Beispiel. Oder &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Module sind dabei aber auch Problemkandidaten - vor allem wenn man sie häufig wie ein Objekt benutzt. Das &lt;code&gt;json&lt;/code&gt; Modul macht mir immer wieder probleme, weil ich eine lokale Variable die json enthält nun mal gerne json nennen würde. &lt;code&gt;json_serialization&lt;/code&gt; wäre vielleicht ein besserer Name für das Modul.&lt;/p&gt;
&lt;p&gt;Die Standard-Bibliothek ist leider voll von solchen Beispielen und der Include-Mechanismus von Python der die Module quasi als Objekt im namespace des Empfängers verfügbar macht hilft da nicht wirklich weiter. Das ist zwar IMO eine bessere Idee als der C-Präprozessor &lt;code&gt;#include&lt;/code&gt; (was Ruby ja zum Beispiel nachbaut) aber gerade bei so kurzen Namen kann das wirklich nerven.&lt;/p&gt;
&lt;p&gt;Wenn man aus einem Modul ein Objekt importiert ist das interessanterweise kein Problem, da Objekte in Python (wenn sie sich an die Namenskonvention halten - leider auch oft nicht der Fall in der Standardbibliothek) immer mit einem Großbuchstaben anfangen und dadurch diese Namenskollision nicht auftritt.&lt;/p&gt;
&lt;p&gt;Für mich ist da das Problem dass die Python Programmierer leider so eine Obsession damit haben alles möglichst kurz machen zu wollen - und dabei aber dem Programmierer der mit der (Standard-) Bibliothek arbeiten möchte gerade wieder Steine in den Weg legen dass kurz zu machen was für Ihn am meisten sinn macht - lokale Variablen.&lt;/p&gt;
&lt;p&gt;Das ist leider Premature Optimisation in Reinstkultur - und es stört mich beim Entwickeln von meiner Software. :-(&lt;/p&gt;
</content></entry><entry><title>How to crash IE 7 with javascript</title><link href="https://h%C3%A4cker.net/blog/2009/12/how-to-crash-ie-7-with-javascript/" rel="alternate"></link><updated>2009-12-12T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:a3263997-f085-3c84-963b-7fc2f4d6c504</id><content type="html">&lt;p&gt;Well, it's all too easy apparently. We stumbled upon the problem when suddenly our web application crashed left and right on us in IE 7.&lt;/p&gt;
&lt;p&gt;I've since reduced the code involved and created a plugin to jQuery to make it easier to reproduce this.&lt;/p&gt;
&lt;p&gt;Well, maybe perhaps sometimes somebody even discovers a use for the crashIE7 jQuery plugin. :)&lt;/p&gt;
&lt;p&gt;In any event - it was fun creating this. :)&lt;/p&gt;
&lt;p&gt;See the blog post page for the attached source and how to use this.&lt;/p&gt;
</content></entry><entry><title>Python distributions</title><link href="https://h%C3%A4cker.net/blog/2009/12/python-distributions/" rel="alternate"></link><updated>2009-12-05T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:b33347bd-070d-3ac4-9f03-c53cc93b8e8e</id><content type="html">&lt;p&gt;Endlich mal hab ich einen überblick gefunden wo die Entwicklung momentan hingeht.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mail.python.org/pipermail/python-dev/2009-October/092754.html"&gt;http://mail.python.org/pipermail/python-dev/2009-October/092754.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kurz zusammengefasst:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy_install, ez_setup und Konsorten wird sterben. &lt;a href="http://packages.python.org/distribute/"&gt;distribute&lt;/a&gt; ist die Zukunft&lt;/li&gt;
&lt;li&gt;easy_install wird sterben -&amp;gt; &lt;a href="http://pip.openplans.org/"&gt;pip&lt;/a&gt; ist die Zukunft&lt;/li&gt;
&lt;li&gt;Metadata wird aus dem setup.py script herauswandern und stattdessen in einem ini file zur Verfügung gestellt (Da ist mir noch nicht ganz klar wie das funktionieren soll - aber gut).&lt;/li&gt;
&lt;li&gt;Deinstallieren wird auch mit den distutils gehen - man braucht also nicht mehr pip um das zu machen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Und noch mehr. Aber das find ich schon mal am wichtigsten. :)&lt;/p&gt;
</content></entry><entry><title>Flagge zeigen</title><link href="https://h%C3%A4cker.net/blog/2009/11/flagge-zeigen/" rel="alternate"></link><updated>2009-11-29T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:d430ecd8-0ea6-3884-a763-e7e0458f184e</id><content type="html">&lt;p&gt;&lt;img src="http://wurstball.de/static/ircview/pictures/ba57e733f5f0157a130c99f7e648cb58.jpg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wurstball.de/25017/"&gt;via&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Zur Schweinegrippe</title><link href="https://h%C3%A4cker.net/blog/2009/11/zur-schweinegrippe/" rel="alternate"></link><updated>2009-11-18T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:55ab626a-3160-3938-9114-38034679fcce</id><content type="html">&lt;p&gt;Meine Mutter hat diesen lesenswerten Text dazu geschrieben - und den möchte ich gerne (mit ihrer Erlaubnis) noch mehr Leuten zugänglich machen. Grund dafür ist diese Email die gerade mit diversen gut klingenden Arzt-Namen als Absender auch durch meine Inbox wandert&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Für alle, die überlegen sich impfen zu lassen :&lt;/p&gt;
&lt;p&gt;Die beiden Impfstoffe gegen die so genannte Schweinegrippe &lt;em&gt;Pandemrix® Und Focetria®,&lt;/em&gt; enthalten als Adjuvans (Impfverstärker ) &lt;em&gt;Squalen&lt;/em&gt;. Beim Menschen ist Squalen bei den US-Soldaten des ersten Golfkriegs als Impfverstärker eingesetzt worden.&lt;/p&gt;
&lt;p&gt;23-27% (also jeder Vierte, auch solche, die zu Hause blieben) bekamen Die Golfkriegskrankheit, Mit chronischer Müdigkeit, Fibromyalgie (Muskelrheuma), neben Gedächtnis-und Konzentrationsproblemen, persistierenden Kopfschmerzen, Erschöpfung und ausgedehnten Schmerzen charakterisiert. Die Krankheit Kann auch chronische Verdauungsprobleme und Hautausschlag einschließen.&lt;/p&gt;
&lt;p&gt;Die Erkrankung hat sich seit 1991 also seit 18 Jahren nicht gebessert. Bei 95 % der Geimpften mit Golfkriegssyndrom wurden Squalen-Antikörper Gefunden.&lt;/p&gt;
&lt;p&gt;Erst nach mehr als 10 Jahren wurden die Schäden vom US-Verteidigungsministerium anerkannt.&lt;/p&gt;
&lt;p&gt;Wenn die Bundesregierung ihren Willen durchsetzt und 35 Millionen Menschen geimpft werden, ist damit zu rechnen, dass 8-9 Millionen Bundesbürger für die nächsten Jahrzehnte unter chronischer Müdigkeit und Fibromyalgie etc. leiden werden.&lt;/p&gt;
&lt;p&gt;Unterschrieben von:&lt;/p&gt;
&lt;h2&gt;$GUT_KLINGENDER_ARZT_NAME&lt;/h2&gt;
&lt;p&gt;Dazu hat sie diese gute Antwort geschrieben:&lt;/p&gt;
&lt;p&gt;Ja, es stimmt.
Pandemrix + Focetria enthalten Squalen, das injiziert zum Imunogen wird. Das
ist seine wirkstoffverstärkende Ebene. Es wird auch in unserer Leber
produziert, aber liegt natürlicherweise in öliger Form vor. Im Impfstoff
aber als Emulsion, was einen Unterschied für die Verstoffwechselung im
Körper macht. Der Verdacht, dass es etwas mit dem Golfkriegsyndrom zu tun
hat, ist nicht erhärtet. Neuere Studien mit größeren Teilnehmergruppen
zeigen keinen Zusammenhang zwischen Squalen-Antikörpern und chron.
Symptomen.- Dennoch wird unabhängig von diesem Aspekt der Debatte um diese
Impfstoffe ihre Sicherheit als ungenügend geprüft eingeschätzt. Er wird
schlechter vertragen als ein Spaltimpfstoff ohne Wirkverstärker. Das ist
sicher. ER wurde noch nicht an Schwangeren und Kindern erprobt und die jetzt
eingesetzte Wirkstoffverstärkerdosis ist viel höher als in bisher
eingesetzten Impfungen. Nebenwirkungen wurden noch nicht systematisch
erfaßt. Auch seine Wirksamkeit ist noch nicht hinreichend erforscht, da eine
verringerte Dosierung gegenüber der Zulassungsphase jetzt vermarktet wird.&lt;/p&gt;
&lt;p&gt;Da die Grippe gutartig abläuft und kein höheres Risiko darstellt, als die
bisherigen Herbstgrippen, ist davon bei sonst gesunden Menschen abzuraten,
ebenso bei Schwangeren und Kindern. Hier herum impfen nur wenige Ärzte und
auch die Kinderärzte sind sehr zurückhaltend.
Jürgen hat herausgefunden, dass 1974 dieser Virus schon mal "um die Welt
lief", so dass alle, die damals schon sich anstecken konnten, wahrscheinlich
immun sind.&lt;/p&gt;
&lt;p&gt;Mein Rat an alle, die sich schützen wollen und dazu beitragen möchten, das
sich die Viren nicht ausbreiten:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bei ersten Symptomen ca 25 mg Zink einnehmen (gibt es als Tabletten) an zwei aufeinanderfolgenden Tagen. Parallel dazu Vitamin C Stoß mit heißer Zitrone o.ä. 2x täglich.&lt;/li&gt;
&lt;li&gt;Cystus 052 Infektblocker Tabl. lutschen (pflanzlicher Virenblocker).&lt;/li&gt;
&lt;li&gt;Wenn Fieber kommt, dieses auf über 39°C steigen lassen und abwarten. Viren werden durch Temperaturen über 39°C abgetötet. Es ist der effektivste Abwehrmechanismus. Die Nebenwirkungen des Fieberanstiegs ertragen sich am besten im Bett mit viel trinken und schlafen. Sobald die Viren keine Bedrohung mehr darstellen, geht das Fieber wieder runter (bei normalem Verlauf).&lt;/li&gt;
&lt;li&gt;Auch ohne Fieber soll sich jeder im Stadium des Niesen und Hustens von seinen Mitmenschen fernhalten, da er wie eine lebende Viren-Schleuder wirkt.  Am besten freiwillig daheim bleiben und viel Zeit auf Pflege der Gesundheit verwenden (Nasenspülung, Inhalieren, Tee trinken, ausruhen, an die frische Luft gehen wenn möglich, Basenbäder nehmen, bei Bedarf Brustwickel, Atemübungen, viel frisches Obst).&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Ich hoffe dass das auch für viele anderen Leute einiges an Fragen beantwortet und die Pharmaindustrie hoffentlich deutlich einnahmen kostet.&lt;/p&gt;
</content></entry><entry><title>Das Wikipedia Dilemma Lösen</title><link href="https://h%C3%A4cker.net/blog/2009/11/das-wikipedia-dilemma-lo-sen/" rel="alternate"></link><updated>2009-11-14T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:772f70ea-6afd-3c3d-beb9-e1bc0aaaeac0</id><content type="html">&lt;p&gt;Ich weiß ich bin etwas spät mich dazu auch zu äussern - aber jetzt wo die &lt;a href="https://secure.wikimedia.de/spenden/list.php?datum=2009-11"&gt;Wikipedia wieder zu Spenden aufruft&lt;/a&gt; möchte ich was dazu sagen wieso ich nicht spende.&lt;/p&gt;
&lt;p&gt;Das ist doch alles Kindergarten was in der Wikipedia gerade läuft.&lt;/p&gt;
&lt;p&gt;Also gut, "embrace your enemy" oder wie es heißt, da können wir etwas tun.&lt;/p&gt;
&lt;p&gt;Lasst uns einen Kindergarten eröffnen. Jeder neue Wikipedia-Artikel ist zuerst im Kindergarten und wenn er Groß und Stark geworden ist kann er irgendwann ins Erwachsenen-Artikel-Leben übertreten.&lt;/p&gt;
&lt;p&gt;Das hätte folgenden Vorteil: Alle Exkludisten und die die nur die beste Qualität haben wollen legen einen Schalter um und sehen diese Einträge erst mal nicht.&lt;/p&gt;
&lt;p&gt;Alle anderen verlieren nicht sofort die Lust an der Mitarbeit wenn einer Ihrer Artikel gelöscht wurde - weil er nicht gelöscht wurde.&lt;/p&gt;
&lt;p&gt;Wenn jemand auf eine Seite kommt die unterhalb seines Qualitätslevels liegt, kann er ja einen Hinweis kriegen dass sie existiert, damit er sie mit einem Klick zu sehen bekommt bzw. er seine Einstellung ändern kann.&lt;/p&gt;
&lt;p&gt;Alle sind Glücklich!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jeder Artikel kann jederzeit in den Kindergarten geschickt werden bis er groß wird.&lt;/li&gt;
&lt;li&gt;Jeder Artikel kann jederzeit aus dem Kindergarten "graduieren"&lt;/li&gt;
&lt;li&gt;Wer nur Inhalte von größtmöglicher geprüfter Qualität sehen möchte kann diese ausschließen&lt;/li&gt;
&lt;li&gt;Alle Anderen kriegen einen deutlichen Hinweis dass der Artikel noch im "Kindergarten" ist&lt;/li&gt;
&lt;li&gt;Man könnte Kindergarten Artikel generell anders Rendern damit der Unterschied ganz klar ist&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ich persönlich würde es vorziehen wenn die Standardeinstellung "Alles anzeigen" ist - aber auch wenn der Standard wäre "nur die geprüften Artikel anzeigen" und man jederzeit sieht wenn man an einer Stelle ist die im Kindergarten noch mehr Inhalt enthällt und man die nach bedarf zeigen kann wäre ich zufrieden.&lt;/p&gt;
&lt;p&gt;Platz ist in der Wikipedia ja kein Problem - nur von Admins und regelmäßigen Mitarbeitern gepflegter Platz ist knapp.&lt;/p&gt;
&lt;p&gt;Was ich will, ist das die User entscheiden können was sie lieber wollen. Mehr Artikel, oder besser geflegte - und nicht die die die meiste Zeit in das Projekt stecken. Das halte ich für absolut wichtig.&lt;/p&gt;
&lt;p&gt;Ach ja, und falls das innerhalb der Wikipedia nicht funktioniert, müsste man so etwas als eigene Applikation davor setzen wikinursery.de / kindergarten.wikipedia.de oder per greasemonkey oder als iPhone App oder eben als "vollständige Wikipedia" irgendwo anders.&lt;/p&gt;
&lt;p&gt;Nur innerhalb der Wikipedia  wäre natürlich am besten - wobei zweifelhaft ist ob die macher des Projekts dafür bereit sind.&lt;/p&gt;
&lt;p&gt;Ja, die Idee wurde schon von ein paar anderen Leuten geäussert - ich wollte sie auch noch einmal aufschreiben weil ich sie so wichtig finde.&lt;/p&gt;
</content></entry><entry><title>Hamam</title><link href="https://h%C3%A4cker.net/blog/2009/11/hamam/" rel="alternate"></link><updated>2009-11-08T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:21c540c1-9763-32d6-8233-52a7fda65bdc</id><content type="html">&lt;p&gt;&lt;a href="http://www.sultan-hamam.de"&gt;Ahhhhhhhhhh&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Wie viel kostet die Finanzkriese?</title><link href="https://h%C3%A4cker.net/blog/2009/11/wie-viel-kostet-die-finanzkriese/" rel="alternate"></link><updated>2009-11-05T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:5a026e3e-4b02-34ba-b13e-4242e52f2949</id><content type="html">&lt;p&gt;Im vergleich zum Irak-Krieg? Oder alle Kinder dieser Welt für 5 Jahre zu ernähren?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.informationisbeautiful.net/visualizations/the-billion-dollar-gram/"&gt;Hier wunderschön visualisiert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So viel ist klar - man sieht was wichtig ist im Staat und was nicht. Leider.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fefe.de/?ts=b40c8b76"&gt;via&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Wieso Blöcke keine echten Funktionen sein sollten</title><link href="https://h%C3%A4cker.net/blog/2009/11/wieso-blo-cke-keine-echten-funktionen-sein-sollten/" rel="alternate"></link><updated>2009-11-04T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:0ec2bd45-8122-34f5-ac79-cee9e791ace4</id><content type="html">&lt;p&gt;Zu &lt;a href="http://www.youtube.com/watch?v=hJRV50_tJ0E"&gt;"Ergie" von Rainer von Vielen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In meiner Freizeit beschäftige ich mich gerade viel mit Ruby - sowohl &lt;a href="http://www.amazon.com/Ruby-Way-Second-Techniques-Programming/dp/0672328844"&gt;The Ruby Way&lt;/a&gt;, als auch &lt;a href="http://oreilly.com/catalog/9780596516178"&gt;The Ruby Programming Language&lt;/a&gt; sind dafür gute Bücher.&lt;/p&gt;
&lt;p&gt;Und ich muss sagen, das Ruby ist nicht unspannend. Zwar gibt es auch einiges dass ich ganz schön eklig finde (z.B. das Flip-Flop Statement, oder dass so viel mit globalen Variablen gearbeitet wird, oder dass viele Sachen so komplex sind.&lt;/p&gt;
&lt;p&gt;Aber darum gehts hier gar nicht. Mir geht es hier um die Erkenntnis wieso und unter welchen umständen man Blöcke als etwas anderes sehen möchte als anonyme Funktionen.&lt;/p&gt;
&lt;p&gt;Das dauert nämlich bis man das merkt.&lt;/p&gt;
&lt;p&gt;Zuerst einmal die Konfusion: Ruby hat eine Syntax für Methoden&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positional_argument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;all_other_arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# some body&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;und eine für Blöcke&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;positonal_argument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;all_other_arguments&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# some body&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wieso der Unterschied? Wieso macht man Blöcke nicht einfach zu normalen Funktionen die man dann auch gleich mit &lt;code&gt;()&lt;/code&gt; aufrufen kann anstatt immer ein &lt;code&gt;a_block.call()&lt;/code&gt; verwenden zu müssen?&lt;/p&gt;
&lt;p&gt;Echte Lambdas gibt es ja noch zusätzlich in Ruby.&lt;/p&gt;
&lt;p&gt;Well, den Unterschied in der Syntax verstehe ich immer noch nicht. Aber dahinter steht der Grund dass Blöcke eine andere Aufgabe haben als Methoden - der Punkt ist nämlich dass man sie gerne als Teil der sie lexikalisch umgebenden Methode betrachten möchte damit man sie nutzen kann um mit ihnen Kontrollstrukturen zu implementieren. Hier mal ein Beispiel:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;needle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;haystack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;needle&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Also als Python Programmierer muss ich ja sagen dass die &lt;code&gt;end&lt;/code&gt; statements ganz schön auf die Nerven gehen. Doppelte Zeilenanzahl für null zusätzliche Information oder Nützlichkeit. But I digress.)&lt;/p&gt;
&lt;p&gt;Das spannende daran ist die Zeile &lt;code&gt;return index&lt;/code&gt;. Seht ihr was daran besonders ist? Ich Puzzle es mal auseinander als wäre der Block eine funktion, dann wird es klar.&lt;/p&gt;
&lt;p&gt;find ruft einen iterator auf dem haystack auf, d.h. übergibt ihm eine Funktion die das richtige Element findet. Diese Funktion erhällt ein Element aus dem haystack und einen index und gibt diesen index zurück wenn das element das gesuchte ist.&lt;/p&gt;
&lt;p&gt;Und da ist das Problem: Damit &lt;code&gt;find&lt;/code&gt; funktioniert muss &lt;code&gt;return index&lt;/code&gt; find verlassen und nicht nur die iterator-funktion.&lt;/p&gt;
&lt;p&gt;Das ist der Grund wieso man Blöcke als etwas anderes als Funktionen/Methoden betrachten muss wenn man sie nutzen will um damit Kontrollstrukturen implementieren zu können und ihre volle Nützlichkeit für Abstraktionen verwenden zu können.&lt;/p&gt;
</content></entry><entry><title>Worin liegt der Erfolg von "Ruby on Rails"</title><link href="https://h%C3%A4cker.net/blog/2009/10/worin-liegt-der-erfolg-von-ruby-on-rails/" rel="alternate"></link><updated>2009-10-24T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:600eaddc-4ddf-34f1-b665-0c31af549d94</id><content type="html">&lt;p&gt;Liegt es vielleicht wie &lt;a href="http://stackoverflow.com/questions/1099305/why-is-ruby-more-suitable-for-rails-than-python/1099367#1099367"&gt;auf Stackoverflow angekündigt&lt;/a&gt; an der Sprache?&lt;/p&gt;
&lt;p&gt;Jedenfalls fand ich den ersten Kommentar hervorragend.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;"Python on Pails" just doesn't have the same feel to it... – ephemient
  @Ephemient: I believe it would be Python on Planes. – Jimmy
  @Jimmy: Who needs planes? import antigravity ;-) xkcd.com/353 – Vinay Sajip
  Is there a Java in Jails? – Nosredna
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;lol&lt;/em&gt; Eindeutig, die Sprache ist schuld.&lt;/p&gt;
</content></entry><entry><title>Playing with JavaScript variable lookup</title><link href="https://h%C3%A4cker.net/blog/2009/10/playing-with-javascript-variable-lookup/" rel="alternate"></link><updated>2009-10-17T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:dae45399-5c6c-3597-8bbc-dad6d505eb12</id><content type="html">&lt;p&gt;I am always amazed at the very nice features of JavaScript on the one hand and the very, very bad features of it on the other side.&lt;/p&gt;
&lt;p&gt;Here's something I learned the other week that I find quite interesting: &lt;code&gt;eval&lt;/code&gt; vs. &lt;code&gt;new Function&lt;/code&gt;. Here's what I wanted to achieve: I was looking for a way to do some meta-programming with JavaScrip, specifically prevent the problem that any variable you assign to but don't declare ends up as a member of the global object.&lt;/p&gt;
&lt;p&gt;The problem is that name lookup in JavaScript is quite peculiar. First it consults the current function activation for local variables and then it goes straight back to the &lt;code&gt;window&lt;/code&gt; object and just prepends all it's contents to the local namespace.&lt;/p&gt;
&lt;p&gt;Doh. This has the very bad consequence that every variable you forget to declare via the &lt;code&gt;var someVariableName&lt;/code&gt; syntax becomes part of the global object - and therefore itself global.&lt;/p&gt;
&lt;p&gt;Now you can change this lookup by inserting some of your objects in this lookup chain by using the &lt;a href="http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/"&gt;somewhat controversial&lt;/a&gt; &lt;code&gt;with&lt;/code&gt; statement like so:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this scope now has a local variable foo with the value bar&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is considered a bad feature, as it means that if you assign to &lt;code&gt;foo&lt;/code&gt; that will assign a new value to &lt;code&gt;namespace&lt;/code&gt; but if you assign to something else or mistype, that will still end up on the global object. Not very nice - and therefore most JavaScript programmers don't use &lt;code&gt;with&lt;/code&gt; ever.&lt;/p&gt;
&lt;p&gt;Still with some working and eval it can be used to re-map free functions transparently, so that you can do something like this:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;actual&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;does not equal expected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aDescription&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTestFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;useNamespaceForFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTestFunction&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;that I can call equals as a free function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which would allow you to not pollute the global namespace with all the testing equality functions but still call them in a convenient way (that is without needing to go through an object.&lt;/p&gt;
&lt;p&gt;All in all, quite nice really - even though I haven't really found a use for this yet. :-)&lt;/p&gt;
&lt;p&gt;Implementing the &lt;code&gt;useNamespaceForFunction&lt;/code&gt; however isn't quite as straightforward as I had thought - here's my first go at it:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useNamespaceForFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNamespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNamespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;aFunction&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have since learned that actually using &lt;code&gt;new Function&lt;/code&gt; to do the eval might be quite a good idea as the whole point of it is that it ignores the namespace around it, so here's my version two:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useNamespaceForFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNamespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;namespacingCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;with (aNamespace) { return (&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;aFunction&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;); }&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// using new Function instead of eval to prevent the current namespace leaking into the eval&amp;lt;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aNamespace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;namespacingCode&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;aNamespace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, lets see what uses come up for this technique - I've seen some js code that does an Interpreter of sorts with this trick - but thats about it.&lt;/p&gt;
&lt;p&gt;So - I didn't achieve my initial goal - but I did come nearer to it. So I'll call it a success here for now.&lt;/p&gt;
&lt;p&gt;If you find any use for this technique, please let me know!&lt;/p&gt;
&lt;p&gt;[browser:open-source/javascript-hacks/trunk/namespacing-functions.js Get the source!]&lt;/p&gt;
</content></entry><entry><title>Simple super</title><link href="https://h%C3%A4cker.net/blog/2009/10/simple-super/" rel="alternate"></link><updated>2009-10-14T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:5414a460-7351-3d38-9f9c-9c7a14e4b689</id><content type="html">&lt;p&gt;Python is a wonderfull language - except when it's not.&lt;/p&gt;
&lt;p&gt;For example calling a super-method is really, really hard. Here's an example:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is bad because of several reasons:&lt;/p&gt;
&lt;p&gt;If your class names become longer this becomes more and more unreadable, consider this Acceptance-Test&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CanEnterUsernameAndPasswordOnLoginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CanEnterUsernameAndPasswordOnLoginForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# more&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You need to repeat the class name in each method that calls super. This is especially bad if you rename your class as you need to repeat the name in so many places - also there might be situations where having the wrong name doesn't bomb but just calls the wrong code. Also if you move methods up and down the class-inheritance-chain this becomes more and more annoying.&lt;/p&gt;
&lt;p&gt;Well, so I looked at what you can do with some meta-programming - and lo and behold there's a lot you can do.&lt;/p&gt;
&lt;p&gt;Here's an example what I ended up with:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SuperProxy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah! Now that's simpler. to call super you can use several syntaxes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self.super()&lt;/code&gt; just calls the super method of the same name and hands it all arguments that the current method got&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.super('foo')&lt;/code&gt; this way you can hand specific methods to the super-class and prevent the automatic gathering of arguments. If you prefer explicit - this is it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.super.some_method()&lt;/code&gt; self.super is exactly the same as what the super-method returns (so it's the same as &lt;code&gt;super(ThisClass, self)&lt;/code&gt;) so you can use it to call any method on the superclass and hand it any arguments you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, so I consider this a boon for any bigger python project as it considerably eases the pain of working with class-hierarchies, and best of all you can import it into your project one superclass at a time.&lt;/p&gt;
&lt;p&gt;Oh, and please tell me if you use it and like it. :-)&lt;/p&gt;
&lt;p&gt;So [browser:/open-source/python-simple-super/trunk/simple_super.py here's the code!]&lt;/p&gt;
</content></entry><entry><title>Demokratie ohne Parteien</title><link href="https://h%C3%A4cker.net/blog/2009/10/demokratie-ohne-parteien/" rel="alternate"></link><updated>2009-10-03T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:7d1c1fc0-eba3-3734-a172-6b37981b4e0c</id><content type="html">&lt;p&gt;Die Welt hat ein &lt;a href="http://www.welt.de/print-wams/article143848/Demokratie_ohne_Parteien.html?print=yes#reqdrucken"&gt;Interview mit Juli Zeh geführt&lt;/a&gt;, in der sie darüber spricht, was sie gerade als staatstheoretisches Konzept ausarbeitet - und wie darin Parteien &lt;strong&gt;nicht&lt;/strong&gt; vorkommen.&lt;/p&gt;
&lt;p&gt;Das ist spannend - insbesondere weil ich mich im Rahmen &lt;a href="http://wiki.piratenpartei.de/BE:Liquid_Democracy_in_der_Piratenpartei"&gt;der Piratenpartei&lt;/a&gt; und  &lt;a href="http://liqd.de/"&gt;des Liquid Democracy e.V.&lt;/a&gt; und eben auch privat seit Jahren mit genau diesem Thema beschäftige.&lt;/p&gt;
&lt;p&gt;Julis (und auch meine) Motivation ist dabei, dass die Parteien als "vorportioniertes Politikbündel", das man so fressen oder es lassen kann, inzwischen mehr zurückhaltende als vorwärts tragende Kraft sind.&lt;/p&gt;
&lt;p&gt;Da ist zum einen der Zwang, dass ich mich für ein Politikbündel irgendeiner Partei entscheiden muss, wobei aber jedes Bündel für sich in mehr Punkten meiner Meinung widerspricht als ich es unterstützten kann.&lt;/p&gt;
&lt;p&gt;Zum anderen die Tendenz, dass Parteien einen immer stärkeren Fokus auf Machterhalt, Personen und Einflussnahme von reichen Industriezweigen entwickeln.&lt;/p&gt;
&lt;p&gt;Genau das aber will Juli - und ich - nicht. Demokratie als sachlicher Diskurs unter Einbeziehung allen verfügbaren Wissens und ohne Populismus - das ist eine Vision, die jetzt vielleicht endlich durch die neuen Möglichkeiten des Internets in erreichbare Nähe gerückt ist.&lt;/p&gt;
&lt;p&gt;Worum es mir geht ist das Nachdenken über neue Formen der politischen Partizipation.&lt;/p&gt;
&lt;p&gt;Wir sehen in der Struktur der Legislative das eigentliche Problem und wollen diese ändern.&lt;/p&gt;
&lt;p&gt;Jeder Bürger soll die Möglichkeit erhalten, an so vielen politischen Fragen mitzudiskutieren und mitzuentscheiden, wie er möchte. Das nennen wir "Flüssige Demokratie", weil jeder jederzeit selbst entscheiden kann, wie tief er sich in ein Thema einbringen will und kann.&lt;/p&gt;
&lt;p&gt;Wenn mich etwas nicht interessiert, kann ich weiterhin eine Partei wählen, damit sie mich vertritt. Wenn ich zu einem bestimmten Thema (z.B. Bundeswehreinsatz in Afghanistan) selbst abstimmen möchte kann ich das aber jederzeit tun. Und wenn es darum geht mein Fachwissen (z.B. als Informatiker) in die Umsetzung eines Konzepts einzubringen (z.B. zur Frage, wie man die Verwaltung besser transparent machen kann) dann steht es mir frei, in der Konzeptionsphase schon mit einzusteigen oder selbst ein Konzept zu entwickeln und an der ganzen Entstehung mitzuarbeiten.&lt;/p&gt;
&lt;p&gt;Das ist eine Vision, die weit über alles hinausgeht, was mir als Konzept bisher begegnet ist. Vor allem aber ist es genau dieser flüssige Ansatz, der dieses Konzept in die Lage versetzt, nahezu unendlich zu skalieren. Mein Dorf, mein Landkreis, mein Land, mein Kontinent, meine Welt - überall kann ich mich dort beteiligen, wo ich es als am Wichtigsten erachte.&lt;/p&gt;
&lt;p&gt;Nur als Nebensatz: Ich bin der Meinung dass ein bedingungsloses Grundeinkommen eine hervorragende Bezahlung für genau diese freiwillige demokratische Arbeit ist und wir es daher dringend brauchen.&lt;/p&gt;
&lt;p&gt;Mehr Details zu dieser Idee gibt es auf: &lt;a href="http://liqd.de"&gt;http://liqd.de&lt;/a&gt; und auf allen anderen Links in diesem Artikel.&lt;/p&gt;
&lt;p&gt;Ich bin Martin Häcker, ich bin Vorstand der Piratenpartei Landesverband Berlin. Wir haben bei der letzten Bundestagswahl 3,4 % der Stimmen der Berliner erhalten. Und wir wollen das trojanische Pferd sein, das diese Vision in die Parlamente trägt, indem wir es innerhalb der Partei einsetzen, um unser Programm gemeinsam - wirklich basisdemokratisch - zu erarbeiten.&lt;/p&gt;
</content></entry><entry><title>3,4 % in Berlin</title><link href="https://h%C3%A4cker.net/blog/2009/9/3-4-in-berlin/" rel="alternate"></link><updated>2009-09-28T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:610c850c-bf5d-396f-a08e-4d1bf9406190</id><content type="html">&lt;p&gt;Yeehaw!&lt;/p&gt;
&lt;p&gt;Na wenn das nicht ein tolles erstes Bundestagswahlergebnis für die Piraten ist!&lt;/p&gt;
&lt;p&gt;Bundesweit waren es 2,0 % - 'immerhin' 0,5 % besser als das erste Ergebnis der Grünen (mit denen wir ja so oft verglichen werden).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;katerausschlaf&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Eine ganz gute Übersicht über die Ergebnisse gibt es &lt;a href="http://wahlarchiv.tagesschau.de/flash/index.shtml?wahl=2009-09-27-BT-DE"&gt;bei ARD&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Blocks in Objective C</title><link href="https://h%C3%A4cker.net/blog/2009/9/blocks-in-objective-c/" rel="alternate"></link><updated>2009-09-26T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:5e1550ab-d1cb-3f01-b5f3-d718194f310d</id><content type="html">&lt;p&gt;I've long had a fascination with SmallTalk style blocks in Objective-C. So much so, that I learned a lot about how C and GCC work when I implemented them on the primitive of GCCs nested functions myself.&lt;/p&gt;
&lt;p&gt;[browser:open-source/closures-in-objc/trunk Heres the Source]&lt;/p&gt;
&lt;p&gt;Of course, just as I had it working, Apple deprecated GCCs nested functions, as they where implemented using a trampoline on the stack. And of course, a trampoline being executable code they where out when the non executable stack came in.&lt;/p&gt;
&lt;p&gt;Ah well.&lt;/p&gt;
&lt;p&gt;BUT, Apple just released with Snow-Leopard a new compiler feature [Blocks]!&lt;/p&gt;
&lt;p&gt;Yay, closures in C!&lt;/p&gt;
&lt;p&gt;So here's how it looks if you implement the Smalltalk collection iteration protocoll in ObjC. (Note: this of course are not propper ObjC-Names, but each Smalltalker will none the less get a tear in their eye when they see this)&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="nl"&gt;(BlocksTest)&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;do:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nv"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Take care, -enumerateObjectsUsingBlock: wraps an auto-release pool around the iteration&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;enumerateObjectsUsingBlock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSUInteger&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;collectedItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="nl"&gt;arrayWithCapacity&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;collectedItems&lt;/span&gt; &lt;span class="nl"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;collectedItems&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// REFACT: consider to drop copy&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Take care, -enumerateObjectsUsingBlock: wraps an auto-release pool around the iteration&lt;/span&gt;
    &lt;span class="k"&gt;__block&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;resultObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;enumerateObjectsUsingBlock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSUInteger&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;resultObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resultObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt; &lt;span class="nl"&gt;ifNone&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)())&lt;/span&gt;&lt;span class="n"&gt;errorBlock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;foundElement&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foundElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foundElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errorBlock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;aValue&lt;/span&gt; &lt;span class="nl"&gt;into&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Need to take care with retain here, because apple wraps an auto-release pool around the block iterator. :/&lt;/span&gt;
    &lt;span class="k"&gt;__block&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;aValue&lt;/span&gt; &lt;span class="k"&gt;retain&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;retain&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;selectedObjects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="nl"&gt;arrayWithCapacity&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selectedObjects&lt;/span&gt; &lt;span class="nl"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selectedObjects&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// REFACT: consider to drop copy&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;aBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;


&lt;span class="cp"&gt;#define log(objcObject) fprintf(stdout, &amp;quot;%s\n&amp;quot;, [[objcObject description] UTF8String])&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="bp"&gt;NSAutoreleasePool&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSAutoreleasePool&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="nl"&gt;arrayWithObjects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;third&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;do:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;collect:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="nl"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;uppercaseString&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}]);&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;detect:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="nl"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="nl"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}]);&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;detect:ifNone:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="nl"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
                        &lt;span class="nl"&gt;ifNone&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Yeehaw!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}]);&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;inject:into:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="nl"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="nl"&gt;into&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;concatenation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;concatenation&lt;/span&gt; &lt;span class="nl"&gt;stringByAppendingString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}]);&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;reject:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="nl"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="nl"&gt;hasSuffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;nd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}]);&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;select:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="nl"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="nl"&gt;hasSuffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}]);&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="n"&gt;drain&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ain't that pretty?&lt;/p&gt;
&lt;p&gt;[browser:open-source/smalltalk-like-iterators/trunk Here's the current version!]&lt;/p&gt;
</content></entry><entry><title>Zur Polizeigewalt auf der Freiheit statt Angst-Demo</title><link href="https://h%C3%A4cker.net/blog/2009/9/zur-polizeigewalt-auf-der-freiheit-statt-angst-demo/" rel="alternate"></link><updated>2009-09-16T00:00:00Z</updated><author><name>Martin Häcker</name></author><id>urn:uuid:0f18a73f-c91f-388a-9bed-8b209ac72264</id><content type="html">&lt;p&gt;Spannend - vor allem die diversen Analysen im Netz dazu.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.piksa.info/blog/2009/09/13/aufruf-nach-polizeigewalt-bei-der-fsa09-informiert-die-medien/"&gt;Peter Piksa hat die beste Zusammenfassung der Ereignisse die ich kenne&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besonders Spannend finde ich da &lt;a href="https://tepin.aiki.de/blog/archives/422-Intensitaetsstufen-koerperlicher-Gewalt.html"&gt;die Nachlese von Markus Hansen&lt;/a&gt; der sehr schön die Fakten zu Körperlicher Gewalt auf den Tisch legt.&lt;/p&gt;
&lt;p&gt;Sehr Lesenswert.&lt;/p&gt;
</content></entry></feed>