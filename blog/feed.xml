<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Martin H√§ckers Blog - Software, Go / Baduk / Weiqi, Liquid Democracy</title><link href="https://h%C3%A4cker.net/en/blog/" rel="alternate"></link><link href="https://h%C3%A4cker.net/blog/feed.xml" rel="self"></link><id>urn:uuid:d0d51cf8-c6be-310d-a416-bf22c1661ce7</id><updated>2025-02-27T00:00:00Z</updated><author><name></name></author><entry><title>Die Freuden einer gut eingerichteten Shell</title><link href="https://h%C3%A4cker.net/blog/2025/2/die-freuden-einer-gut-eingerichteten-shell/" rel="alternate"></link><updated>2025-02-27T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:de3df255-1e51-3e9a-a1e1-60540fe45ddf</id><content type="html">&lt;p&gt;&lt;img src="terminal.jpg" alt="Terminal"&gt;&lt;/p&gt;
&lt;p&gt;Es f√§ngt nat√ºrlich mit der Frage an: welche Shell?&lt;/p&gt;
&lt;p&gt;Das ist sehr einfach zu beantworten. Auf MacOS ist die &lt;a href="https://www.zsh.org"&gt;zsh&lt;/a&gt; die Standard-Shell - und daher sollte man die auch benutzen. Artikel Fertig, vielen Dank f√ºrs Lesen! üòÖ&lt;/p&gt;
&lt;p&gt;Windows hat die &lt;a href="https://de.wikipedia.org/wiki/PowerShell"&gt;PowerShell&lt;/a&gt; - wer damit Arbeiten (muss) sollte sie lernen!&lt;/p&gt;
&lt;p&gt;Die nackte Shell ist ziemlich schlecht konfiguriert, da die m√∂glichkeiten der Shell gar nicht ausgenutzt werden. Auf Linux-Distributionen ist es Standard, das die Shell von der Distribution eingerichtet wird, daher kann man damit meistens schon gut arbeiten.&lt;/p&gt;
&lt;p&gt;Aber f√ºr MacOS (und Windows) gibt es aber viel zu tun.&lt;/p&gt;
&lt;p&gt;So sieht die zsh unkonfiguriert aus:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dwt@NB1321&lt;span class="w"&gt; &lt;/span&gt;~&lt;span class="w"&gt; &lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Library/Favorites
dwt@NB1321&lt;span class="w"&gt; &lt;/span&gt;Favorites&lt;span class="w"&gt; &lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das ist schon gar nicht schlecht, denn man sieht einiges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Welcher Nutzer ist man gerade. Wichtig, wenn man viel mit &lt;code&gt;sudo&lt;/code&gt; arbeitet, damit man nicht versehentlich Kommandos als &lt;code&gt;root&lt;/code&gt; mit zu vielne Rechtena usf√ºhrt.&lt;/li&gt;
&lt;li&gt;Auf welchem Rechner ist man gerade eingeloggt. Wichtig wenn man auf vielen Rechnern arbeitet und nicht&lt;/li&gt;
&lt;li&gt;Den aktuellen Ordner in dem man ist (&lt;code&gt;Favorites&lt;/code&gt;). Wichtig damit man z.B. nicht versehentlich die falschen Dateien l√∂scht.&lt;/li&gt;
&lt;li&gt;Der Prompt &lt;code&gt;%&lt;/code&gt; trennt die Meta-Informationen von dem was man selbst eingibt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Da geht aber noch wesentlich mehr. Bei mir z.B. sieht der Prompt so aus:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/C/P/m/api&lt;span class="w"&gt; &lt;/span&gt;‚ùÑÔ∏è&lt;span class="w"&gt; &lt;/span&gt;üß™&lt;span class="w"&gt; &lt;/span&gt;nix-shell-env&lt;span class="w"&gt;   &lt;/span&gt;üêç&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;‚õµÔ∏è&lt;span class="w"&gt; &lt;/span&gt;mkk-itsc-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;api&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;üå±&lt;span class="w"&gt; &lt;/span&gt;main&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$!&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;4s
‚ùØ
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Da ist enthalten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/C/P/m/api&lt;/code&gt; - nicht nur der aktuelle Ordner, sondern auch jeweils der Anfangsbuchstabe der dar√ºber liegenden Ordner. Das liefert platzsparend viel mehr Kontext, wo man gerade ist. Super wenn man in vielen Projekten gleichnamige Ordner wie z.B. &lt;code&gt;etc&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; oder &lt;code&gt;dist&lt;/code&gt; hat.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‚ùÑÔ∏è üß™ nix-shell-env&lt;/code&gt; Zeigt an, dass gerade eine 'dreckige' &lt;a href="https://nixos.wiki/wiki/Development_environment_with_nix-shell"&gt;Nix-Shell&lt;/a&gt; aktiv ist. Das verwende ich um Projeket-Spezifische Abh√§ngigkeiten (Shell-Tools, bestimmte Vesionen von Python etc.) zu installieren die ich deklarativ im Projekt tracke. Gut vergleichbar mit Python-Virtual-Envs - aber eben f√ºr alles, nicht nur Python-Pakete. Dreckig ('impure') ist Sie, da nicht &lt;em&gt;nur&lt;/em&gt; die Shell-Tools aus der Nix-Shell sichtbar sind, sondern auch alles andere was ich im Betriebsystem installiert habe.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;üêç venv&lt;/code&gt; - zeigt an, dass gerade ein Python-Virtual-Env aktiv ist. Da ich haupts√§chlich mit Pyton entwickle ist das nat√ºrlich entscheidend weil es bedeutet das ich die Projekt-Werkzeuge direkt verwenden kann, da sie im &lt;code&gt;$PATH&lt;/code&gt; und &lt;code&gt;$PYTHONPATH&lt;/code&gt; sind.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‚õµÔ∏è mkk-itsc-dev (api)&lt;/code&gt; zeigt an, dass ich mit dem &lt;code&gt;mkk-itsc-dev&lt;/code&gt; Kubernetes Cluster verbunden bin, und den Namespace &lt;code&gt;api&lt;/code&gt; aktiviert habe. Das ist mir sehr wichtig, damit ich nicht versehentlich mit &lt;code&gt;kubectl&lt;/code&gt; Befehlen versehentlich den Produktiv-Cluster zerst√∂re. (Rate wieso mir das so wichtig ist‚Ä¶)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;üå± main $!&lt;/code&gt; zeigt an, dass ich in einem Git-Repository bin, auf dem main branch, das ich dinge ge-'stash't habe (die vergisst man sonst sehr leicht) und das ich √Ñnderungen habe die ich noch nicht commited habe. Hier gibt es &lt;a href="https://starship.rs/config/#git-status"&gt;auch noch mehr informationen wenn das Repo den entsprechenden Zustand hat&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Zuletzt sehe ich da das letzte Kommando 4 Sekunden gedauert hat. Das wird nur angezeigt wenn das letzte Programm mehr als 3 Sekunden gedauert hat und ist immer wiede ein hilfreiche Information um bei langlaufenden Prozesen zu verstehen ob es sich lohnt da etwas zu optimieren.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nat√ºrlich k√∂nnte man hier noch viel mehr anzeigen, je nachdem an was man gerade arbeitet. Ich habe hier eben die Informationen aufgenommen die ich am meisten ben√∂tige.&lt;/p&gt;
&lt;p&gt;Jetzt kommt der Clou: Fr√ºher habe ich das alles von hand Konfiguriert. Das war ein ewiges und m√ºhsammes gefummel um &lt;code&gt;$PS1&lt;/code&gt; und konsorten so hinzufummeln das das alles funktioniert hat, und hat nie Spa√ü gemacht. Der Standard ist derzeit, das man einen Shell-Konfigurations-Framework wie &lt;a href="https://ohmyz.sh"&gt;Oh-My-Zsh&lt;/a&gt; oder &lt;a href="https://github.com/sorin-ionescu/prezto"&gt;Prezto&lt;/a&gt; verwendet. Und die sind auch gut. Aber auch langsam, und komplex und kompliziert. Wenn man da mal etwas anders haben will dann gott bewahre wenn das nicht schon vorbereitet ist oder man darf sich nicht nur mit den Komplexit√§ten von &lt;code&gt;$PS1&lt;/code&gt; auseinander setzen, sondern auch noch damit wie genau dieser Framework das handhabt.&lt;/p&gt;
&lt;p&gt;Inzwische bin ich weiser geworden, und verwende &lt;a href="https://starship.rs"&gt;Starship&lt;/a&gt;. Damit kann ich meinen Prompt deklarativ in einer &lt;code&gt;.toml&lt;/code&gt; Datei konfigurieren und diesen auch mitnehmen wenn ich mal die Shell Wechsle. (Was h√§ufiger vorkommt als mir lieb ist).&lt;/p&gt;
&lt;p&gt;&lt;a href="starship.toml"&gt;So sieht meine Konfiguration aus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wie richtet man das ein?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;brew install starship&lt;/code&gt; (oder mit &lt;a href="https://lix.systems"&gt;nix&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano ~/.zshrc&lt;/code&gt; und am Ende &lt;code&gt;eval "$(starship init zsh)"&lt;/code&gt; einf√ºgen.&lt;/li&gt;
&lt;li&gt;Konfigurationsdatei erstellen: &lt;code&gt;nano ~/.config/starship.toml&lt;/code&gt; und z.b. &lt;a href="starship.toml"&gt;den Inhalt aus der Datei oben einf√ºgen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Shell neu starten oder neues Terminal √∂ffnen.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Danke sagen f√ºr die grandiose Verbesserung eures Shell-Lebens bei mir nicht vergessen. üòÖ&lt;/p&gt;
</content></entry><entry><title>A Nix'le in a B√ºchse und a goldigs Warteweile</title><link href="https://h%C3%A4cker.net/blog/2025/2/a-nixle-in-a-buechse-und-a-goldigs-warteweile/" rel="alternate"></link><updated>2025-02-08T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:babaf936-18fe-34a0-9a0a-54efe964e69e</id><content type="html">&lt;p&gt;&lt;img src="nix-rabbit-hole.png" alt="Das Nix Hasenloch"&gt;
‚Ä¶ ist ein schw√§bisches Sprichwort und passt gar nicht so schlecht f√ºr die vielen schlechten Wortwitze die sich automatisch ergeben, wenn man anf√§ngt, sich in das &lt;a href="https://nix.dev"&gt;Nix Projekt&lt;/a&gt; einzuarbeiten.&lt;/p&gt;
&lt;p&gt;Zun√§chst mal die Karotte mit der ich mich k√∂dern lie√ü:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deklarative Konfiguration von Software-Builds, System-Konfigurationen, und wenn man m√∂chte auch Deployments z.B. in Kubernetes und was man sonst gerne m√∂chte&lt;/li&gt;
&lt;li&gt;Ein funktionaler Paket-Manager, das hei√üt: Jede Software kann ihre eigenen Abh√§ngigkeiten in der passenden Version haben. Wenn ich mal ein Tool in der Version von vor 10 Jahren brauche - einfach zus√§tzlich installieren, ohne dass dadurch etwas gest√∂rt wird. Wenn ich mal eine neuere Version von etwas brauche als die aktuelle Distribution anbietet: Einfach installieren, ohne dass dadurch etwas gest√∂rt wird.&lt;/li&gt;
&lt;li&gt;Rollback: Systemkonfiguration hat etwas kaputt gemacht? Einfach R√ºckg√§ngig machen.&lt;/li&gt;
&lt;li&gt;Update auf eine neue Version des Betriebssystems: Man kriegt fehlermeldungen f√ºr alle Konfigurationen die man vorgenommen hat die jetzt umbenannt wurden oder anders funktionieren. ü§Ø&lt;/li&gt;
&lt;li&gt;Reproduzierbarkeit: Vollst√§ndige Erfassung der Inputs und Ablegen derselben in einem Lock-File.&lt;/li&gt;
&lt;li&gt;Eine riesige Community, die beste Praktiken zum Betrieb von Linux (und mehr) Systemen &lt;a href="https://repology.org/repositories/statistics/total"&gt;in die gr√∂√üte Software-Bibliothek kodiert, die wir bisher gesehen haben.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Was sollte man da nicht m√∂gen?&lt;/p&gt;
&lt;p&gt;Auf MacOs gibt es mit &lt;a href="https://github.com/LnL7/nix-darwin"&gt;nix-darwin&lt;/a&gt; ein Projekt mit dem man die System-Konfiguration deklarativ vornehmen kann - und auch &lt;a href="https://brew.sh"&gt;homebrew&lt;/a&gt; (was sonst so gut wie gar nicht reproduzierbar ist) unter Kontrolle kriegt. Und wenn man m√∂chte, verwaltet es einem auch die dotfiles.&lt;/p&gt;
&lt;p&gt;Es gibt allerdings einen gewaltigen Nachteil: Das Ganze ist echt komplex und kompliziert. Und die Dokumentation ist nicht schlecht, aber k√∂nnte deutlich besser sein.&lt;/p&gt;
&lt;p&gt;Wenn man diese H√ºrde √ºberwindet, wird man mit einer erstaunlich kompakten und sehr schnell anzuwendenden System-Konfiguration belohnt. Damit kann man zum Beispiel auf einem Mac ein vollst√§ndig konfiguriertes System-Image f√ºr einen Raspberry Pi erstellen. Dann noch flaschen, starten und l√§uft! Oder auf meinem Mac Bauen, und via ssh auf dem RasPi deployen, ohne dort irgendwas zu machen was dessen CPU stresst.&lt;/p&gt;
&lt;p&gt;Ich habe inzwischen angefangen, meine Rechner damit zu verwalten und konfigurieren.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dwt/nix-darwin-config"&gt;Mein Rechner (nix-darwin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dwt/home-servers"&gt;Mein Homelab (nixos)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dwt/home-automation"&gt;Meine Heimautomatisierung (python)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Nix ist vielleicht nichts f√ºr dich‚Ä¶&lt;/h1&gt;
&lt;p&gt;‚Ä¶ aber wenn Du ein bisschen nerdig bist, und gerne auf der Kommandozeile lebst, infrastruktur as Code magst oder lernen magst und DevOps f√ºr dich eh normal ist. Dann k√∂nnte Nix auch f√ºr dich genau das richtige sein.&lt;/p&gt;
&lt;h1&gt;Wie lernt man Nix am besten?&lt;/h1&gt;
&lt;p&gt;Was mir beim Lernen von Nix gefehlt hat, w√§re eine Leitlinie gewesen, in welcher Reihenfolge ich mich an die vielen Features von Nix heran tasten sollte. Eine Reihenfolge, die sicherstellt, das die Lernkurve zu jedem Zeitpunkt ertr√§glich bleibt. Und besonders wichtig: Die Sicherstellt, das zu jedem Zeitpunkt sichtbar ist wie cool und wertvoll diese Technologie ist. Sonst l√§uft man Gefahr, ob der steilen Lernkurve abzuspringen.&lt;/p&gt;
&lt;p&gt;Das h√§tte ich gerne gehabt: Wenn du anf√§ngst Nix zu lernen, dann am besten in dieser Reihenfolge:&lt;/p&gt;
&lt;h2&gt;1. Schritt: Installieren, ohne was bestehendes kaputt zu machen&lt;/h2&gt;
&lt;p&gt;Zuerst sollte man Nix neben dem aktuellen OS installieren. Der Standard ist der &lt;a href="https://docs.determinate.systems/getting-started/individuals/"&gt;Determinate Installer&lt;/a&gt;, aber ich mag &lt;a href="https://lix.systems"&gt;das Lix Projekt lieber, da es schneller ist&lt;/a&gt;. Alternativ ist auch &lt;a href="https://nixos.org/download/#nix-install-docker"&gt;der Nix-Docker-Container super um es mal auszuprobieren&lt;/a&gt;. Wenn man m√∂chte, &lt;a href="https://nixos.org/download/#nix-install-linux"&gt;kann man Nix (auf Linux) auch einfach in einen Ordner installieren und so verwenden (siehe "Single-User Mode")&lt;/a&gt;. Das w√ºrde ich aber nur f√ºr ein paar Experimente empfehlen. Sowohl der Determinate als auch der Lix-Installer haben sehr gute Uninstaller die das Projekt auch wieder komplett entfernen k√∂nnen.&lt;/p&gt;
&lt;h2&gt;2. Schritt: Imperativ verwenden&lt;/h2&gt;
&lt;p&gt;Nix erlaubt es jederzeit ein Paket zu benutzen, ohne es zu installieren. Das ist eine Konsequenz davon wie der Paket-Manager aufgebaut ist. Ein Paket kann 'im &lt;code&gt;/nix/store/&lt;/code&gt; sein' - ohne das es aktiv ist. Und der Befehl &lt;code&gt;nix run nixpkgs#fzf&lt;/code&gt; startet es dann einfach - ohne es zu installieren. Alternativ gibt es auch &lt;code&gt;nix shell nixpkgs#fzf&lt;/code&gt;. Damit erh√§llt man eine Shell, in der &lt;code&gt;fzf&lt;/code&gt; installiert ist. Schlie√üt man die Shell, ist es auch wieder weg. üò≥&lt;/p&gt;
&lt;p&gt;Dass ist der Hammer, weil man so Pakete ohne Reue ausprobieren kann. Ohne Sorgen, dass doch noch irgendwelche Abh√§ngigkeiten evtl. auf dem System herum gurken und man vergessen k√∂nnte ein Experiment wieder zu entfernen. Und das beste: Auch sp√§ter wird man dieses Feature die ganze Zeit verwenden.&lt;/p&gt;
&lt;p&gt;Vorsicht vor &lt;code&gt;nix-env&lt;/code&gt; und &lt;code&gt;nix profile&lt;/code&gt; - das ist das √Ñquivalent zu dem wie man mit &lt;code&gt;homebrew&lt;/code&gt;  und anderen Paketmanagern Pakete installieren w√ºrde. Diese sollte man so selten wie m√∂glich verwenden. Besser ist‚Ä¶&lt;/p&gt;
&lt;h2&gt;3. Schritt: Entwicklungsumgebungen &lt;code&gt;shell.nix&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Das, was &lt;code&gt;nix shell nixpkgs#fzf&lt;/code&gt; macht, kann man auch in eine Datei schreiben, und damit einfach in ein Repo mit einchecken. Schon hat man Deklarativ die ganzen Tools im Repo dokumentiert, die man braucht um mit einem Projekt zu arbeiten. Bonus: Ich kann f√ºr jedes Projekt eigene Versionen der Abh√§ngigkeiten haben (wenn ich das brauche). Python-Virtual-Envs auf Steroiden!&lt;/p&gt;
&lt;p&gt;Hier ein Beispiel:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  pkgs &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; &lt;span class="l"&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt;
pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;buildInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# Add your build inputs here&lt;/span&gt;
    pkgs&lt;span class="o"&gt;.&lt;/span&gt;python313
    pkgs&lt;span class="o"&gt;.&lt;/span&gt;uv
  &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="ss"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;UV_PYTHON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;python313&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;UV_DOWNLOAD_PYTHON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;never&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wenn man das mit &lt;code&gt;nix-shell&lt;/code&gt; aufruft, dann hat man diese Python-Version zur Hand. &lt;code&gt;uv&lt;/code&gt; verwendet diese und l√§dt selber keine Python-Versionen herunter. Nice! Extra nice: mit &lt;code&gt;nix-shell --pure&lt;/code&gt;  hat man eine Shell in der &lt;em&gt;nur&lt;/em&gt; das sichtbar ist was in dem &lt;code&gt;shell.nix&lt;/code&gt; steht, und man kriegt Fehler f√ºr alles was man verwendet und in der &lt;code&gt;shell.nix&lt;/code&gt; vergessen hat. ü§Ø&lt;/p&gt;
&lt;p&gt;Bonus: &lt;a href="https://direnv.net"&gt;Direnv&lt;/a&gt; verwenden um automatisch die &lt;code&gt;shell.nix&lt;/code&gt; und das &lt;code&gt;.env&lt;/code&gt; zu laden. Dazu &lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt; um schnell in der Shell zwischen vielen Projekten hin und zu springen. Eine richtig geniale Entwicklungsumgebung.&lt;/p&gt;
&lt;p&gt;Ich empfehle erst mal eine weile auf diesem Niveau zu bleiben, denn das ist schon ziemlich cool!&lt;/p&gt;
&lt;h2&gt;4. Schritt: Mehr Tooling um besser mit Nix klar zu kommen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pakete findet man am besten √ºber &lt;a href="https://search.nixos.org/packages"&gt;die Webseite search.nixos.org&lt;/a&gt; - aber ich mag eigentlich in der shell suchen. &lt;code&gt;nix run nixpkgs#nh search ut1999&lt;/code&gt; funktioniert besser als alles was ich sonst bisher getestet habe.&lt;/li&gt;
&lt;li&gt;Anzeigen was gerade installiert ist und wieso ist aufgrund der Architektur von nix gar nicht so einfach. &lt;code&gt;nix run nixpkgs#nix-tree&lt;/code&gt; aproximiert das und gibt einen guten √ºberblick dar√ºber was man auf dem System hat.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nom&lt;/code&gt; - der &lt;a href="https://github.com/maralorn/nix-output-monitor"&gt;Nix-Output-Monitor&lt;/a&gt; &lt;code&gt;nix run nixpkgs#nix-output-monitor&lt;/code&gt; macht den output von l√§ngeren nix builds viel informativer und spannender. Verwenden kann man das so: &lt;code&gt;nix run $something |&amp;amp; nix run nixpkgs#nix-output-monitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix store gc&lt;/code&gt; um alles zu l√∂schen, was man mal testweise runtergeladen hat und nicht mehr auf der Platte braucht. (Einer Der Nachteile von Nix: Es verbraucht schnell &lt;em&gt;viel&lt;/em&gt; Plattenplatz).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. Schritt: Tief in das Hasenloch fallen&lt;/h2&gt;
&lt;p&gt;Jetzt gibt es verschiedene Sachen die man sich anschauen k√∂nnte&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nix.dev/manual/nix/2.24/language/index.html"&gt;Die Nix Sprache lernen&lt;/a&gt; - die Voraussetzung f√ºr fast alles was danach kommt, also gut investierte Zeit. Und es ist eine wirklich kleine Sprache - auch wenn &lt;a href="https://github.com/NixOS/nixpkgs"&gt;die 'Standard-Bibliothek' (meiner Meinung nach das NixPKGs Repository)&lt;/a&gt; alles andere als klein ist.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devenv.sh"&gt;devenv&lt;/a&gt; um Entwicklungsumgebungen kurz und Knackig und mit allen Features deklarativ zu beschreiben und ins Projekt eingecheckt zu bekommen.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nixos-and-flakes.thiscute.world"&gt;Flakes - der Standard in der Nix-Community, mit der Abh√§ngigkeits-Versionen festgeschrieben werden&lt;/a&gt;. Also wie checke ich die genauen git commit hashes die ich verwendet habe um alle meine Software zu bauen ins Repo mit ein. Damit kann man ein Projekt auch nach Jahren sehr einfach verl√§sslich wieder bauen.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pyproject-nix/uv2nix"&gt;uv2nix - wie man Python-Projekte Nix-ifiziert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/LnL7/nix-darwin"&gt;nix-darwin&lt;/a&gt; um ein MacOS System so deklarativ zu verwalten, wie das unter NixOS geht. (OK, Apple setzt da grenzen, aber das ist trotzdem sehr cool).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nix-community.github.io/home-manager/"&gt;home-manager&lt;/a&gt; um dotfiles zu verwalten und auf Benutzer-Ebene alles zu konfigurieren.&lt;/li&gt;
&lt;li&gt;Quasi alles von &lt;a href="https://github.com/nix-community/awesome-nix?tab=readme-ov-file"&gt;Awesome-Nix&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Und so viele Projekte mehr, die man sich anschauen k√∂nnte‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Grundlegende Funktionen und Einstellungen des Terminals</title><link href="https://h%C3%A4cker.net/blog/2024/11/grundlegende-funktionen-und-einstellungen-des-terminals/" rel="alternate"></link><updated>2024-11-25T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:7ac6f6b9-ca17-3604-b104-b3c1e258eaac</id><content type="html">&lt;p&gt;Der Terminal-Emulator ist ein zentrales Werkzeug, mit dem wir Entwickler mit unseren Rechnern interagieren. Jedes bisschen Wissen und jede Effizienz, die du hier gewinnst, zahlt sich in k√ºrzester Zeit hundertfach aus.&lt;/p&gt;
&lt;p&gt;Nat√ºrlich gibt es viele Terminals, wie &lt;a href="https://iterm2.com"&gt;iTerm2&lt;/a&gt;, &lt;a href="https://alacritty.org"&gt;Alacritty&lt;/a&gt; oder &lt;a href="https://sw.kovidgoyal.net/kitty/"&gt;Kitty&lt;/a&gt;. Aber ich finde, diese solltest du nur verwenden, wenn sie deinen Workflow wirklich verbessern. Und daf√ºr musst du zuerst wissen, was Apple standardm√§√üig mitliefert.&lt;/p&gt;
&lt;p&gt;Das Sch√∂ne am Terminal ist, dass du unglaublich wenig anpassen musst, da es von Haus aus sehr gut funktioniert.&lt;/p&gt;
&lt;p&gt;Ich nutze das eingebaute Terminal von macOS mit nur zwei (!) Konfigurationsanpassungen.&lt;/p&gt;
&lt;h2&gt;Wortweise L√∂schen&lt;/h2&gt;
&lt;p&gt;&lt;img src="delete-word.png" alt="Wortweise L√∂schen"&gt;&lt;/p&gt;
&lt;p&gt;Die erste wirklich wichtige Anpassung f√ºr mich ist, dass ‚å•-‚å´ (Alt-Delete) als Standard-Keybinding gesetzt wird, damit wortweise nach links gel√∂scht wird. Damit passt du das Terminal an den Mac-Standard an, der in fast allen anderen Programmen ebenfalls funktioniert.&lt;/p&gt;
&lt;p&gt;So geht's:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Terminal ‚Üí Einstellungen √∂ffnen (‚åò-,).&lt;/li&gt;
&lt;li&gt;Auf der linken Seite alle Profile ausw√§hlen, damit alle Einstellungen gleichzeitig bearbeitet werden.&lt;/li&gt;
&lt;li&gt;Auf der rechten Seite ‚Üí "Tastatur" ausw√§hlen.&lt;/li&gt;
&lt;li&gt;Einen neuen Shortcut hinzuf√ºgen.&lt;/li&gt;
&lt;li&gt;Die Felder wie im Screenshot ausf√ºllen. &lt;code&gt;\027&lt;/code&gt; steht f√ºr &lt;strong&gt;‚åÉ-w&lt;/strong&gt; (&lt;code&gt;ctrl-w&lt;/code&gt;), den Standard-Shortcut f√ºr wortweises L√∂schen in der Shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Ausgabe navigieren, selektieren und l√∂schen&lt;/h2&gt;
&lt;p&gt;Die n√§chst-wichtigsten Shortcuts sind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;‚åò-N&lt;/strong&gt; / &lt;strong&gt;‚åò-T&lt;/strong&gt; / &lt;strong&gt;‚åò-W:&lt;/strong&gt; Alles Standard, aber trotzdem meine meistbenutzten Shortcuts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;‚åò-‚Üë&lt;/strong&gt; und &lt;strong&gt;‚åò-‚Üì:&lt;/strong&gt; Zum Anfang des vorherigen bzw. n√§chsten ausgef√ºhrten Befehls springen. Das ist super praktisch, um schnell nachzusehen, was die vorherigen Kommandos waren.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;‚åò-Shift-‚Üë&lt;/strong&gt; und &lt;strong&gt;‚åò-Shift-‚Üì:&lt;/strong&gt; Wie oben, aber selektiert zus√§tzlich. Damit kannst du schnell einen Befehl und dessen Ausgabe kopieren. Das ist super praktisch, um Anleitungen zu schreiben oder einem Kollegen zu zeigen, wie etwas gemacht wurde.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;‚åò-L:&lt;/strong&gt; L√∂scht nur die Ausgabe des letzten Kommandos. Sehr praktisch, um ein nicht mehr ben√∂tigtes Shell-Experiment zu entfernen ‚Äì besonders bei Fehlern mit viel Output. Oft nutze ich das, wenn ich zuerst eine Hilfe anzeige und dann darunter verschiedene Experimente ausf√ºhre, um die richtigen Flags zu finden. (Genauer: &lt;strong&gt;‚åò-L&lt;/strong&gt; l√∂scht vom Ende bis zur aktuellen Selektion und funktioniert daher hervorragend mit &lt;strong&gt;‚åò-‚Üë&lt;/strong&gt;.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;‚åò-K:&lt;/strong&gt; Terminal l√∂schen. Die nukleare Option ‚Äì sie l√∂scht alles im aktuellen Terminal. Gro√üer Nachteil: Was weg ist, ist weg. Also nicht benutzen, wenn du den Output noch brauchst. Dennoch ist dies einer meiner am h√§ufigsten benutzten Shortcuts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Unbegrenzter Puffer&lt;/h2&gt;
&lt;p&gt;&lt;img src="unlimited-buffer.png" alt="Unbegrenzter Puffer"&gt;&lt;/p&gt;
&lt;p&gt;Die zweite Anpassung, die ich vornehme, ist, den Scrollback-Puffer auf unbegrenzt zu stellen, damit ich die Ausgabe von langen Kommandos nicht verliere. Das geht so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Terminal ‚Üí Einstellungen √∂ffnen (&lt;strong&gt;‚åò-,&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Wie zuvor alle Profile ausw√§hlen.&lt;/li&gt;
&lt;li&gt;Auf der rechten Seite ‚Üí "Fenster" ‚Üí "Zeilenpuffer" auf ‚Äûauf den verf√ºgbaren Speicher begrenzen‚Äú stellen.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Mit diesen Shortcuts kannst du ultraschnell zwischen den letzten Kommandos navigieren, deren Ausgabe selektieren (und kopieren) oder l√∂schen.&lt;/p&gt;
&lt;p&gt;Diese Anpassungen und Shortcuts sind f√ºr mich auch einer der Hauptgr√ºnde, warum ich die eingebauten Terminals in IDEs nicht gerne benutze. Denn dort funktionieren sie oftmals nicht gut.&lt;/p&gt;
&lt;p&gt;Viele dieser Einstellungen und Shortcuts gibt es auch auf der Ebene der Shell. Der Vorteil, sie √ºber das Terminal zu konfigurieren, ist, dass diese Shortcuts auch auf anderen Servern oder in Docker- bzw. Kubernetes-Containern funktionieren.&lt;/p&gt;
&lt;p&gt;Ich hoffe, diese Tipps helfen dir, das Terminal noch besser zu nutzen.&lt;/p&gt;
&lt;p&gt;Kennst du weitere n√ºtzliche Shortcuts oder Einstellungen, die ich nicht erw√§hnt habe? Hast du Fragen zu den vorgestellten Tipps? Lass es mich wissen!&lt;/p&gt;
&lt;p&gt;Happy Shelling!&lt;/p&gt;
</content></entry><entry><title>Wie kann KI beim Lernen mit Blooms-Taxonomie unterst√ºtzen?</title><link href="https://h%C3%A4cker.net/blog/2024/10/waehrend-dem-lernen-lernen-lernen-ki-nutzen/" rel="alternate"></link><updated>2024-10-10T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:68515a67-2a92-3da0-91bc-ea993656dd17</id><content type="html">&lt;p&gt;&lt;img src="../../9/waehrend-dem-lernen-lernen-lernen-blooms-taxonomie/bloom.jpeg" alt="Blooms Taxonomie"&gt;&lt;/p&gt;
&lt;p&gt;Nachem ich jetzt lange &lt;a href="../waehrend-dem-lernen-lernen-lernen-blooms-taxonomie/"&gt;√ºber Blooms Taxonomie&lt;/a&gt; und &lt;a href="../waehrend-dem-lernen-lernen-lernen-blooms-taxonomie-ebene-1-3/"&gt;was die Ebenen&lt;/a&gt; &lt;a href="../../9/waehrend-dem-lernen-lernen-lernen-blooms-taxonomie-ebene-4-6/"&gt;im Detail bedeuten&lt;/a&gt; geschrieben habe, kann ich jetzt &lt;em&gt;endlich&lt;/em&gt; zu dem kommen, was mir eigentlich am Herzen liegt:&lt;/p&gt;
&lt;p&gt;Mein ganzes Leben lang haben andere die Ebenen von Blooms Taxonomie verwendet um zu beurteilen wie gut ich etwas verstanden habe - aber man kann diesen Spie√ü auch umdrehen, und das wissen um diese Ebenen des Verst√§ndnisses nutzen um selbst besser zu lernen! (Ehrlich gesagt, bin ich ziemlich angepisst das mir das nicht von Vorne herein genau daf√ºr erkl√§rt und beigebracht wurde)&lt;/p&gt;
&lt;p&gt;Wie funktioniert das? Wenn Mensch ohne Plan lernt, dann neigen wir dazu uns zun√§chst auf den unteren Ebenen zu bewegen. Denn das ist (vermeintlich) einfacher und erscheint logisch. Aber aus der Forschung wissen wir, dass sich von vorne herein auf Fragen der 4. und 5. Ebene (also Analysieren und Bewerten) zu konzentrieren, nicht nur schneller, sondern auch tieferes Verst√§ndnis bringt.&lt;/p&gt;
&lt;p&gt;Warum? Weil sich die Art und Weise ver√§ndert mit der wir uns mit dem Lern-Material besch√§ftigen. Auswendig Lernen ist ja nicht verzichtbar. Man muss sich die Fakten ja merken. Aber das passiert auch, wenn man sie Analysiert und Bewertet - ABER - wir kriegen die Analyse und Bewertung gratis dazu. (Wohlgemerkt, f√ºr etwas mehr Kognitive Anstrengung, aber Entspannung ist ja nicht das Ziel.)&lt;/p&gt;
&lt;p&gt;Und das ist der Clou. Gleicher Zeiteinsatz, aber tieferes Verst√§ndnis.&lt;/p&gt;
&lt;p&gt;ü§Ø&lt;/p&gt;
&lt;p&gt;Jetzt ist nat√ºrlich nicht jeder mit der F√§higkeit geboren, sich selbst einfach so Fragen auf der 4. und 5. Ebene zu stellen. Aber das ist auch gar nicht n√∂tig. Denn KI kann dabei prima helfen.&lt;/p&gt;
&lt;p&gt;Chat-GPT hat ein sehr gutes Verst√§ndnis von Blooms-Modell und kann endlos fragen auf Bloom Level 4 und 5 zu jedem Thema generieren. Die sind nicht immer perfekt, es reicht aber, um sich darauf einzustimmnen wie solche Fragen aussehen und effizient selbst zu solchen Fragen zu kommen.&lt;/p&gt;
&lt;p&gt;Und das ist f√ºr mich ein gamechanger, und super sinnvoller Einsatz von KI.&lt;/p&gt;
&lt;p&gt;Hier mal ein Auszug aus einem &lt;a href="Python-Lernen-mit-Fragen.pdf"&gt;Chat mit Chat-GPT&lt;/a&gt;. Das ist sicher nicht perfekt, aber ein starker Anfang. Chapeau, Chat-GPT!&lt;/p&gt;
</content></entry><entry><title>Was ist blooms taxonomie? Die ersten Ebenen</title><link href="https://h%C3%A4cker.net/blog/2024/9/waehrend-dem-lernen-lernen-lernen-blooms-taxonomie-ebene-1-3/" rel="alternate"></link><updated>2024-09-06T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:90ee80db-7da6-30e8-8cb3-bb622b8c9b9a</id><content type="html">&lt;p&gt;&lt;img src="../waehrend-dem-lernen-lernen-lernen-blooms-taxonomie/bloom.jpeg" alt="Blooms Taxonomie"&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="../waehrend-dem-lernen-lernen-lernen-blooms-taxonomie/"&gt;meinem letzten Blog-Post habe ich mich mit Blooms Taxonomie besch√§ftigt&lt;/a&gt;. Mir hat dieses Modell viele Gedankenanst√∂√üe dar√ºber gegeben, wie ich lerne. Ich habe die sechs Ebenen von Blooms Taxonomie vorgestellt und ihre Anwendung sehr knapp diskutiert. Heute m√∂chte ich diese Ebenen vertiefen und anhand von Beispielen auf die Unterschiede zwischen den Ebenen eingehen sowie die jeweiligen Lernziele beleuchten. Mein Ziel ist es, mir und anderen, die Anwendung von Blooms Taxonomie in beim Lernen zu veranschaulichen. Los gehts!&lt;/p&gt;
&lt;h2&gt;Die Ebenen von &lt;a href="https://de.wikipedia.org/wiki/Blooms_Taxonomie"&gt;Blooms Taxonomie&lt;/a&gt;:&lt;/h2&gt;
&lt;h3&gt;1. Wissen&lt;/h3&gt;
&lt;p&gt;Die Grundlage f√ºr alles. Hier geht es darum, sich an Fakten und Informationen zu erinnern. (Wer h√§tte das gedacht? ;)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fragen&lt;/em&gt;: "Was sind die Fakten?" oder "Was wei√ü ich √ºber dieses Thema?"&lt;/p&gt;
&lt;p&gt;&lt;em&gt;T√§tigkeit&lt;/em&gt;: Sich was merken. Hier helfen z.B. Ged√§chtnis-Tricks wie ein &lt;a href="https://de.wikipedia.org/wiki/Ged√§chtnispalast"&gt;Ged√§chtnispalast&lt;/a&gt;, aber meine Empfehlung ist ein durchsuchbares Notizbuch als externalisiertes Ged√§chtnis zu f√ºhren. Warum? Weil das wunderbar f√ºr alle weiterne Ebenen verwendbar ist. :) Ich verwende derzeit &lt;a href="https://www.agenda.com"&gt;Agenda&lt;/a&gt;, aber wenn ich jetzt neu anfangen w√ºrde, &lt;a href="https://logseq.com"&gt;w√ºrde ich Logseq verwenden&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lernziel&lt;/em&gt;: Ich kann dieses Wissen wiedergeben. Wenn Du aber nur auf dieser Ebene lernst, dann geht es Dir wie mir nach den Klausuren - eine Woche Sp√§ter hatte ich das meiste erfolgreich wieder vergessen. :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Beispiel&lt;/em&gt;: Welche Module und Funktionen gibt es grob in der Standardbibliothek meiner Programmiersprache? Oder: Welche Themen muss ich f√ºr die Klausur kennen? Welche Punkte hat jedes Unterthema?&lt;/p&gt;
&lt;h3&gt;2. Verst√§ndnis&lt;/h3&gt;
&lt;p&gt;Aufbauend auf Wissen, geht es jetzt darum Informationen zu interpretieren, zu erkl√§ren und erste Zusammenh√§nge herzustellen.&lt;/p&gt;
&lt;p&gt;Es reicht nicht mehr aus, nur Fakten zu kennen, sondern es ist wichtig, ihre Bedeutung zu verstehen und sie in einen Kontext einzuordnen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fragen&lt;/em&gt;: "Kann ich das Gelernte in eigenen Worten erkl√§ren?" oder "Kann ich ein Beispiel f√ºr das Gelernte geben?" Damit kann ich das Gelernte verstehen und in einen Kontext einordnen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;T√§tigkeit&lt;/em&gt;: Interpretieren, Erkl√§ren, In eigenen Worten wiedergeben, Zusammenfassen, mit schon gelerntem Vergleichen, Beispiele geben.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lernziel&lt;/em&gt;: Ich kann das gelernte jemand anderem erkl√§ren. (Also unter andere dass, was ich hier gerade mache). Damit kriege ich selbst ein viel tieferes Verst√§ndnis der Materie, und vergesse es auch viel weniger. Hier greift die alte Volksweisheit: Wer lehrt, lernt zweimal.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Beispiel&lt;/em&gt;: vor einer Klausur einen guten und vollst√§ndigen Spickzettel zu schreiben ist super. √úberraschung: den braucht man in der Klausur dann √ºblicherweise nicht. :) Warum hilft das? Weil man hier strukturiert die (Lern)-Notizen zusammenfasst. Gerne als Mind-Map oder als Info-Graphik. Optimal: In einer Lern-Gruppe oder einem Kollegen etwas erkl√§ren.&lt;/p&gt;
&lt;h3&gt;3. Anwendung&lt;/h3&gt;
&lt;p&gt;Mit dem Verst√§ndnis an der Hand, geht es jetzt darum Wissen in die Praxis zu √ºbersetzen. Gefordert sind (noch) keine gro√üen √úbertragungsleistungen, sondern eine direkte Anwendung des Gelernten in bekannten Kontexten.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fragen&lt;/em&gt;: "Wie kann ich das Gelernte in einer bestimmten Situation oder bei einer bestimmten Aufgabe anwenden?" oder "Welche Probleme kann ich mit diesem wissen l√∂sen?" Es geht darum das Gelernt auf bekannte Probleme anzuwenden.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;T√§tigkeit&lt;/em&gt;: Anwenden, Ausf√ºhren, Durchf√ºhren. Hilft alles nichts, man muss es mal praktisch in bekannten und neuen Situationen anwenden.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lernziel&lt;/em&gt;: Ich kann das Gelernte in √§hnlichen Kontexten anwenden. Das Ergebnis dieser Lernstufe ist die F√§higkeit, einfache Probleml√∂sungen durchzuf√ºhren. Es geht darum, das Gelernte in die Praxis umzusetzen und zu zeigen, dass man das Wissen nicht nur besitzt, sondern auch anwenden kann.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Beispiel&lt;/em&gt;: Ein Programmierer k√∂nnte &lt;a href="https://adventofcode.com"&gt;eine Aufgabe aus Advent Of Code&lt;/a&gt; l√∂sen um das dahinter liegende Konzept zu verstehen. Ein Administrator nach einer Schulung die Sicherheitseinstellungen eines Netzwerk Pr√ºfen und verbessern. Ein Agiler Team-Teilnehmer ein neu gelerntes Projekt-Management Werkzeug in einem agilen Experiment ausprobieren.&lt;/p&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Beim Schreiben ist mir aufgefallen wie schwer es ist diese Ebenen kurz und Knapp vorzustellen. Es gibt ja noch drei weitere Ebenen, aber ich wollte eure gesch√§tzte Aufmerksamkeit nicht noch weiter Qu√§len. :)&lt;/p&gt;
&lt;p&gt;Daher habe ich hier abgetrennt. Diese ersten Ebenen sind zwar essenziell um zu verstehen wie das alles gemeint ist. Aber den eigentlichen Schatz heben wir erst auf der 4. und 5. Ebene: Analyse und Evaluation. &lt;a href="../waehrend-dem-lernen-lernen-lernen-blooms-taxonomie-ebene-4-6/"&gt;Und darum geht es (sicher f√ºr den geehrten Leser v√∂llig √ºberraschend) in meinem n√§chsten Blog Post&lt;/a&gt;. :)&lt;/p&gt;
</content></entry><entry><title>W√§hrend dem lernen Lernen lernen - Blooms Taxonomie</title><link href="https://h%C3%A4cker.net/blog/2024/9/waehrend-dem-lernen-lernen-lernen-blooms-taxonomie/" rel="alternate"></link><updated>2024-09-06T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:850a374a-0340-3d30-ad26-64bf3124ca02</id><content type="html">&lt;p&gt;&lt;img src="bloom.jpeg" alt="Die Lernpyramide nach Bloom"&gt;&lt;/p&gt;
&lt;p&gt;Vor einigen Wochen bin ich √ºber¬†&lt;a href="https://www.youtube.com/watch?v=1xqerXscTsE"&gt;ein wundervolles Youtube Video gestolpert, dass mich √ºber Blooms Taxonomie des Lernens informiert hat&lt;/a&gt;. Bloom stellt darin eine faszinierende Methode vor, mit der man sich Wissen √ºber ein Thema schnell und effektiv aneignen kann.&lt;/p&gt;
&lt;p&gt;Das hat mich ein bisschen umgehauen, da ich in alle den Jahren in denen ich gelernt habe noch nie davon geh√∂rt hatte. Endlich ein brauchbares Modell, wieso manche meiner Lerngewohnheiten gut oder eben schlecht funktionieren.¬†&lt;/p&gt;
&lt;p&gt;In kurz, &lt;a href="https://de.wikipedia.org/wiki/Blooms_Taxonomie"&gt;Blooms Taxonomie&lt;/a&gt; ist ein Modell aus den 60' er Jahren, in dem er postuliert das es sechs Ebenen des Lernens gibt. Diese werden gerne als Pyramide visualisiert, was ich ung√ºnstig finde ‚Üí dazu gleich mehr. ¬†&lt;/p&gt;
&lt;p&gt;Die Pyramide f√§ngt ganz unten (1) mit dem Auswendiglernen an. Dann lernt man (2) wie man Gelerntes erkl√§rt. Dann (3) wendet man es direkt an. Dann lernt man (4) es mit anderem Wissen zu vergleichen. Dann es (5) gegen andere Ans√§tze zu priorisieren. An der Spitze der Pyramide (6) gewinnt man aus der Erfahrung aus der Anwendung, gewappnet mit den Analysen und Vergleichen, neue Erkenntnisse und Dokumentieren diese (zum Beispiel als Blog-Post).&lt;/p&gt;
&lt;p&gt;Wenn man das sieht, erscheint es logisch, dass man diese Stufen brav der Reihe nach von unten nach oben durchl√§uft.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Und das ist der Clou - das ist genau falsch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Stattdessen ist es viel schlauer, sofort mit dem Analysieren und Evaluieren anzufangen (Level 4 und 5).&lt;/p&gt;
&lt;p&gt;Ja, das ist Anstrengender, ¬†aber man kriegt damit die ersten drei Ebenen geschenkt, denn es passiert automatisch wenn man sich selbst mit den Fragen der Ebene 4 und 5 herausfordert.&lt;/p&gt;
&lt;p&gt;Dazu kann mann jetzt auch noch Vergleichen wie sich das neue Wissen in das bereits gelernte einordnet, und Begr√ºnden, in welchem Kontext welcher der Ans√§tze die man kennt besser funktionieren.&lt;/p&gt;
&lt;p&gt;Also: Versucht es mal! &lt;a href="../waehrend-dem-lernen-lernen-lernen-blooms-taxonomie-ebene-1-3/"&gt;N√§chstes mal gehe ich noch mal tiefer darauf ein was die einzelnen Ebenen ausmacht&lt;/a&gt; und danach, wie man KI daf√ºr verwenden kann sich selbst beim lernen sofort auf Ebene vier und f√ºnf zu katapultieren!¬†&lt;/p&gt;
</content></entry><entry><title>Was ist blooms taxonomie? Die 'wichtigsten' oberen Ebenen</title><link href="https://h%C3%A4cker.net/blog/2024/9/waehrend-dem-lernen-lernen-lernen-blooms-taxonomie-ebene-4-6/" rel="alternate"></link><updated>2024-09-06T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:ce18e84e-058e-3955-b8ba-948565c762e3</id><content type="html">&lt;p&gt;&lt;img src="../waehrend-dem-lernen-lernen-lernen-blooms-taxonomie/bloom.jpeg" alt="Blooms Taxonomie"&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="../waehrend-dem-lernen-lernen-lernen-blooms-taxonomie/"&gt;meinem ersten Blog-Post habe ich mich mit Blooms Taxonomie besch√§ftigt&lt;/a&gt;. Im &lt;a href="../was-ist-blooms-taxonomie-ebene-1-3/"&gt;zweiten ging es um die ersten drei Ebenen seines Lernmodells&lt;/a&gt;. Hier geht es jetzt um die mir am wichtigsten ebenen vier und f√ºnf. Und der Vollst√§ndigkeit halber auch auch um die sechste.&lt;/p&gt;
&lt;p&gt;Und los gehts!&lt;/p&gt;
&lt;h2&gt;Die Ebenen von &lt;a href="https://de.wikipedia.org/wiki/Blooms_Taxonomie"&gt;Blooms Taxonomie&lt;/a&gt;:&lt;/h2&gt;
&lt;h3&gt;4. Analyse&lt;/h3&gt;
&lt;p&gt;Auf dieser Ebene geht es darum, Wissen und Informationen in seine Bestandteile zu zerlegen um Beziehungen und Strukturen zu erkennen und Verstehen. Hier geht es erstmals um kritisches Denken und das erkennen von Mustern.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fragen&lt;/em&gt;: "Welche Elemente bilden das Gesamtkonzept?" oder "Wie h√§ngen die Teile zusammen?" und "Was sind die zugrunde liegenden Annahmen?" Diese Fragen helfen uns, tiefer in das Thema einzutauchen und es aus verschiedenen Perspektiven zu betrachten.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;T√§tigkeit&lt;/em&gt;: Untersuchen, Zerlegen, Beziehungen erkennen, Vergleichen. Hier geht es darum, das erlernte Wissen zu analysieren, zu hinterfragen und mit schon gelerntem aus anderen Themen zu vergleichen und zu kontrastieren.&lt;/p&gt;
&lt;p&gt;Die F√§higkeit, komplexe Informationen zu durchdringen und logische Verbindungen herzustellen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lernziel&lt;/em&gt;: Ich kann komplexe Informationen durchdringen, zerlegen und logische Beziehungen erkennen. Auch zu anderem bisher gelernten. Das Ergebnis dieser Lernstufe ist die F√§higkeit, das Gelernte zu analysieren und zu hinterfragen.&lt;/p&gt;
&lt;p&gt;Daher ist diese Ebene und Ihre Fragestellung auch mit der n√§chsten so wichtig, um langfristig zu behalten was man gelernt hat (verkn√ºpfungen und kontrastierung zu anderem was man schon kann). Au√üerdem: Wenn man sich von Anfang an mit diesen Fragen besch√§ftigt, kriegt man in der gleichen Lernzeit Ebene 1-3 quasi umsonst.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Beispiel&lt;/em&gt;: Ein Softwareentwickler k√∂nnte beispielsweise den Code eines Programms analysieren, um Fehler zu finden oder um zu verstehen, wie verschiedene Teile des Codes zusammenarbeiten. In einem Konflikt k√∂nnte ich die Argumente analysieren, um Bestandteile, Beziehungen zwischen den Argumenten und die dahinter stehenden Annahmen, deren Logik, und die historische Beziehung der konflikteten Parteien zu bewerten.&lt;/p&gt;
&lt;h3&gt;5. Evaluieren&lt;/h3&gt;
&lt;p&gt;Jetzt, wo wir das Wissen analysiert und zerlegt haben, geht es darum, dieses Wissen zu bewerten, zu kritisieren und zu priorisieren. Es geht darum, fundierte Urteile zu f√§llen und Kritik zu √ºben.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fragen&lt;/em&gt;: "Ist diese These Valide?", "Wie effektiv ist diese Methode?", "Welche vor und Nachteile hat dieser Ansatz?", "Welcher andere Ansatz ist aus welchen Gr√ºnden besser?" oder "Welche Methode sollte ich priorisieren?" Diese Fragen helfen uns, das Wissen zu bewerten und Entscheidungen zu treffen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lernziel&lt;/em&gt;: Das Ergebnis dieser Lernstufe ist die F√§higkeit, das Gelernte kritisch anhand der f√ºr meine Situation relevanten Kriterien zu bewerten und Entscheidungen zu treffen. Es geht darum, das Wissen zu nutzen, um fundierte Entscheidungen zu treffen und Priorit√§ten zu setzen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;T√§tigkeit&lt;/em&gt;: F√ºhren von Debatten, Entscheidung zwischen Ans√§tzen, Bewerten von Projekten und Theorien. Hier geht es darum, das erlernte Wissen zu bewerten und zu priorisieren.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Beispiel&lt;/em&gt;: In einem Projekt oder bei der Softwareentwicklung verschiedene Strategien oder Umsetzungsm√∂glichkeiten bewerten und entscheiden, welche am besten umgesetzt werden sollte. Oder auch kleiner: Bewertung der Glaubw√ºrdigkeit einer Quelle. Kritisches hinterfragen von Ma√ünahmen und (politischen) Entscheidungen.&lt;/p&gt;
&lt;h3&gt;6. Erzeugen&lt;/h3&gt;
&lt;p&gt;Einleitung: Die h√∂chste Ebene ist das Erschaffen, bei dem ein neues oder originelles Werk entwickelt wird. Es geht darum, Wissen und Ideen auf innovative Weise zu kombinieren und neue Konzepte zu entwickeln.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fragen&lt;/em&gt;: "Was w√§re, wenn...?" oder "Wie k√∂nnte ich...?". "K√∂nnte ich [Problem X] vielleicht auch ganz anders angehen?", "Kann ich diese Konzepte vielleicht auch so kombinieren?"&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lernziel&lt;/em&gt;: Kreativit und Innovativ eigene Ideen in Produkte umsetzen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;T√§tigkeit&lt;/em&gt;: Entwickeln von Projekten oder Modellen. Schreiben von Texten. Entwerfen von Experimenten oder Prototypen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Beispiel&lt;/em&gt;: Als Softwareentwickler entwickle ich eine Software. Ich schreibe ein Gedicht. Ich f√ºhre eine neue Software ein um ein altes Problem neu besser zu l√∂sen.&lt;/p&gt;
&lt;h2&gt;Warum ist mir das so wichtig?&lt;/h2&gt;
&lt;p&gt;Seit den 1960er Jahren wird Blooms Taxonomie dazu verwendet, um einzusch√§tzen, wie gut ich und andere ein Thema verstanden haben. Und erst jetzt kriege ich raus, dass es a) existiert, und ich es b) dazu verwenden kann mein eigenes Lernen besser zu verstehen und zu vertiefen? Boah ey, wieso hat mir das in der Schule niemand erkl√§rt? Oder wenn, wieso dann nicht auf eine Weise die ich verstanden habe? Ich f√ºhle mich im Moment so, als wurde mir hier √ºber Jahre etwas wichtiges vorenthalten.&lt;/p&gt;
&lt;p&gt;So, das wars. Jetzt wisst Ihr so viel √ºber das Modell und seine Ebenen wie ich auch. &lt;a href="../../10/waehrend-dem-lernen-lernen-lernen-ki-nutzen/"&gt;N√§chstes mal soll es dann darum gehen wie man mit hilfe von KI sich selbst auf die Ebene des Lernens Katapultieren kann auf der man gerade sein will.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bis dahin, bleibt neugierig und probiert es doch mal aus in diesen Kategorien √ºber euer eigenes Lernen nachzudenken.&lt;/p&gt;
</content></entry><entry><title>rich und objexplore um Python code interaktiv zu verstehen</title><link href="https://h%C3%A4cker.net/blog/2024/6/rich-und-objexplore-um-python-code-interaktiv-zu-verstehen/" rel="alternate"></link><updated>2024-06-24T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:bbb524dc-8b1c-38f1-b2cc-78625a591aea</id><content type="html">&lt;p&gt;Da ich sie selber nicht so soft ben√∂tige und dann immer vergesse wie sie hei√üen hier als Notiz an mich selbst:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rich.readthedocs.io/en/stable/introduction.html?highlight=inspect#rich-inspect"&gt;&lt;code&gt;rich.inspect()&lt;/code&gt;&lt;/a&gt; ist super hilfreich um zu einem Objekt das man im Debugger vor Sich hat schnell eine √úbersicht zu generieren was es kann und welche Daten es hat.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/objexplore/"&gt;&lt;code&gt;objexplore.explore()&lt;/code&gt;&lt;/a&gt; baut auf rich auf und bietet einen interaktiven explorer mit im wesentlichen den gleichen Informationen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beide Tools sind super hilfreich, wenn man in einer (fremden) Code-Basis schnell einen √ºberblick kriegen will wie Objekte interagieren und zusammenarbeiten.&lt;/p&gt;
</content></entry><entry><title>Wie nutze ich die Shell effektiv</title><link href="https://h%C3%A4cker.net/blog/2024/5/wie-nutze-ich-die-shell-effektiv/" rel="alternate"></link><updated>2024-05-24T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:fe89a8fa-4ba6-3d47-98f4-741a022624b7</id><content type="html">&lt;p&gt;&lt;img src="hacker.jpeg" alt="H√§cker bei der Arbeit‚Ä¶"&gt;
Bei meiner Arbeit ist mir aufgefallen, dass viele Entwickler bei uns die Shell viel effektiver nutzen k√∂nnten, um ihre Arbeit besser und schneller zu machen. Da ich die Shell sehr viel nutze, habe ich dazu ein paar Ideen.¬†üòá Auf der anderen Seite gibt es immer wieder ein Nugget, das ich selbst nicht kenne ‚Äì und das m√∂chte ich nat√ºrlich auch lernen. ¬†&lt;/p&gt;
&lt;p&gt;In diesem Sinne: Ich freue mich √ºber Tips, lasst uns gerne daraus einen Austausch machen, wie man seine Shell effektiv einsetzt.&lt;/p&gt;
&lt;p&gt;Damit verst√§ndlich wird wie ich meine Shell verwende ist es wichtig zu verstehen dass es verschiedene Arten gibt einen Mac effektiv zu nutzen. Ich kategorisiere das f√ºr mich grob so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fensterbasiert: Viele Fenster, oft klein, die sich gegenseitig teilweise verdecken. Spezialisierte Apps anstatt Monolithen. Terminal, Editor, Git GUI, Datenbank-GUI und ein Dokumentationsbrowser, anstatt einer IDE die alles inkludiert.&lt;/li&gt;
&lt;li&gt;Screen/Tmux Style: Auch viele Fenster, aber ohne das diese sich √ºberlappen. Viel Full-Screen und oft ein Window Manger oder Terminal das sicherstellt das Fenster garantiert nebeneinander sind. IDEs arbeiten in der Regel so.&lt;/li&gt;
&lt;li&gt;Quake Shell-Style: Im wesentlichen irgend ein anderer Stil, aber mit einem globalen Shortcut, der jederzeit eine Shell in den Vordergrund bringt oder wieder verschwinden l√§sst - egal wo man gerade ist.&lt;/li&gt;
&lt;li&gt;Mehrere Desktops: Separation von Apps √ºber mehrere Desktops oder Workspaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ich bin ganz klar tief in dem Fensterbasierten Workflow verortet. Ich kenne nat√ºrlich auch die anderen Workflows, aber sie funktionieren f√ºr mich pers√∂nlich einfach nicht so gut. Ich finde √ºberlappende Fenster wirklich gro√üartig, weil ich damit auf einem sehr viel kleineren Bildschirm (14-Zoll-Notebook) genauso produktiv sein kann, wie auf einem sehr viel gr√∂√üeren Bildschirm.¬†&lt;/p&gt;
&lt;p&gt;Ich hoffe sehr, dass die Apple-Vision bald so gut funktioniert und so leicht wird, wie ich es mir w√ºnsche. Dann kann ich es mir meine Fenster fei um mich herum anordnen. Aber bis dahin bleibe ich bei √ºberlappenden Fenstern.&lt;/p&gt;
</content></entry><entry><title>Chestertons Fence oder was ist Denken zweiter Ordnung?</title><link href="https://h%C3%A4cker.net/blog/2024/4/chestertons-fence-oder-was-ist-denken-zweiter-ordnung/" rel="alternate"></link><updated>2024-04-18T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:55d18576-24b0-322f-b79f-1a57a1b64336</id><content type="html">&lt;p&gt;&lt;a href="https://fs.blog/chestertons-fence/"&gt;Mir hat dieser Artikel √ºber das Denken zweiter Ordnung sehr gut gefallen.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="chestertons-fence.jpeg" alt="Einsam stehendes Auto vor einem Zaun √ºber eine Stra√üe"&gt;&lt;/p&gt;
&lt;p&gt;Er erkl√§rt am Beispiel von 'Chestertons-Fence', warum es wichtig ist, vor √Ñnderungen an Systemen das Denken zweiter Ordnung einzusetzen.
Er nutzt dazu die Methapher eines Zauns √ºber eine Stra√üe. Diesen sollte man nicht einfach wegr√§umen, nur weil er nervt. Warum? Weil die Menschen die ihn gebaut haben hatten damit Aufwand, den Sie nicht einfach nur so zum Spa√ü investiert haben. Deren Gr√ºnde muss man verstehen um zu sehen ob der Zaun tats√§chich weg kann, oder nach wie vor n√∂tig ist.&lt;/p&gt;
&lt;p&gt;Angenommen hinter dem Zaun befindet sich ein Stra√üenabschnitt, der mit Minen verseucht ist. Leider ist dies in der Ukraine ja ein h√§ufiges Problem. Der Zaun sollte erst entfernt werden, wenn die Minen ger√§umt sind, um Todesf√§lle und Verletzungen zu vermeiden. Die Toten und Verletzten sind hier der Effekt zweiter Ordnung.&lt;/p&gt;
&lt;p&gt;Denken zweiter Ordnung hei√üt also nicht nur zu hinterfragen, warum etwas so ist, wie es ist, sondern auch zu verstehen, warum die Menschen, die es geschaffen haben (in unserem Fall meistens Code), es auf diese Weise gebaut haben. Bevor ich √Ñnderungen vornehme, sollte ich mir Zeit nehmen, um die Gr√ºnde f√ºr die urspr√ºngliche Gestaltung zu verstehen, da unbedachte √Ñnderungen unerw√ºnschte Effekte haben werden.&lt;/p&gt;
&lt;p&gt;So zu denken finde ich nicht leicht. Oft misslingt es mir. Aber es ist f√ºr mich ein Ziel.&lt;/p&gt;
&lt;h2&gt;Was hei√üt das f√ºr uns Entwickler?&lt;/h2&gt;
&lt;p&gt;Besonders bei der Frage: Wieso sind unsere Systeme so wie sie sind? Ist das f√ºr mich super relevant. Aber auch immer wenn ich Programmiere. Wenn ich einen Zaun aufstelle, also z.B. etwas komplizierter mache als es sein k√∂nnte, dann schreibe ich einen Kommentar wieso ich mich gegen die einfachere L√∂sung entschieden habe, damit die nach mir kommenden verstehen ob meine - f√ºr Sie - √ºberkomplizierte L√∂sung noch n√∂tig ist.
Wenn ich eine weiter reichende Entscheidung f√§lle, dann Dokumentiere ich diese gerne mit eineme Architektural Decision Record (ADR) der enth√§llt aus welchen Gr√ºnden wir uns so entschieden haben.
Wenn ich eine Story schreibe, dann muss da nicht nur das Feature drauf, sondern eben auch der Grund daf√ºr, damit ich oder andere sp√§ter nachvollzieen k√∂nnen, wieso dieses Feature existiert, oder eben wieso es nicht mehr n√∂tig ist.
Idealerweise w√ºrde ich auch gerne vom Code √ºber die Commits zur Story zur√ºck kommen - aber das gelingt mir bisher regelm√§√üig nicht.&lt;/p&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Viele der Praktiken, die wir in der Softwareentwicklung als Standards ansehen, dienen eigentlich dazu, das Denken zweiter Ordnung zu erleichtern ‚Äì ein wichtiger Zusammenhang, der oft unerw√§hnt bleibt, mir aber zunehmend klarer wird.&lt;/p&gt;
&lt;p&gt;Ganz besonders wichtig ist mir aber der Respekt, im Zweifel sollte ich erst einmal annehmen das der andere sich etwas dabei gedacht hat. Bevor ich das nicht verstehe sollte ich nicht die Axt ansetzen.&lt;/p&gt;
</content></entry><entry><title>Heimautomatisierung mit Tradfri, Hue und HomeKit - und e-M√ºll vermeiden</title><link href="https://h%C3%A4cker.net/blog/2022/2/heimautomatisierung-mit-tradfri-hue-und-homekit-und-e-muell-vermeiden/" rel="alternate"></link><updated>2022-02-19T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:a58210e7-1b2a-385a-90e5-d05f5b825528</id><content type="html">&lt;p&gt;Zu meinen Ikea Tr√•dfri Leuchten habe ich mir jetzt einen Phillips Hue LED-Streifen dazu geholt. Letztlich aus drei Gr√ºnden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Weil die viel Heller sind als fast alle Konkurrenzprodukte&lt;/li&gt;
&lt;li&gt;Weil sie auch &lt;a href="https://de.wikipedia.org/wiki/ZigBee"&gt;ZigBee&lt;/a&gt; verwendet und damit nahtlos in meine Ikea Tr√•dfri infrastruktur passt (theoretisch‚Ä¶)&lt;/li&gt;
&lt;li&gt;Weil ich mir die Ikea Bridge sehr bewusst ausgesucht habe, weil sie eben &lt;em&gt;ohne&lt;/em&gt; einen Cloud zwang daher kommt.&lt;/li&gt;
&lt;li&gt;Weil ich sie in einem Sonderangebot 3 Meter f√ºr 50 ‚Ç¨ bekommen habe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, also der Klebestreifen auf der LED-Schlange verdient diesen Namen schon mal nicht. Nicht nur das man den in 10 cm Inkrementen abpulen musste, er klebt zwar prima an der Tapete - aber nicht am LED-Streifen. WTF?&lt;/p&gt;
&lt;p&gt;Davon abgesehen ist er super hell und l√§sst sich √ºber Tradfri gut anbinden und steuern. ABER: Tradfri pusht ihn &lt;em&gt;NICHT&lt;/em&gt; nach &lt;a href="https://de.wikipedia.org/wiki/HomeKit"&gt;HomeKit&lt;/a&gt; wie es das mit den anderne Ikea eigenen Produkten macht. üò£üí©üò£üí©üò£ü§¨&lt;/p&gt;
&lt;p&gt;Software Updates spielt die Tradfri Basis auch nicht ein - aber ok, das kriege ich via Bluetooth hin, was der LED-Streifen auch noch kann.&lt;/p&gt;
&lt;p&gt;Jetzt extra noch eine Hue Bridge zu kaufen, nur damit ich dieses eine Ger√§t auch in HomeKit schalten kann, sehe ich jedenfalls mal gar nicht ein. Also hab ich mein trusty schweizer Messer Python ausgepackt und &lt;a href="https://github.com/dwt/home-automation"&gt;mit etwas Code&lt;/a&gt; nachgeholfen das fehlenden Device von Tr√•dfri nach HomeKit zu pushen. Et Voila. :-)&lt;/p&gt;
&lt;p&gt;Fazit: Die Schaltzeiten leiden etwas, Kann durchaus auch mal eine Sekunde dauern, anstatt der fast instantanen schaltzeit der Lampen die direkt √ºber die Tradfri Bridge gehen. Aber wurscht, keine extra Bridge, etwas Spa√ü mit Python und die Erfahrung das es leicht geht da beliebigen eigenen Code einzubinden, der z.B. sch√∂ne Hintergrund-Farbwechsel ambient Lights produziert.&lt;/p&gt;
</content></entry><entry><title>Elon Musks Design Philosophie</title><link href="https://h%C3%A4cker.net/blog/2021/10/elon-musks-design-philosophie/" rel="alternate"></link><updated>2021-10-21T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:b0737890-2fac-35d5-bb70-1ed4504fcf7a</id><content type="html">&lt;p&gt;Beim lesen &lt;a href="https://everydayastronaut.com/starbase-tour-and-interview-with-elon-musk/"&gt;dieses Interview mit Elon Musk&lt;/a&gt; (&lt;a href="https://www.youtube.com/watch?v=t705r8ICkRw"&gt;hier auch als Video&lt;/a&gt;) hatte ich wirklich Spa√ü.&lt;/p&gt;
&lt;p&gt;Diese Dinge sind nichts neues - aber mir ist klar geworden dass ich in der Vergangenheit viel zu Wenig wert darauf gelegt habe Requirements als Dumm zu identifizieren und Los zu werden, sowie Prozesse zu l√∂schen. Autsch. Mea Culpa - ich gelobe Besserung.&lt;/p&gt;
&lt;p&gt;Hier vor allem f√ºr mich selbst archiviert:&lt;/p&gt;
&lt;h2&gt;Musk‚Äôs Engineering Philosophy:&lt;/h2&gt;
&lt;p&gt;Musk overviewed his five step engineering process, which must be completed in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the requirements less dumb. The requirements are definitely dumb; it does not matter who gave them to you. He notes that it‚Äôs particularly dangerous if someone who is smart gives them the requirements, as one may not question the requirements enough. ‚ÄúEveryone‚Äôs wrong. No matter who you are, everyone is wrong some of the time.‚Äù He further notes that ‚Äúall designs are wrong, it‚Äôs just a matter of how wrong.‚Äù&lt;/li&gt;
&lt;li&gt;Try very hard to delete the part or process. If parts are not being added back into the design at least 10% of the time, not enough parts are being deleted. Musk noted that the bias tends to be very strongly toward ‚Äúlet‚Äôs add this part or process step in case we need it.‚Äù Additionally, each required part and process must come from a name, not a department, as a department cannot be asked why a requirement exists, but a person can.&lt;/li&gt;
&lt;li&gt;Simplify and optimize the design. This is step three as the most common error of a smart engineer is to optimize something that should not exist.&lt;/li&gt;
&lt;li&gt;Accelerate cycle time. Musk states ‚Äúyou‚Äôre moving too slowly, go faster! But don‚Äôt go faster until you‚Äôve worked on the other three things first.‚Äù&lt;/li&gt;
&lt;li&gt;Automate. An important part of this is to remove in-process testing after the problems have been diagnosed; if a product is reaching the end of a production line with a high acceptance rate, there is no need for in-process testing.
Additionally, Musk restated that he believes everyone should be a chief engineer. Engineers need to understand the system at a high level to understand when they are making a bad optimization. As an example, Musk noted that an order of magnitude more time has been spent reducing engine mass than reducing residual propellant, despite both being equally as important.&lt;/li&gt;
&lt;/ol&gt;
</content></entry><entry><title>Was sagt mir ein Covid-Schnelltest Ergebnis?</title><link href="https://h%C3%A4cker.net/blog/2021/5/was-sagt-mir-ein-covid-schnelltest-ergebnis/" rel="alternate"></link><updated>2021-05-13T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:3e0fabb0-55f2-38a2-83e1-6b6a64a47a2f</id><content type="html">&lt;p&gt;Inspiriert von &lt;a href="https://www.youtube.com/watch?v=lG4VkPoG3ko"&gt;diesem Video von 3Blue1Brown&lt;/a&gt;, hat sich mein Verst√§ndnis wie man √ºber Covid-Tests nachdenkt, grunds√§tzlich gewandelt.&lt;/p&gt;
&lt;p&gt;Zwar war mir schon sehr lange Bewusst, dass Test-Ergebnisse kontra-intuitiv sein k√∂nnen, weil sie eben auch Gesunde als krank erkennen k√∂nnen.&lt;/p&gt;
&lt;p&gt;Das ist einfach nachzuvollziehen, wenn man einen Covid-Schnelltest anschaut. Die G√ºte dieser Tests wird fast immer mit zwei Zahlen angegeben: Sensitivit√§t (wie viele der tats√§chlich Kranken werden erkannt) und Spezifizit√§t (wie viele der Gesunden werden auch als Gesund erkannt). Nehmen wir an unser Test hat jetzt 90% Sensitivit√§t und 90% Spezifit√§t (fiktive Zahlen f√ºr leichteres Rechnen - echte Zahlen kommen sp√§ter).&lt;/p&gt;
&lt;p&gt;Wende ich diesen Test jetzt auf 100 menschen in einem Land an, das Zero-Covid hat. Dann sollten trotzdem 10 Personen als Krank gemeldet werden. Was hei√üt das jetzt? Logischerweise nix, denn es sind ja alle Gesund.&lt;/p&gt;
&lt;p&gt;Gehe ich stattdessen ins Krankenhaus auf die Covid-Station und mache den Test dort mit 100 Personen, dann sollten trotzdem 10 Personen als Gesund gemeldet werden. Was hei√üt das jetzt? Logischerweise auch nix, die Leute sind ja schon wegen Covid in Behandlung und nicht durch den Test pl√∂tzlich gesundet.&lt;/p&gt;
&lt;p&gt;Und das ist die wichtige Denk-√Ñnderung die 3Blue1Brown in seinem Video motiviert - man muss beim nachdenken √ºber Testergebnisse einfach immer auch dar√ºber nachdenken wie wahrscheinlich es ist das man tats√§chlich Krank ist. (&lt;a href="https://de.wikipedia.org/wiki/Satz_von_Bayes"&gt;Bayes l√§√üt gr√º√üen&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Und jetzt kommt der Dreh - alles wird viel einfacher, wenn man von vorne herein nicht denkt dass der Test mir sagt ob ich gesund oder Krank bin, sondern:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Jeder Test hat ein &lt;em&gt;Vorhersagekraft&lt;/em&gt;, und dieser Faktor &lt;em&gt;ver√§ndert meine Wahrscheinlichkeit&lt;/em&gt; Krank zu sein.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Es w√§re also viel Einfacher, wenn man bei Tests nicht Sensitivit√§t und Spezifizit√§t angibt, sondern daraus die &lt;em&gt;Vorhersagekraft&lt;/em&gt; des Tests berechnet. Damit kann man dann n√§mlich pl√∂tzlich viel einfacher Denken und verstehen. Und insbesondere ist es viel einfacher  eine 'Vorhersagekraft' nicht mit 'Wahrscheinlichkeit das ich Krank bin' zu verwechseln, was einfach jeder tut der sich mit dem Thema nicht intensiv auseinander setzt.&lt;/p&gt;
&lt;p&gt;Und das beste: Wenn man nicht in Prozent, sondern in Verh√§ltnissen rechnet, dann ist das sogar pr√§zise!&lt;/p&gt;
&lt;p&gt;Wie kommt man jetzt auf diese &lt;em&gt;Vorhersagekraft&lt;/em&gt; (auch Bayes Faktor genannt)&lt;/p&gt;
&lt;p&gt;Jeder Test ist durch zwei Zahlen (Sensitivit√§t[welcher Anteil der Kranken wird erkannt], Spezifit√§t[welcher Anteil der Gesunden wird als Gesund erkannt]) bzw. durch die Komplemente davon (Falsch-Negativ-Rate, Falsch-Positiv-Rate) bestimmt.&lt;/p&gt;
&lt;p&gt;Interessiert man sich jetzt f√ºr die Frage was ein Positiver-Test aussagt, kann man aus dem Quotient von Sensitivit√§t geteilt durch Falsch-Positiv-Rate die Vorhersagekraft eines Positiven Tests und aus dem Quotient von Falsch-Negativ-Rate geteilt durch Spezifit√§t die Vorhersagekraft eines Negativen Tests erhalten.&lt;/p&gt;
&lt;p&gt;Ein Beispiel: Angenommen ein Test hat Sensitivit√§t 90% und Spezifit√§t 95% (also Falsch-Negativ-Rate 10%, Falsch-Positiv-Rate 5%). Dann ist die Vorhersagekraft eines Positiven Tests 90%/5%=18. Das hei√üt, wenn ich einen Positiven Test habe, dann wei√ü ich, dass sich die Wahrscheinlichkeit das ich Krank bin 18 mal vergr√∂√üert hat zu dem wie sie vorher war. Und umgekehrt: Ein Negativer Test 10%/95%‚âà¬† 1/10. In Worten: Ein Negativer Test verkleinert meine Chance krank zu sein um etwa eine Gr√∂√üenordnung.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;ü§Ø&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rechnet man in Prozent ist das leider nur eine Absch√§tzung, aber wenn man das ganze in &lt;a href="https://de.wikipedia.org/wiki/Chance_(Stochastik"&gt;Chancen&lt;/a&gt;) rechnet wird aus der Absch√§tzung eine pr√§zise Formel!&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;ü§Ø ü§Ø&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Schauen wir also mal auf ein paar reale Zahlen an.&lt;/p&gt;
&lt;p&gt;In Berlin (stand 13. Mai 21, sind nach &lt;a href="https://pavelmayer.de/covid/risks/"&gt;Pavels Covid Tabelle&lt;/a&gt;) derzeit einer von 394 Personen Ansteckend.&lt;/p&gt;
&lt;p&gt;F√ºr einen Covid-Test den ich gerade da habe &lt;a href="https://images.vinocentral.de/media/pdf/87/1d/be/BOSON-SARS-CoV-2-Antigen-Schnelltest-Information-Zusammenfassung.pdf"&gt;findet sich hier&lt;/a&gt; eine Sensitivit√§t ~93,5% und Spezifit√§t ~98%.&lt;/p&gt;
&lt;p&gt;Die Vorhersagekraft eines Positiven Tests ist  93,5%/2% ~47. Demnach w√§chst meine Chance heute ansteckend zu sein von 1/394 um das fast f√ºnfzigfache auf etwas mehr als 1/4.&lt;/p&gt;
&lt;p&gt;Die Vorhersagekraft eines negativen Tests ist 6,5%/98%~0,06. Demnach w√§chst meine Chance Gesund zu sein um fast zwei Gr√∂√üenordnungen von 1/394 auf etwa 6,5/38.612.&lt;/p&gt;
&lt;p&gt;Oh wie sch√∂n w√§re es, wenn das auch √ºberall so kommuniziert w√ºrde‚Ä¶&lt;/p&gt;
</content></entry><entry><title>Open Source Flugelektronik 2 - BLE und Serial</title><link href="https://h%C3%A4cker.net/blog/2021/4/open-source-flugelektronik-2-ble-und-serial/" rel="alternate"></link><updated>2021-04-22T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:9d400487-c53e-3329-9e5c-5d1fa5d3b0e6</id><content type="html">&lt;p&gt;Langsam n√§here ich mich meinen &lt;a href="https://github.com/lyusupov/SoftRF"&gt;Soft-RF-Ger√§ten&lt;/a&gt; an. Ich kann jetzt auch √ºber &lt;a href="./"&gt;Bluetooth Low Energy (BLE)&lt;/a&gt; mit dem Ger√§t reden. Das Python Framework &lt;a href="https://pypi.org/project/bleak/"&gt;Bleak&lt;/a&gt; war dabei unglaublich hilfreich, da ich fast den ganzen BLE-Code sehr plattform-neutral Scheiben kann. I.e. der Code ist zwar nur auf MacOS getestet, wird aber sehr wahrscheinlich auch unter Linux funktionieren. Der Code zu diesem Post liegt &lt;a href="https://github.com/dwt/softrf-interfacing"&gt;auf github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wie l√§uft das jetzt? Zuerst braucht man einen BLE-Scanner, um die Adresse des Ger√§ts zu finden. Bei mir sieht das so aus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% ./ble_scanner.py
........................................
[...]
0975FAB7-6F50-4B60-A0D8-9F11C817FB6D: SoftRF-f0c010-LE
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit dieser Adresse kann man dann reden um sich anzuschauen welche BLE-Services sie anbietet:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% ./ble_explore_device.py 0975FAB7-6F50-4B60-A0D8-9F11C817FB6D
Connected: True
[Service] 0000ffe0-0000-1000-8000-00805f9b34fb (Handle: 40): Vendor specific
    [Characteristic] 0000ffe1-0000-1000-8000-00805f9b34fb (Handle: 41): Vendor specific (read,write-without-response,notify), Value: b',,,,,,,,,99.99,99.99'
        [Descriptor] 00002901-0000-1000-8000-00805f9b34fb (Handle: 43): Characteristic User Description) | Value: b'HMSoft'
        [Descriptor] 00002902-0000-1000-8000-00805f9b34fb (Handle: 44): Client Characteristic Configuration) | Value: b'\x00\x00'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Was hei√üt das? Das ger√§t bietet den Service &lt;code&gt;0000ffe0-*&lt;/code&gt; an und darauf eine Characteristik &lt;code&gt;0000ffe1-*&lt;/code&gt; die wiederum zwei Deskriptoren enth√§lt. &lt;code&gt;00002901-*&lt;/code&gt;und &lt;code&gt;00002902-*&lt;/code&gt;. Nicht das ich BLE vollst√§ndig verstehe, aber zumindest wei√ü ich das ein Service der Grunds√§tzliche Beh√§lter f√ºr alle BLE Interaktionen ist und eine Charactreristik einen lese und schreibbaren Wert darstellt. Deskriptoren k√∂nnen darin verschachtelt sein und sind entweder zus√§tzliche lese und schreibbare Werte oder haben einen technischen Sinn. In diesem Beispiel ist der zweite Descriptor notwendig um auf der Charakteristik nicht nur lesen und schreiben, sondern auch  Notify zu implementieren -&amp;gt; und das braucht es f√ºr die Serielle Schnittstelle.&lt;/p&gt;
&lt;p&gt;Entscheidend ist hier die Service-Charakteristik &lt;code&gt;0000ffe1-0000-1000-8000-00805f9b34fb&lt;/code&gt; Hier spielt die ganze Musik. Die Serielle Ausgabe des SoftRF kann man mittels Notify davon auslesen und man kann auf die Serielle Schnittstelle schreiben indem man darauf schreibt. Soweit so simpel. Und damit kriegt man auch schon ein sehr primitives UART hin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% ./ble_uart.py 0975FAB7-6F50-4B60-A0D8-9F11C817FB6D
Connected, start typing and press ENTER...
0.00,0000.0000,N,00000.0000,E,0,00,100.0,0.0,M,0.0,M,,*5C
$GPGSA,A,1,,,,,,,,,,,,,99.99,99.99,99.99*30
$PFLAU,0,0,0,1,0,,0,,,*4F
$GPRMC,,V,,,,,,,,,,N*53
$GPGGA,000000.00,0000.0000,N,00000.0000,E,0,00,100.0,0.0,M,0.0,M,,*5C
$GPGSA,A,1,,,,,,,,,,,,,99.99,99.99,99$PFLAU,0,0,0,1,0,,0,,,*4F
$GPRMC,,V,,,,,,,,,,N*53
$GPGGA,000000.00,0000.0000,N,00000.0000,E,0,00,100.0,0.0,M,0.0,M,,*5C
$GPGSA,A,1,,,,,,,,,,,,,99.99,99.99,99.99*30
$PFLAU,0,0,0,1,0,,0,,,*4F
$GPRMC,,V,,,,,,,,,,N*53
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yay!&lt;/p&gt;
&lt;p&gt;N√§chste Tasks: das NMEA Encoding verstehen und mal schauen ob ich damit eine erste simple Visualisierung hinbekomme.&lt;/p&gt;
</content></entry><entry><title>Wie und wann den Retter werfen?</title><link href="https://h%C3%A4cker.net/blog/2021/4/wie-und-wann-den-retter-werfen/" rel="alternate"></link><updated>2021-04-17T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:4a1b9d86-543d-34a5-b0ec-924e3d4cf7d8</id><content type="html">&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Oa1JCLqIwS0"&gt;Diesen Vortrag von Theo de Blic&lt;/a&gt; finde ich sehr sehenswert, da er a) viel Erfahrung mit Rettern hat - immerhin 14 Retterw√ºrfe hat er schon durch, und b) einen wundersch√∂n strukturierten Gedanken-Ablauf hat wan und wie man seine Retter werfen soll.&lt;/p&gt;
&lt;p&gt;Besonders Wertvoll fand ich die Folie 'Know your limits' in denen er wiedergibt wann Er seinen Retter wirft. Ich habe beschlossen das ich mir diese 'Gedankenkarte' auf jeden fall auch ziehen m√∂chte. Also: 'Note to self' - Wann immer eine dieser Situationen auftritt, egal welche H√∂he, ziehe ich meine Rettung!&lt;/p&gt;
&lt;h2&gt;Know your limits&lt;/h2&gt;
&lt;h3&gt;H√∂he&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ich bin niedrig&lt;/li&gt;
&lt;li&gt;Ich bin nicht sicher ob ich hoch oder niedrig bin&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Verloren F√ºhlen&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ich wei√ü nicht was ich tun soll&lt;/li&gt;
&lt;li&gt;Ich wei√ü nicht wo ich bin&lt;/li&gt;
&lt;li&gt;Ich verstehe nicht was passiert&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Unl√∂sbare Situationen&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Line over&lt;/li&gt;
&lt;li&gt;Mehrere twists&lt;/li&gt;
&lt;li&gt;Gro√üe Krawatte&lt;/li&gt;
&lt;li&gt;Kaputter Fl√ºgel&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Open Source Flugelektronik mit Lora</title><link href="https://h%C3%A4cker.net/blog/2021/4/open-source-flugelektronik-mit-lorawan/" rel="alternate"></link><updated>2021-04-17T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:8fe7de32-bbfb-385d-9e4c-ae441b249a37</id><content type="html">&lt;p&gt;Inzwischen gibt es mehrere Projekte die Lora Funktechnik f√ºr Ad-Hoc-Netzwerke in der Luft (und am Boden) verwenden.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lyusupov/SoftRF"&gt;SoftRF&lt;/a&gt; ist vermutlich das bekannteste, da es mit g√ºnstiger Hardware eigentlich alle Standards unterst√ºtzt. &lt;a href="https://de.aliexpress.com/item/4001286458852.html"&gt;Dieses&lt;/a&gt; f√ºr in der Luft und und &lt;a href="https://de.aliexpress.com/item/4000571051141.html"&gt;dieses&lt;/a&gt; als Gegenger√§t am Boden und f√ºr Experimente - jeweils in der in Europa zugelassenen 868Mhz Variante - habe ich mir besorgt, da sie nur jeweils ~25‚Ç¨ Kosten.&lt;/p&gt;
&lt;p&gt;SoftRF kommt darauf sogar schon vorinstalliert, das ist wirklich sehr komfortabel.&lt;/p&gt;
&lt;p&gt;In Betrieb lassen sich die Ger√§te auch ganz gut nehmen, einfach via USB an den Rechner anschlie√üen, bei dem einen geht dann ein WLAN auf √ºber das man es Konfigurieren kann, bei dem anderen hat man direkten Zugriff √ºber die serielle:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyserial
$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;serial.tools.list_ports
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;serial.tools.miniterm&lt;span class="w"&gt; &lt;/span&gt;/path/to/port
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Konfigurieren kann man das Ger√§t dann √ºber eine Config-String, den man &lt;a href="http://soaringweather.no-ip.info/SoftRF/settings.html"&gt;in diesem Web-Interface&lt;/a&gt; generieren kann.&lt;/p&gt;
&lt;p&gt;Easy peasy.&lt;/p&gt;
&lt;p&gt;Next Tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/NMEA_0183"&gt;NMEA&lt;/a&gt; Nachrichten Parsen und lesbar Ausgeben&lt;/li&gt;
&lt;li&gt;Das zweite Ger√§t √ºber Bluetooth Low Energy verbinden&lt;/li&gt;
&lt;li&gt;BLE mit einem meiner Flug-Computer-Smartphone Apps verbinden - &lt;a href="http://flyskyhy.com"&gt;FlySkyHy&lt;/a&gt; oder &lt;a href="https://evario.variosoft.eu"&gt;eVario&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Herausfinden was es braucht um da noch einen guten Barometrischen Sensor mit einzubauen&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Crosswords Puzzle</title><link href="https://h%C3%A4cker.net/blog/2021/3/crosswords-puzzle/" rel="alternate"></link><updated>2021-03-15T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:895a87f6-13a4-3267-81c9-628608a973e3</id><content type="html">&lt;p&gt;Kreuzwortr√§tsel finde ich eigentlich langweilig. Aber die Idee die Vorgaben √ºber Regul√§re Ausdr√ºcke zu machen finde ich &lt;em&gt;klasse&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jimbly.github.io/regex-crossword/"&gt;Hier geht es zum Puzzle&lt;/a&gt; - mit Herzlichem Dank an &lt;a href="https://github.com/Jimbly"&gt;Jimb Esser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Urspr√ºnglich entworfen hat es &lt;a href="https://web.mit.edu/puzzle/www/2013/coinheist.com/rubik/a_regular_crossword/"&gt;Dan Gulotta am MIT&lt;/a&gt; aber die JS Implementierung von &lt;a href="https://github.com/Jimbly"&gt;Jimb Esser&lt;/a&gt; ist einfach Gold wert.&lt;/p&gt;
</content></entry><entry><title>Thermik-Gradienten lesen</title><link href="https://h%C3%A4cker.net/blog/2021/3/thermik-gradienten-lesen/" rel="alternate"></link><updated>2021-03-14T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:23bd1f52-29c2-3a35-aecc-fe7397d5869c</id><content type="html">&lt;p&gt;Im aktuellen Thermik-Magazin gab es einen Artikel √ºber Thermik-Gradienten - und insbesondere diese kleine Tabelle, die es leicht macht aus der St√§rke der Gradienten auf die vorhandene Thermik zu schlie√üen. Note to self: Gradienten √ºber 0,7 vorerst vermeiden.&lt;/p&gt;
&lt;p&gt;&lt;img src="Gradient Legende.png" alt="Gradienten Legende"&gt;&lt;/p&gt;
</content></entry><entry><title>Dependable API Evolution</title><link href="https://h%C3%A4cker.net/blog/2021/2/dependable-api-evolution/" rel="alternate"></link><updated>2021-02-18T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:1c73ef64-b4ea-3a59-93bd-e814a6091a95</id><content type="html">&lt;p&gt;This is an old text that I just found on my hard disk. It's too good not to publish I think, as pretty much everything in it is still completely relevant. So here goes - a shout to the past, as this was written ca. 2014. At the time I discovered Semantic Versioning - and was discontent, because it is simply not enough. We as a community need a better name for what we want to do with APIs - just Semantic Versioning is not enough to reliably move forward and stay sane.&lt;/p&gt;
&lt;h2&gt;My Suggestion: Define Dependable API Evolution&lt;/h2&gt;
&lt;p&gt;The problem that prompted me to write this: I am sick and tired of APIs that do not evolve and that have old warts that are not fixed. At the same time I hate APIs that make every update to multi hour 'joy-ride' of debugging and finding out why the heck my system doesn't work anymore.&lt;/p&gt;
&lt;p&gt;For this I think that &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt; is just not enough.&lt;/p&gt;
&lt;p&gt;As an API provider you should adopt a dependable API evolution strategy that gives your users timely updates and new functionality, makes updating to a your newest version a breeze and joy because of new features instead of a reason for despair because of the amount of work it requires.&lt;/p&gt;
&lt;p&gt;As an API user you should demand this so that you can send you patches and actually hope that they will get into the next version in a timely manner while it is not a burden to update to new revisions. And then there is the small part of actually enjoying an API that works and is extended in a good and healthy way.&lt;/p&gt;
&lt;p&gt;Consider libraries like jQuery or Apples Cocoa where it is pretty much a no brainer to update to the newest version immediately. At the same time, they stay current and adapt and absorb new emerging patterns in a timely manner while fixing old warts and making the framework more and more consistent all the time. (Ok, some warts are not fixeable, but they try very hard)&lt;/p&gt;
&lt;p&gt;I think it is Common Sense to do &lt;strong&gt;Dependable API Evolution&lt;/strong&gt;, but for some reason it hasn't yet caught on as common knowledge - and there is no easy way to refer anyone to a document that explains it. So here I go.&lt;/p&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API's suddenly change names / types / behaviour from version to version&lt;/li&gt;
&lt;li&gt;API's are suddenly removed from version to version without a warning period&lt;/li&gt;
&lt;li&gt;Bugs/ Inconsistencies in APIs are not fixed&lt;/li&gt;
&lt;li&gt;New and improved patterns or API designs are not adapted in a timely matter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extremes to avoid:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Python Standard Library Syndrome&lt;/em&gt;: Your Library is so &lt;em&gt;stable&lt;/em&gt; that a module has to be dead/ unmaintained for 3-5 years before you consider adding it to your library. Some symptoms: API changes rarely, your API has very inconsistent naming, and design pattern use varies widely across your API. Also many of the non core modules have alternatives in the wild that have a vastly more fluent / short / powerful / consistent / modern APIs. Consider the Python standard library. Almost no development happens in there, many of it's modules are 10 and more years old with only the most required bugfixes going in. Not even the standard naming convention of python is used consistently throughout it's API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Python 3k Syndrome&lt;/em&gt;: Your users stick with an old version of your API and are very reluctant to update. Symptoms: You are forced to release new versions of it instead focussing your engineering on the newest version. You add Interims Versions, i.e evolutions of the old API version to make it easier for your users to switch to the newest version. You release new versions of your new API that add in old features again to make it easier for your users to upgrade. Consider the introduction of Python 3.0. Nobody used it. Three major revisions where required (3.0, 3.1, 3.2) before the community is actually considering its adoption. (And now - 2021 -  some 12 years after this text was written, there is still a lot of software around that is on Python 2).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Thousands of Patches Flying in Close Formation Syndrome&lt;/em&gt;: Different parts of the API have very different fluency to it and don't match very well. Symptoms: Knowing one part of the API doesn't make it any easier to guess the names and workings of other parts of your API. Documentation cannot be consolidated by talking about the Design Patterns adopted by your framework, but instead is separated from each other and also very needed because you need to look at it for every module anew.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;DOM API Syndrome&lt;/em&gt;: Different implementations / versions of your API are so inconsistent, that it is almost impossible for users to consume all of them. Symptoms: There are adapter packages around to wrap your API and make it easier for users to actually use them and allow them to target different versions of that API that are in use in the wild. Consider the success of jQuery that does nothing that hiding the DOM-APIs behind something sane and manageable. (2021 me here - the web has started to tackle this problem, but boy, is this still a nightmare. Just the fact that projects like &lt;a href="https://caniuse.com"&gt;can I use&lt;/a&gt; are so much needed‚Ä¶)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Ruby Debugger Syndrome&lt;/em&gt;: Different versions of your API change so much that consumers are unable to evolve an API that builds on it. Symptoms: Different versions of your API have different incompatible packages that implement the same functionality in an incompatible way. Backwards compatibility is virtually impossible. Consider the different Ruby-Debugger gems that have sprung up for the various versions of the interpreter. 'ruby-debug' for Ruby 1.8, 'ruby-debugger19' and later 'debugger' for Ruby 1.9, 'byebug' for Ruby 2.0 and it seems Ruby 2.1, already needs another different debugger package. Maybe it is 'pry' now...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;Version 2 Rewrite Syndrome&lt;/em&gt;: Symptoms: You have a branch in your repository that contains your next version, because it's so much different that you really need to retain a branch of the current version to apply bugfixes while you finish up the next version. Again, Python 2 and 3 comes to mind as an abhorrent example of this problem. 12 years after the release of Python 3.0 the, old version 2 branch was still around and kind of alive as small features where added, bugs fixed. Thats a problem - not a great achievement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Have a clear deprecation cycle and use it. It should stretch over multiple versions, and depending on the size or importance of that Deprecated API, this could be several major versions.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your deprecation cycle should contain these steps (which could itself be a multi version rollout)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deprecated APIs are clearly marked in the documentation and source.&lt;/li&gt;
&lt;li&gt;There is a clear statement in the source or documentation what the expected alternative is. What is the the developer expected to do / use instead?&lt;/li&gt;
&lt;li&gt;Using a deprecated API should emit a warning.&lt;/li&gt;
&lt;li&gt;Deprecated API is removed from the documentation. Still using it raises a warning.&lt;/li&gt;
&lt;li&gt;Switch that warning to an error for developers, while only warning users.&lt;/li&gt;
&lt;li&gt;Then and only then it should disappear. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the single most important thing to do, everything else follows from this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Don't just change / remove API. You released it? It's out there. Deprecate it but retain it for a time and then remove it! Document what users are expected to do instead. This documentation should be referred to / included in the warning that is raised when that API is used.&lt;/li&gt;
&lt;li&gt;Document warts that you cannot fix anymore because they are too engrained in the API and are too widely adopted. It is important that your users understand that this is a wart and nothing to use as an example for others or patches that they send you. This ensures that your errors of the past are not repeated.&lt;/li&gt;
&lt;li&gt;Never miss an opportunity to change your API to make it more uniform and or adopt a deeper pattern across it.&lt;/li&gt;
&lt;li&gt;Focus a major part of your documentation on the patterns that underly your API and then don't repeat yourself in every part of the documentation but just refer to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do this and your API becomes more and more coherent over time. Users of such an API can often just use  a broad lisit of your API packages / objects / methods that are easy to scan / search. With that they can get an overview of what is available at a glance. They will often not need detailed documentation as they can just guess how stuff works, what stuff is named, how error handling works, ‚Ä¶ All of that makes for coding that is enjoyable and code just flows out of your fingers.&lt;/p&gt;
&lt;p&gt;Also, users will update in a heartbeat allowing you to actually focus on newer versions, instead of having to maintain long term stable old versions and waste developer time on this rather non productive stuff.&lt;/p&gt;
&lt;p&gt;What do you think? Should I set up a webpage like  &lt;a href="http://semver.org"&gt;semver.org&lt;/a&gt;? Do we need stickers like &lt;img src="https://img.shields.io/badge/Dependable%20API%20Evolution-1.0-success" alt="Dependable API Evolution"&gt;?&lt;/p&gt;
&lt;p&gt;Text will be evolved (on Github)[&lt;a href="https://github.com/dwt/Dependable_API_Evolution"&gt;https://github.com/dwt/Dependable_API_Evolution&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Feedback welcome.&lt;/p&gt;
</content></entry><entry><title>Yeehaw! Endlich wieder ein Blog!</title><link href="https://h%C3%A4cker.net/blog/2018/7/yeehaw-endlich-wieder-ein-blog/" rel="alternate"></link><updated>2018-07-16T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:76b8ddbb-b7f4-3df6-9fb0-dba24029518d</id><content type="html">&lt;p&gt;Lange hat es gedauert - Ahem.&lt;/p&gt;
&lt;p&gt;In den letzten Monaten habe ich mich mit &lt;a href="https://getlektor.com"&gt;Lektor&lt;/a&gt; auseinandergesetzt. Mit ein Paar Plugins (&lt;a href="https://github.com/humrochagf/lektor-creative-commons"&gt;CreativeCommons&lt;/a&gt; und &lt;a href="https://github.com/lektor/lektor-markdown-highlighter"&gt;Markdown Highlighter&lt;/a&gt;) kann man viel Spa√ü beim Blog-Post schreiben haben.&lt;/p&gt;
&lt;p&gt;Der gro√üe Vorteil von Lektor ist, dass man eine komplett statische Seite damit rendert. Man kann die Seite danach also √ºber ein CDN ausliefern - 'Internet Scale' ist also gar kein Problem‚Ä¶&lt;/p&gt;
&lt;p&gt;Solche Systeme gibt es nat√ºrlich viele - aber mit Lektor kriegt man zus√§tzlich noch ein CMS (das Lokal l√§uft) - oder auch hinter &lt;code&gt;.htaccess&lt;/code&gt; gesch√ºtzt laufen kann, so dass man keine Sorgen haben muss, dass einem √ºber so eine Webseite der Server aufgemacht wird.&lt;/p&gt;
&lt;p&gt;Aber Lektor √ºberzeugt auch mit einer moderat einfachen &lt;a href="https://www.getlektor.com/docs/api/"&gt;API&lt;/a&gt;, selbst plugins daf√ºr zu schreiben ist einfach und macht Spa√ü. Fast wie es bei &lt;a href="https://trac.edgewall.org"&gt;Track&lt;/a&gt; ganz am Anfang auch einmal war. ‚ò∫Ô∏è&lt;/p&gt;
&lt;p&gt;Ich freue mich dar√ºber dass ich jetzt eine voll-responsive Seite haben, die mit HTML und CSS wirklich auskommt - no JS needed. (Ich werde aber vielleicht in der Zukunft f√ºr Experimente auch JS in der Seite verwenden). F√ºr jetzt ist es erst mal das Experiment wie lange ich ohne JS auskomme.&lt;/p&gt;
&lt;p&gt;Da w√§re zum Beispiel das Men√º - das auf Mobil mit Animation sch√∂n aufklappt. Hierzu habe ich verschiedene Techniken kombiniert.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Die Verh√§ltnisse der ganzen Abmessungen werden √ºber &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables"&gt;CSS-Variablen&lt;/a&gt; und &lt;a href="https://developer.mozilla.org/de/docs/Web/CSS/calc"&gt;CSS-Calc&lt;/a&gt; einmal global gesetzt. Das geht zwar noch nicht vollst√§ndig, da man CSS Variablen &lt;a href="https://stackoverflow.com/questions/40722882/css-native-variables-not-working-in-media-queries#40723269"&gt;nicht in Media Queries einsetzen kann&lt;/a&gt;, aber immerhin. Einzig dass man Stylesheets noch nicht 'nested' aufschreiben kann st√∂rt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Die Animation beim klick auf das &lt;a href="https://de.wikipedia.org/wiki/Hamburger-Men√º-Icon"&gt;Hamburger Men√º&lt;/a&gt; sowie das √ñffnen des Men√ºs kommt komplett ohne JS aus. Damit das geht braucht es ein DOM Element, dass den State 'ein oder ausgeblendet' h√§lt, gleichzeitig via CSS abgefragt werden kann sowie diesen State durch Klick auf ein anderes Element √§ndert. Well, daf√ºr funktioniert lustiger Weise das &lt;code&gt;&amp;lt;input type=checkbox id=menu-state&amp;gt;&lt;/code&gt; Element. Das wechselt den &lt;code&gt;checked&lt;/code&gt;-Zustand, was mann dankenswerter Weise in CSS mittels &lt;code&gt;:checked&lt;/code&gt; herausfinden kann. Der Clou ist aber, dass man irgendwo anders im Dokument ein &lt;code&gt;&amp;lt;label for=menu-state&amp;gt;&lt;/code&gt; haben kann, auf das man Klicken kann um diesen State zu wechseln. Und &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; kann man im Gegensatz zu &lt;code&gt;&amp;lt;input type=checkbox&amp;gt;&lt;/code&gt; in allen Browsern vern√ºnftig stylen. Und man kann mittels &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations"&gt;CSS-Animationen&lt;/a&gt; alles animieren. Fuck yeah!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content></entry><entry><title>Lockless Algorithms</title><link href="https://h%C3%A4cker.net/blog/2015/2/lockless-algorithms/" rel="alternate"></link><updated>2015-02-14T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:eb502ea1-c872-354b-a2ed-37da2b8d4fd1</id><content type="html">&lt;p&gt;Schon lange habe ich keine so passende Visualisierung mehr f√ºr etwas gesehen:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Non-blocking_algorithm"&gt;Lockless Algorithms / Schlosslose Algorithmen&lt;/a&gt;:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ufK2XRGUjuc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="http://devopsreactions.tumblr.com/post/110529123748/lockess-algorithm"&gt;via devopsreactions&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Melderecht Datenweitergabe jetzt ohne Zustimmung</title><link href="https://h%C3%A4cker.net/blog/2012/7/melderecht-datenweitergabe-jetzt-ohne-zustimmung/" rel="alternate"></link><updated>2012-07-12T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:f9b2c4b3-498a-38e3-b72a-93628bcc1502</id><content type="html">&lt;p&gt;Das ist doch ein Juwel: Melderechter sollen in Zukunft meine Daten an jedes Industrieunternehmen weitergeben d√ºrfen - wenn die Firma die Daten f√ºr ein "update" schon vorhandener Daten anfragt.&lt;/p&gt;
&lt;p&gt;Was pikanterweise die Voraussetzung fast jeder Anfrage ist.&lt;/p&gt;
&lt;p&gt;Dem kann man dann gar nicht mehr widersprechen - de fakto hat man also keine M√∂glichkeit mehr dieser Gesch√§ftspraktik der Melde√§mter wenigstens f√ºr sich pers√∂nlich Einhalt zu gebieten.&lt;/p&gt;
&lt;p&gt;Compact h√§lt dagegen und hofft auf 200.000 unterst√ºtzer in m√∂glichst kurzer Zeit:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.campact.de/melderecht/sn1/signer"&gt;http://www.campact.de/melderecht/sn1/signer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Daf√ºr!&lt;/p&gt;
</content></entry><entry><title>SSL Certificate Trouble</title><link href="https://h%C3%A4cker.net/blog/2011/11/ssl-certificate-trouble/" rel="alternate"></link><updated>2011-11-18T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:55f253b1-c615-3b3e-b74a-00b812b567ae</id><content type="html">&lt;p&gt;If you should ever stumble upon this bug, consider yourself very lucky that I have found the solution to this already, because it took me &lt;em&gt;AGES&lt;/em&gt; to figure this out. No shit.&lt;/p&gt;
&lt;p&gt;So here's the problem: We used a self signed certificate on on of our servers and curl and all tools relying on curl just couldn't connect to this server at all (with certificate validation). Despite the fact that the root certificate that signed the server certificate was happily in my keychain and marked as trusted.&lt;/p&gt;
&lt;p&gt;The solution first: Turns out that the Keychain will eat certificates in many formats, specifically it supports DER and PEM. curl however can't use the DER certificate in the keychain and just reports it as missing. Exporting the certificate, converting it to PEM and then reimporting it (making sure to remove the DER version beforehand) fixed it.&lt;/p&gt;
&lt;p&gt;I converted the file with this command
&lt;code&gt;openssl x509 -inform DER -in some.ser.ver.der -out some.serv.ver.pem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here's some of the error messages I got:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;% &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;https://some.serv.ver&lt;span class="w"&gt; &lt;/span&gt;-v
&lt;span class="go"&gt;* About to connect() to some.serv.ver port 443 (#0)&lt;/span&gt;
&lt;span class="go"&gt;*   Trying some.ip... connected&lt;/span&gt;
&lt;span class="go"&gt;* Connected to some.ser.ver (some.ip) port 443 (#0)&lt;/span&gt;
&lt;span class="go"&gt;* SSLv3, TLS handshake, Client hello (1):&lt;/span&gt;
&lt;span class="go"&gt;* SSLv3, TLS handshake, Server hello (2):&lt;/span&gt;
&lt;span class="go"&gt;* SSLv3, TLS handshake, CERT (11):&lt;/span&gt;
&lt;span class="go"&gt;* SSLv3, TLS alert, Server hello (2):&lt;/span&gt;
&lt;span class="go"&gt;* SSL certificate problem, verify that the CA cert is OK. Details:&lt;/span&gt;
&lt;span class="go"&gt;error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed&lt;/span&gt;
&lt;span class="go"&gt;* Closing connection #0&lt;/span&gt;
&lt;span class="go"&gt;curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:&lt;/span&gt;
&lt;span class="go"&gt;error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed&lt;/span&gt;
&lt;span class="go"&gt;More details here: http://curl.haxx.se/docs/sslcerts.html&lt;/span&gt;

&lt;span class="go"&gt;curl performs SSL certificate verification by default, using a &amp;quot;bundle&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt; of Certificate Authority (CA) public keys (CA certs). If the default&lt;/span&gt;
&lt;span class="go"&gt; bundle file isn&amp;#39;t adequate, you can specify an alternate file&lt;/span&gt;
&lt;span class="go"&gt; using the --cacert option.&lt;/span&gt;
&lt;span class="go"&gt;If this HTTPS server uses a certificate signed by a CA represented in&lt;/span&gt;
&lt;span class="go"&gt; the bundle, the certificate verification probably failed due to a&lt;/span&gt;
&lt;span class="go"&gt; problem with the certificate (it might be expired, or the name might&lt;/span&gt;
&lt;span class="go"&gt; not match the domain name in the URL).&lt;/span&gt;
&lt;span class="go"&gt;If you&amp;#39;d like to turn off curl&amp;#39;s verification of the certificate, use&lt;/span&gt;
&lt;span class="go"&gt; the -k (or --insecure) option.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you hit this brick wall - hope this helps you too.&lt;/p&gt;
</content></entry><entry><title>Mappei St√ºtzen und Rechnungsstellung</title><link href="https://h%C3%A4cker.net/blog/2011/7/mappei-stu-tzen-und-rechnungsstellung/" rel="alternate"></link><updated>2011-07-12T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:cadcbbbe-0824-3eb4-bac5-94db67a4b98f</id><content type="html">&lt;p&gt;Gerade habe ich endlich f√ºr mein GTD-System ein super-Zubeh√∂r gefunden, &lt;a href="http://classei.de/de/boxen/mappenstuetzen.html"&gt;Mappenst√ºtzen von Classei&lt;/a&gt;. Der gro√üe Vorteil davon: Die Mappen stehen in den Boxen auch stabil wenn diese nicht voll sind - damit kann man seine GTD-Ablage viel entspannter aufbauen. :)&lt;/p&gt;
&lt;p&gt;Und noch ein witziges Detail: Classei gew√§hrt 2% Skonto wenn man z√ºgig bezahlt. Das bedeutet nat√ºrlich das sie eigentlich 2% mehr verlangen, wenn man nicht z√ºgig bezahlt. Ich wette aber, dass das viele Leute dazu veranlasst schnell zu bezahlen. Und das finde ich einen sch√∂nen Trick. :-)&lt;/p&gt;
</content></entry><entry><title>Musik ist doch was feines</title><link href="https://h%C3%A4cker.net/blog/2011/4/musik-ist-doch-was-feines/" rel="alternate"></link><updated>2011-04-05T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:e2cdcdf6-cdd6-301d-951a-e6526191a6d9</id><content type="html">&lt;p&gt;Da gibts so viele M√∂glichkeiten.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=dmoDLyiQYKw"&gt;Auf einem Floppy-Drive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.robotlab.de/instru/video.htm"&gt;Auf einem Roboterarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=Ht96HJ01SE4"&gt;Auf einem Scanner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=qEG-1iYpgKU"&gt;Tesla Spulen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=fp4jQNa_9sY"&gt;Festplatten&lt;/a&gt; &lt;a href="http://www.youtube.com/watch?v=g8Y1i6_IMwU"&gt;und nochmal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=OhnK5LdUCiQ"&gt;Schleifger√§ten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Iranische M√§nner weinen nicht...</title><link href="https://h%C3%A4cker.net/blog/2011/3/iranische-ma-nner-weinen-nicht/" rel="alternate"></link><updated>2011-03-21T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:04cda5c1-d229-34a8-8a4f-ed445a00c4b5</id><content type="html">&lt;p&gt;... hat Ihm seine Mutter beigebracht als er ein Fahrad wollte dass sie sich nicht leisten konnte. Und dann weinte er so stark dass er sein Auto nicht mehr weiter fahren konnte und am Stra√üenrand anhalten musste.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thegreenwave-film.com/"&gt;http://www.thegreenwave-film.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dieser Film hat mich tief traurig gemacht, weil es L√§nder wie den Iran gibt, in denen so viele Menschen nicht ihre Freiheit genie√üen und so sorgenfrei aufwachsen und leben k√∂nnen wie ich das hier konnte und kann.&lt;/p&gt;
&lt;p&gt;Sehr sehenswert.&lt;/p&gt;
</content></entry><entry><title>√Ñgypten</title><link href="https://h%C3%A4cker.net/blog/2011/1/a-gypten/" rel="alternate"></link><updated>2011-01-30T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:e0b721e6-c4bb-369d-a95d-9e9fd2eac3d7</id><content type="html">&lt;p&gt;&lt;a href="http://twitpic.com/3u6gvc"&gt;http://twitpic.com/3u6gvc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dabei l√§ufts mir jedesmal wenn ich das anschaue kalt √ºber den r√ºcken.&lt;/p&gt;
</content></entry><entry><title>Umfragen und Ergebnisse - so gehts!</title><link href="https://h%C3%A4cker.net/blog/2011/1/umfragen-und-ergebnisse-so-gehts/" rel="alternate"></link><updated>2011-01-10T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:d088f698-ed47-37bd-86f2-77b871974fde</id><content type="html">&lt;p&gt;Viel zu selten kriegt man mal bescheid wenn man an einer Umfrage / Untersuchung teilgenommen hat und dann endlich die Ergebnisse vorlegen.&lt;/p&gt;
&lt;p&gt;Um so sch√∂ner wenn das mal funktioniert!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.philhist.uni-augsburg.de/lehrstuehle/germanistik/sprachwissenschaft/ada/runde_7/"&gt;Die Uni Augsburg hat das mal richtig gemacht!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und dann auch gleich &lt;a href="http://www.philhist.uni-augsburg.de/lehrstuehle/germanistik/sprachwissenschaft/ada/runde_8/"&gt;zur n√§chsten Runde eingeladen&lt;/a&gt;. Jawohl!&lt;/p&gt;
</content></entry><entry><title>Liquid Feedback</title><link href="https://h%C3%A4cker.net/blog/2011/1/liquid-feedback/" rel="alternate"></link><updated>2011-01-03T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:d01b3242-3864-3d90-897d-2a3f887719e3</id><content type="html">&lt;p&gt;&lt;a href="http://darkbln.wordpress.com/2011/01/03/offener-brief-liquid-democracy/"&gt;Darauf&lt;/a&gt; bin ich heute gesto√üen.&lt;/p&gt;
&lt;p&gt;Interessant.&lt;/p&gt;
&lt;p&gt;Was mir durch den Kopf geht: Schade, What goes around comes around, wie geht es mit Liquid bei den Piraten weiter? Wie geht es bei dem Projekt weiter wenn die haupt-Triebfeder nicht mehr treibt?&lt;/p&gt;
&lt;p&gt;Mal nachdenken.&lt;/p&gt;
</content></entry><entry><title>Die meisten wissenschaftlichen Ergebnisse sind falsch</title><link href="https://h%C3%A4cker.net/blog/2011/1/die-meisten-wissenschaftlichen-ergebnisse-sind-falsch/" rel="alternate"></link><updated>2011-01-03T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:066472b0-872f-35f9-9bc4-e71a7d8fea1d</id><content type="html">&lt;p&gt;Geiler Titel eh? Trotzdem das Ergebnis gut replizierbarer wissenschaftlicher Forschung. Hach die Ironie.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.newyorker.com/reporting/2010/12/13/101213fa_fact_lehrer?currentPage=all"&gt;Hier gibt es dazu einen sehr sch√∂nen Artikel.&lt;/a&gt; (via fefe)&lt;/p&gt;
</content></entry><entry><title>Angst vor Badewannen?</title><link href="https://h%C3%A4cker.net/blog/2010/11/angst-vor-badewannen/" rel="alternate"></link><updated>2010-11-24T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:b6b6736d-da76-31a3-9aed-27601212ba36</id><content type="html">&lt;p&gt;Diese ganze Terror-Panik-Mache geht mir sowas von auf den Geist - das ich in Diskussionen dazu schon immer ganz ungem√ºtlich werde.&lt;/p&gt;
&lt;p&gt;Und immer fallen mir dann die entscheidenden Argumente dazu nicht ein - zum Beispiel zu so einem Security-Theater wie gerade am hier am Bahnhof, wo irgend ein Arsch eine T√ºte hat stehen lassen und f√ºr Stunden der ganze U-Bahnhof gesperrt war und alle U-Bahnen weitr√§umig umgeleitet / gesperrt wurden.&lt;/p&gt;
&lt;p&gt;Grah!&lt;/p&gt;
&lt;p&gt;Da kann ich mich doch nur einem &lt;a href="http://www.schneier.com/blog/archives/2007/12/refuse_to_be_te.html"&gt;Blogpost von Bruce Schneier&lt;/a&gt; anschlie√üen:&lt;/p&gt;
&lt;p&gt;I am not afraid of terrorism, and I want you to stop being afraid on my behalf. Please start scaling back the official government war on terror. Please replace it with a smaller, more focused anti-terrorist police effort in keeping with the rule of law. Please stop overreacting. I understand that it will not be possible to stop all terrorist acts. I accept that. I am not afraid.&lt;/p&gt;
&lt;p&gt;Jawoll!&lt;/p&gt;
&lt;p&gt;Bitte anschlie√üen - und &lt;a href="http://www.youtube.com/watch?v=ka5FdP-gNF0"&gt;das Video dazu&lt;/a&gt; kucken.&lt;/p&gt;
</content></entry><entry><title>Nukleare Abschreckung</title><link href="https://h%C3%A4cker.net/blog/2010/11/nukleare-abschreckung/" rel="alternate"></link><updated>2010-11-19T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:3ef4346f-24ea-3787-8184-f82999833f8b</id><content type="html">&lt;p&gt;Bei den Gorleben Protesten kriegt man ja inzwischen doch eine ganze menge gute Informationen - sogar manchmal √ºber die gro√üen Medien. Und man interessiert sich auch mal ein wenig zu dem Thema.&lt;/p&gt;
&lt;p&gt;Sehr gut gefallen hat mir dabei &lt;a href="http://gffstream-3.vo.llnwd.net/c1/download/1289332860/quarks/wdr_fernsehen_quarks_und_co_20101109.mp4"&gt;diese Quarks &amp;amp; Co Sendung&lt;/a&gt; die ich hier auch w√§rmstens weiterempfehlen m√∂chte.&lt;/p&gt;
&lt;p&gt;Vor allem war mir √ºberhaupt nicht klar WIE gro√ü die Katastrophe in der Asse derzeit eigentlich ist.&lt;/p&gt;
&lt;p&gt;Anschaubefehl.&lt;/p&gt;
&lt;p&gt;Ein paar Gedankenanst√∂√üe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wenn es eine Stelle gibt an der so gegen s√§mtliche Regeln des Verstandes und der Sicherheit versto√üen wurde&lt;/li&gt;
&lt;li&gt;Dann gibt es in der N√§he von dieser Stelle noch mehr √§hnliche Probleme&lt;/li&gt;
&lt;li&gt;Eines davon &lt;a href="http://www.spiegel.de/wissenschaft/technik/0,1518,654829,00.html"&gt;zum Beispiel das AKW Biblis&lt;/a&gt;. Die Techniker dort wollen es nicht mehr Reparieren da sie dann "... mit einem Bein im Gef√§ngnis st√§nden...".&lt;/li&gt;
&lt;li&gt;Jetzt bitte genau nachdenken wie viele dieser Problemf√§lle immer noch vor uns Geheim gehalten werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;grusel&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Update: Wer noch nicht genug gegruselt ist, dem empfehle ich &lt;a href="http://elementarfragen.de/2010/06/ef03-tschernobyl/"&gt;diesen Podcast mit Sebastian Pflugbeil&lt;/a&gt; der sich als Atomphysiker mal den Reaktor in Tschernobyl sehr genau angeschaut hat (er ist dort gewesen!).&lt;/p&gt;
</content></entry><entry><title>Interessante Details zur Castor Lieferung</title><link href="https://h%C3%A4cker.net/blog/2010/11/interessante-details-zur-castor-lieferung/" rel="alternate"></link><updated>2010-11-08T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:f12be98d-6401-32e8-85a8-3c1f727ffd6c</id><content type="html">&lt;ol&gt;
&lt;li&gt;Die Castoren sind (durch die Strahlung?) 120 grad hei√ü wenn sie geliefert werden, Eier die man darauf wirft verkohlen sofort. :-)&lt;/li&gt;
&lt;li&gt;Die Castoren m√ºssen erst mal 30 Jahre ausk√ºhlen bevor sie √ºberhaupt in einer Salzmine endgelagert werden k√∂nnen&lt;/li&gt;
&lt;li&gt;Diese 30 Jahre stehen sie in einer Blechhalle nicht weit von Gorleben und strahlen da (hoffentlich nicht) vor sich hin&lt;/li&gt;
&lt;li&gt;Bevor sie in Gorleben eingelagert werden k√∂nnen m√ºssen sie noch in kleinere Beh√§lter 'Pollux' genannt umgef√ºllt werden&lt;/li&gt;
&lt;li&gt;Die Technologie daf√ºr gibt es noch gar nicht&lt;/li&gt;
&lt;li&gt;Gorleben als Endlager ist noch gar nicht genehmigt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Krass. &lt;a href="http://www.zeit.de/2003/48/Gorleben"&gt;via&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Unsere Obsession mit der Shell</title><link href="https://h%C3%A4cker.net/blog/2010/10/unsere-obsession-mit-der-shell/" rel="alternate"></link><updated>2010-10-26T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:eeea5555-a9ea-33de-80a2-076bfc8a1aa7</id><content type="html">&lt;p&gt;Grade dachte ich mir ich mache mal wieder zum Spa√ü etwas an einem Open Source Projekt, checke es aus und will es mal bauen um etwas im Code herum zu lesen - und das erste was mir passiert ist das der Build-Prozess einfach irgendwann verstirbt.&lt;/p&gt;
&lt;p&gt;Nach einiger Debugging Zeit stellt sich dann heraus das das selbstgestrickte build-system (eine Sammlung von Shell-Scripten) halt nicht mit spaces im Pfad zu den Sourcen klarkommt.&lt;/p&gt;
&lt;p&gt;Gnarf! Wieso macht man sowas in Shell? Muss das sein?&lt;/p&gt;
&lt;p&gt;Ok, aber es gibt ja workarounds, und die kenne ich ja auch und die lassen sich ja auch relativ einfach einbauen. ABER: Nicht mal die Abh√§ngigkeiten ([&lt;a href="http://pkg-config.freedesktop.org/"&gt;pkg-config&lt;/a&gt;] in diesem Fall) baut mit spaces im Pfad.&lt;/p&gt;
&lt;p&gt;ARGH!&lt;/p&gt;
&lt;p&gt;Und nat√ºrlich haben die ein &lt;a href="http://www.shlomifish.org/open-source/anti/autohell/"&gt;Autohell&lt;/a&gt; buildsystem an das ich nun wirklich nicht ranfassen will. :-(&lt;/p&gt;
&lt;p&gt;Wie sollen wir als Softwareentwickler eigentlich irgendwann zu dem Punkt kommen wo unsere Software auch nur so etwas einfaches wie Pfade korrekt verarbeitet - also mit Leezreichen, Umlauten und Sonderzeichen (jep '/' ist auch gemeint) - wenn nicht mal unsere Eigenen Build-Tools und Shell-Sprachen damit verl√§sslich klar kommen? Also die Basis auf die einfach immer wieder zur√ºckgegriffen wird?&lt;/p&gt;
&lt;p&gt;Unglaublich.&lt;/p&gt;
</content></entry><entry><title>Objective-C Metaprogrammierung: Bl√∂cke zu Methoden</title><link href="https://h%C3%A4cker.net/blog/2010/6/objective-c-metaprogrammierung-blo-cke-zu-methoden/" rel="alternate"></link><updated>2010-06-20T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:6b20c8fd-cabc-364e-a374-0bed3dd07d1c</id><content type="html">&lt;p&gt;Die Ruby Welt verwendet Bl√∂cke (Closures) liebend gerne f√ºr alles m√∂gliche. Zum Beispiel als Builder-Methapher um Baumstrukturen (XML, GUI's, HTML, Tests) in der Sprache hinzuschreiben und dann nur noch in die Target-Sprache zu rendern.&lt;/p&gt;
&lt;p&gt;Das sieht in Tests zum Beispiel so aus:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;should do fnord&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;someObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be_fnordy&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Der Trick dabei ist das alles von &lt;code&gt;do&lt;/code&gt; bis &lt;code&gt;end&lt;/code&gt; jeweils ein Block ist der von der Methode describe oder it dann in eine UnitTest Klassenstruktur eingeh√§ngt wird um dann sp√§ter als 'ganz normale' unit tests ausgef√ºhrt zu werden.&lt;/p&gt;
&lt;p&gt;Jetzt wo Objective-C auch Bl√∂cke unterst√ºtzt (ok, die k√∂nnen nat√ºrlich weniger als das Ruby Equivalent) m√ºsste das eigenltich auch gehen - und siehe da mit &lt;a href="http://github.com/pivotal/cedar"&gt;Cedar&lt;/a&gt; gibt es auch schon einen ersten Versuch &lt;a href="http://rspec.info/"&gt;RSpec&lt;/a&gt; in Objective-C nachzubauen.&lt;/p&gt;
&lt;p&gt;Well und daher habe ich mir mal angeschaut wie weit man denn kommt wenn man in Objective-C einen Block in eine Instanz-Methode umwandeln will.&lt;/p&gt;
&lt;p&gt;Gleich vorneweg - das Typ-System von Objective-C macht mir hier einen kleinen Strich durch die Rechnung - ich habe es nicht geschafft einen Block nicht direkt als Funktions-pointer verwenden.&lt;/p&gt;
&lt;p&gt;Aber mit etwas Umweg geht es doch.&lt;/p&gt;
&lt;p&gt;Der Trick ist das Bl√∂cke auch &lt;code&gt;id&lt;/code&gt;'s sein k√∂nnen, d.h. man kann sie bequem in ein NSMutableDictionary packen.&lt;/p&gt;
&lt;p&gt;Also brauche ich auf meiner Klasse nur ein Dictionary, speichere die Bl√∂cke darin mit dem Namen der Methode ab und baue mir einen generischen Dispatcher-IMP der den Selector (zweites unsichtbares Argument jeder Objective-C Methode) verwendet um den Block aus aus dem Dictionary zu ziehen und f√ºhre ihn dann einfach aus.&lt;/p&gt;
&lt;p&gt;[source:/open-source/adding-blocks-as-methods/trunk/AttachBlocksAsMethods.m So sieht dass dann aus]&lt;/p&gt;
</content></entry><entry><title>Die sch√∂nsten Testsuiten</title><link href="https://h%C3%A4cker.net/blog/2010/5/die-scho-nsten-testsuiten/" rel="alternate"></link><updated>2010-05-29T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:06c0043d-c478-36af-bb70-a116206f4b8c</id><content type="html">&lt;p&gt;Sowas w√ºnsche ich mir auch mal f√ºr andere Programmiersprachen. Eine st√§ndig aktuelle Hitliste der sch√∂nsten Testsuiten von Open Source software.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.plataformatec.com.br/2010/04/best-ruby-open-source-test-suites-awards/"&gt;Sowas hier&lt;/a&gt; - aber systematisch und crowdsourced immer aktuell.&lt;/p&gt;
&lt;p&gt;Hach, man kann tr√§umen. :-)&lt;/p&gt;
</content></entry><entry><title>Klartr√§umen</title><link href="https://h%C3%A4cker.net/blog/2010/4/klartra-umen/" rel="alternate"></link><updated>2010-04-06T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:e12fdf80-36f9-38ff-a202-aa4fa0158fe8</id><content type="html">&lt;p&gt;&lt;a href="http://de.wikipedia.org/wiki/Klartraum"&gt;Klartr√§umen&lt;/a&gt; ist etwas das ich gerne lernen m√∂chte und das mich derzeit besch√§ftigt. Erste Resultate habe ich schon - denn nach Jahren in denen ich mich vielleicht an einen Traum pro halbes Jahr erinnern konnte, erinnere ich mich jetzt an ein bis drei Tr√§ume pro nacht.&lt;/p&gt;
&lt;p&gt;Stattlich. :-)&lt;/p&gt;
&lt;p&gt;Sehr gut funktioniert f√ºr mich dass ich vor dem Schlafengehen via iPhone noch ein zwei YouTube Videos zu Klartr√§umen sehe um mich a) fortzubilden und b) mein Gehirn mit Klartr√§umen zu besch√§ftigen um die Warscheinlichkeit zu erh√∂hen dass ich mich an Tr√§ume erinnere (und sp√§ter dass ich in einem Traum merke dass ich tr√§ume).&lt;/p&gt;
&lt;p&gt;Eine super Einf√ºhrung finde ich nach wie vor &lt;a href="http://www.youtube.com/watch?v=e3GJTkG60X4"&gt;Reece Jones&lt;/a&gt; &lt;a href="http://www.youtube.com/watch?v=qK0hDfBvZh0"&gt;2&lt;/a&gt;, &lt;a href="http://www.youtube.com/watch?v=aZO3RSI7PnI"&gt;3&lt;/a&gt;, aber auch andere Videos von ihm sind interessant (gleiten allerdings recht schnell in viel zu esoterische Gefilde ab f√ºr meinen Geschmack).&lt;/p&gt;
&lt;p&gt;Abends (und morgens bevor ich noch einmal zum Tr√§umen einschlafe) verwende ich momentan zur Besch√§ftigung mit meinem Tr√§umen die Videos von &lt;a href="http://www.youtube.com/user/lucidipedia"&gt;Lucidipedia&lt;/a&gt; die zwar etwa l√§nglich, daf√ºr aber gut verst√§ndlich und sehr Detailreich gute Tips zum Tr√§umen geben. Besonders gefallen mir daran die vielen Beispiele die er gibt und die Art wie er sie erkl√§rt.&lt;/p&gt;
&lt;p&gt;Noch ein paar Webseiten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://de.wikipedia.org/wiki/Klartraum"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://de.wikibooks.org/wiki/Klartraum"&gt;Wikibook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lucidipedia.com/"&gt;Lucidipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lucidity.com/"&gt;Lucidity Institute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aber auch eine einfache &lt;a href="http://www.youtube.com/results?search_query=lucid+dreaming"&gt;YouTube&lt;/a&gt; Suche bringt erstaunlich viele Ergebnisse.&lt;/p&gt;
</content></entry><entry><title>jQuery editInPlace</title><link href="https://h%C3%A4cker.net/blog/2010/3/jquery-editinplace/" rel="alternate"></link><updated>2010-03-26T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:5f46fb6b-2e21-3c20-9173-40e5d2678381</id><content type="html">&lt;p&gt;Well, I just finished some major reworking of that jQuery plugin, so now it has [browser:/open-source/jquery-edit-in-place/trunk/spec/unit/spec.js a real testsuite] and conforms to the &lt;a href="http://docs.jquery.com/Plugins/Authoring"&gt;jQuery Plugin Guidelines&lt;/a&gt; and doesn't pollute the core prototypes (of String) anymore.&lt;/p&gt;
&lt;p&gt;There are a few new features, most prominent the ability to define a class to apply for the hover effect (so you can style the hover in css instead of having to hand in the colors directly and more control over the way errors are presented so it is easier to embed into bigger applications.&lt;/p&gt;
&lt;p&gt;So enjoy &lt;a href="http://jquery-in-place-editor.googlecode.com/svn/trunk/demo/index.html"&gt;the demo&lt;/a&gt;  and &lt;a href="http://code.google.com/p/jquery-in-place-editor/downloads/list"&gt;the download&lt;/a&gt; while they are hot, and keep a bookmark to &lt;a href="http://code.google.com/p/jquery-in-place-editor/"&gt;the project homepage&lt;/a&gt;. :)&lt;/p&gt;
&lt;p&gt;Stuff I'd like to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://visionmedia.github.com/jspec/"&gt;JSpec&lt;/a&gt; rocks, writing tests with it is a breeze. The DOM Testrunner they have could use some work though to become even more usefull&lt;/li&gt;
&lt;li&gt;Writing the tests with no dom insertion is a &lt;em&gt;great&lt;/em&gt; technique to get a fast testsuite where you can almost guarantee that it has no test-ordering issues.&lt;/li&gt;
&lt;li&gt;jQuery allows you to almost completely drive the interaction with the editor as a user would, making it almost like an acceptance test (and with very little dependency on the internal working of the editor.&lt;/li&gt;
&lt;li&gt;Refactoring JavaScript Code is hard if you don't have a testsuite. My Advice: Break it down into smaller bits. I found it incredibly hard to refactor larger pieces of the code, as not having a testsuite means there's no way you know what still works. :/&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Wo findet Innovation beim Lehren statt?</title><link href="https://h%C3%A4cker.net/blog/2010/2/wo-findet-innovation-beim-lehren-statt/" rel="alternate"></link><updated>2010-02-14T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:7c8710a9-1c1b-3f35-9bf2-83949430e2fc</id><content type="html">&lt;p&gt;Fr√ºher mal dachte ich, dass das ja in den Universit√§ten sein muss. Schlie√ülich ist da alles auf einem fleck. Forscher und Lehrer und Sch√ºler.&lt;/p&gt;
&lt;p&gt;Optimale Bedingungen eigentlich - nur dass dort an der Lehre √ºberhaupt nicht geforscht wurde. Schlie√ülich war das ja nur ein Anh√§ngsel das Zeit kostet. Kein Forschungsgebiet.&lt;/p&gt;
&lt;p&gt;In der Schule nat√ºrlich sowieso nicht und danach?&lt;/p&gt;
&lt;p&gt;Im Beruf?&lt;/p&gt;
&lt;p&gt;Ich bin nat√ºrlich mein eigenes Forschungssubjekt, weil ich weiter lerne und das beobachte. Und f√ºr mich selber ist es nat√ºrlich so dass ich st√§ndig mit Innovationen habe, durch meine M√∂glichkeit das Netz zu verwenden.&lt;/p&gt;
&lt;p&gt;Aber ab und an trifft man auf etwas gro√üartiges. In einem &lt;a href="http://itc.conversationsnetwork.org/shows/detail4386.html"&gt;Interview von John Udell&lt;/a&gt; bin ich auf die &lt;a href="http://khanacademy.org/"&gt;Khan Academy&lt;/a&gt; gesto√üen.&lt;/p&gt;
&lt;p&gt;Das ist ein Mensch der seine Erf√ºllung darin findet dass er kurze Videos (~10 Minuten lang) aufnimmt in denen er eine Sache - ein Konzept aus Mathematik, Physik, Chemie, Finanzen und vielen weiteren Themen.&lt;/p&gt;
&lt;p&gt;Und die sind gut!&lt;/p&gt;
&lt;p&gt;Ausserdem hat er &lt;a href="http://khanexercises.appspot.com/"&gt;eine Software online gestellt&lt;/a&gt; die ein sehr spannendes Konzept verfolgt: Wissen ist dort als Graph aufgestellt - von einfachster Addition bis zu relativ komplexen Themen. (Aber viel weniger als als Video verf√ºgbar ist).&lt;/p&gt;
&lt;p&gt;Der Clou: Man f√§ngt bei einfacher Addition an  und kriegt die n√§chst-Schwierigeren Aufgaben erst wenn man 10 Aufgaben aus einem Wissensgebiet erfolgreich direkt hintereinander gel√∂st hat.&lt;/p&gt;
&lt;p&gt;Dazu gibt es jeweils den ganzen L√∂sungsweg plus einen Link auf das dazugeh√∂rige Video wenn man es noch mal im Detail braucht.&lt;/p&gt;
&lt;p&gt;Das f√ºhrt dazu dass Kinder gerade bei Mathe ihre L√ºcken auff√ºllen k√∂nnen die sie irgendwo im Verst√§ndnis haben. Und das finde ich Gro√üartig - denn das ist eines der gr√∂√üten Probleme von Gro√ügruppen-Lernen. Wenn ein Thema vorbei ist, dann ist es vorbei - egal ob man es verstanden hat oder nicht.&lt;/p&gt;
&lt;p&gt;Verdammt schade dass es noch soo lange dauern wird bis solche Konzepte auch in der "Offiziellen" Lehre angekommen sind.&lt;/p&gt;
</content></entry><entry><title>Gletscher R√ºckzug</title><link href="https://h%C3%A4cker.net/blog/2010/2/gletscher-ru-ckzug/" rel="alternate"></link><updated>2010-02-08T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:c6767358-8669-33cb-beb4-bd5c05b507b9</id><content type="html">&lt;p&gt;Klima-Ver√§nderung ist ein schwer zug√§ngliches Thema.&lt;/p&gt;
&lt;p&gt;Aber auch Sau-Wichtig. Und daher finde ich es grandios was James Balog f√ºr eine Arbeit gemacht hat um den Gletscher-R√ºckzug zu dokumentieren. Mit knapp 30 Zeitraffer-Kammeras macht er √ºber Jahre Hinweg jede Stunde ein Bild von vielen Gletschern und daraus dann einen Film.&lt;/p&gt;
&lt;p&gt;Wow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gibts bei &lt;a href="http://www.ted.com/talks/james_balog_time_lapse_proof_of_extreme_ice_loss.html"&gt;TED als Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oder auf &lt;a href="http://www.extremeicesurvey.org/"&gt;der Homepage des Projekts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mein &lt;a href="http://www.extremeicesurvey.org/index.php/new_gallery/timelapse_171/"&gt;Lieblingsvideo dort bisher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>100 mal Floss Weekly</title><link href="https://h%C3%A4cker.net/blog/2010/1/100-mal-floss-weekly/" rel="alternate"></link><updated>2010-01-31T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:62b43a9d-7182-3515-bde8-0a8e6269a187</id><content type="html">&lt;p&gt;:) Einer meiner Lieblingspodcasts hat es jetzt auf die 100. Ausgabe gebracht.&lt;/p&gt;
&lt;p&gt;Und da muss ich doch mal gratulieren. Vor allem weil ich bei der Quiz-Show √ºber Programmiersprachen und deren Verbreitung absolut herzhaft gelacht habe. :-)&lt;/p&gt;
&lt;p&gt;H√∂renswert! Immer wieder gro√üartige Interviews mit Machern von Open Source Projekten.&lt;/p&gt;
&lt;p&gt;[Hier gehts zur 100-sten Show &lt;a href="http://twit.tv/floss100"&gt;http://twit.tv/floss100&lt;/a&gt;]&lt;/p&gt;
</content></entry><entry><title>Softwareentwicklung als Kooperatives Spiel</title><link href="https://h%C3%A4cker.net/blog/2010/1/softwareentwicklung-als-kooperatives-spiel/" rel="alternate"></link><updated>2010-01-28T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:ee76d24c-6c22-3f63-86cd-5969a4cd286d</id><content type="html">&lt;p&gt;Das ist ein steinalter &lt;a href="http://alistair.cockburn.us/Software+development+as+a+cooperative+game"&gt;Vortrag von Alistair Cockburn&lt;/a&gt; (gesprochen Co-Burn) in dem er darlegt wieso er findet das das eine sehr gute Sichtweise auf Softwareprojekte ist.&lt;/p&gt;
&lt;p&gt;Der Vortrag ist schon 10 Jahre alt - und trotzdem finde ich ihn sehr Aktuell.&lt;/p&gt;
&lt;p&gt;Lesenswert!&lt;/p&gt;
</content></entry><entry><title>Python Saug Punkte contd.: x += y ist nicht x = x + y</title><link href="https://h%C3%A4cker.net/blog/2010/1/python-saug-punkte-contd-x-y-ist-nicht-x-x-y/" rel="alternate"></link><updated>2010-01-15T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:f1e549a2-ef5a-3f55-a04b-200a4d4e654c</id><content type="html">&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; []&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [&amp;#39;foo&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doh. Wie kann das sein? Kommt man von C ist das erst mal sehr verbl√ºffend - und auch die meisten anderen Programmiersprachen die ich kenne verwenden &lt;code&gt;a += b&lt;/code&gt; als equivalent f√ºr &lt;code&gt;a = a + b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Well, nicht so Python. Weil &lt;a href="http://www.python.org/dev/peps/pep-0203/"&gt;da gab es offenbar mal Programmierer&lt;/a&gt; die fanden dass man Code der mit Matrizen rechnet lieber mit Operatoren schreiben m√∂chte weil sich das besser lie√üt. Nat√ºrlich nicht mit den normalen operatoren wie */+-, weil, da kann man ja den empf√§nger nicht in place modifizieren, und wie jeder wei√ü sind Matrizen ja so gro√ü dass die dann nicht mehr in den Ram passen.&lt;/p&gt;
&lt;p&gt;Also haben sie die &lt;op&gt;= operatoren in Python so spezifiziert, dass sie ihre left-hand-variable in place modifizieren wenn diese mutable sind.&lt;/p&gt;
&lt;p&gt;:-(&lt;/p&gt;
</content></entry><entry><title>Python Saugpunkte: Klassenobjekte</title><link href="https://h%C3%A4cker.net/blog/2010/1/python-saugpunkte-klassenobjekte/" rel="alternate"></link><updated>2010-01-13T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:f28147d0-1623-3ddf-88c2-44440ed73e7a</id><content type="html">&lt;p&gt;Klassenobjekte sind special - daher hat man im boddy einer klasse keinen Zugriff auf das klassenobjekt.&lt;/p&gt;
&lt;p&gt;Weil, self ist ja auch nicht automatisch und man muss es in Methoden immer als explizites Argument hinschreiben, und so etwas gibt es ja bei Klassen nicht, denn das sind ja keine Methoden und daher kann man halt das Klassenobjekt nicht referenzieren im body.&lt;/p&gt;
&lt;p&gt;Doh.&lt;/p&gt;
&lt;p&gt;Und das nervt nat√ºrlich total bei der meta-programmierung.&lt;/p&gt;
&lt;p&gt;Hier mal ein Beispiel von etwas SQL-Alchemy Code wo mir das wieder aufgefallen ist:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;proposal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proposal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;polls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Poll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin_time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das geht nicht, weil ich auf Poll nicht zugreifen kann und damit nicht auf andere attribute der Klasse. Der Workaround den SQLAlchemy daf√ºr macht ist das man einen String hineinreicht und die den dann aufwendig parsen. Total gar nicht toll.&lt;/p&gt;
&lt;p&gt;:-(&lt;/p&gt;
</content></entry><entry><title>Grand Unified Theory of Programming?</title><link href="https://h%C3%A4cker.net/blog/2010/1/grand-unified-theory-of-programming/" rel="alternate"></link><updated>2010-01-13T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:e4d4a914-89d5-3169-abac-1cfb36c66a65</id><content type="html">&lt;p&gt;Das h√∂chste Ziel in der Physik ist alle Kr√§fte durch eine Formel auszudr√ºcken bzw. sie in Beziehung zueinander zu setzen. Maxwell zum Beispiel gelang das f√ºr elektrische und magnetische Felder - und daf√ºr ist er noch heute ber√ºhmt.&lt;/p&gt;
&lt;p&gt;In der Software-Entwicklung gibt es so etwas bisher nicht. Klar, es gibt Daumenregeln, so wie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep it &lt;a href="http://en.wikipedia.org/wiki/Don&amp;#39;t_repeat_yourself"&gt;DRY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stephane.ducasse.free.fr/FreeBooks/BestSmalltalkPractices/Draft-Smalltalk%20Best%20Practice%20Patterns%20Kent%20Beck.pdf"&gt;Keep your Methods Small&lt;/a&gt; **&lt;/li&gt;
&lt;li&gt;Work &lt;a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod"&gt;SOLID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Obay the &lt;a href="http://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;und so weiter‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aber, und das ist der wichtige Teil: diese Daumenregeln sind keine Unifikation die die verschiedenen Probleme beim Programmieren abw√§gen und in Beziehung setzen.&lt;/p&gt;
&lt;p&gt;Daher finde ich &lt;a href="http://onestepback.org/"&gt;Jim Weirichs&lt;/a&gt; Vortrag &lt;a href="http://mwrc2009.confreaks.com/14-mar-2009-18-10-the-building-blocks-of-modularity-jim-weirich.html"&gt;The Building Blocks of Modularity&lt;/a&gt; sehr spannend - denn da stellt er den Ansatz der &lt;a href="http://www.slideshare.net/LittleBIGRuby/the-building-blocks-of-modularity"&gt;Connascence&lt;/a&gt; vor (ab Folie 35).&lt;/p&gt;
&lt;p&gt;Das ist letztlich eine Klassifizierung welche Art von Abh√§ngigkeit man sich durch welche Programmiertechnik einf√§ngt - und damit kann man 'normales' Refactoring anwenden um von problematischeren Connascence's (?) zu weniger problematischen zu kommen.&lt;/p&gt;
&lt;p&gt;Ach ja, urspr√ºnglich kommt das aus dem Buch &lt;a href="http://books.google.com/books?id=089qQgAACAAJ"&gt;What every Programmer should know about Object Oriented Design&lt;/a&gt;. Davon kann man aber Getrost nur noch den dritten Teil lesen (√ºber Connascence) - der rest ist nach 15 Jahren einfach veraltet. :)&lt;/p&gt;
&lt;p&gt;** Niemand sagt das so gut wie Kent Beck: "Lots of little pieces - Good code invariably has small methods and small objects. Only by factoring the system into many small pieces of state and function can you hope to satisfy the ‚Äúonce and only once‚Äù rule. I get lots of resistance to this idea, especially from experienced developers, but no one thing I do to systems provides as much help as breaking it into more pieces."&lt;/p&gt;
</content></entry><entry><title>Python Saug Punkte contd.</title><link href="https://h%C3%A4cker.net/blog/2010/1/python-saug-punkte-contd/" rel="alternate"></link><updated>2010-01-11T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:8c310be9-8b20-3b57-a73b-306886d1f487</id><content type="html">&lt;p&gt;Eine Sache die mich bei Python immer wieder √§rgert ist die Tatsache dass Standardwerte f√ºr Methodenargumente zur Parsezeit festgelegt werden anstatt zur Aufrufzeit.&lt;/p&gt;
&lt;p&gt;Das ist total doof, denn dadurch teilen sich alle aufrufe der Funktion den gleichen default-wert - was zwar sch√∂n schnell sein mag, aber trotzdem in fast allen F√§llen nur bei nicht ver√§nderbaren Objekten (so wie Integer und Strings) Sinn ergibt.&lt;/p&gt;
&lt;p&gt;So f√ºhrt das dazu dass man in Python eine ganze Menge Workarounds braucht um mit default-argumenten zu arbeiten.&lt;/p&gt;
&lt;p&gt;Das wichtigste dabei ist der default typ None. Das ist der workaround f√ºr alle mutable-objekte, da man die in fast keinem Fall zwischen verschiedenen Methodenaufrufen teilen m√∂chte. So sieht das aus:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;end_poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# work with end_time...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Der Punkt hier ist dass man datetime.utcnow() nicht in das standard Argument hineinschreiben kann, da man sonst bei jedem Aufruf der Methode den gleichen Wert h√§tte: Die Parsezeit. Nicht sonderlich n√ºtzlich.&lt;/p&gt;
&lt;p&gt;Das hat zur Folge dass man:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aus der Signatur nicht sehen was das Standardargument ist (utc/gmt oder vielleicht ewas ganz anderes?). Immerhin gibt es inzwischen immer mehr IDEs die diese Signatur beim aufrufen f√ºr autocompletion nutzen oder sie wenigstens anzeigen k√∂nnen.&lt;/li&gt;
&lt;li&gt;Man beim verwenden von Standardargumenten immer √ºberlegen muss ob man dieses Argument jetzt in die Methodendefinition oder in den Body aufnehmen muss.&lt;/li&gt;
&lt;li&gt;f√ºr jedes Standardargument noch mal zwei extra Zeilen braucht. Das nervt vor allem deswegen weil man sich mit den standard Argumenten ja Zeilen sparen m√∂chte. Das hei√üt die Kosten f√ºr Standard-Argumente steigen und man benutzt sie seltener.&lt;/li&gt;
&lt;li&gt;die default argumente noch mal separat dokumentieren muss, da ein dokumentations-extraktions-Werkzeug ja den Code nicht sieht, der das tats√§chliche Standardargument setzt. Und nat√ºrlich hat man dann noch mal DRY verletzt da die Information jetzt zwei mal da steht.&lt;/li&gt;
&lt;li&gt;richtig fiese Bugs kriegt, weil viele Leute diese Probleme nicht kennen oder sie ab und an vergessen und mal ein &lt;code&gt;list()&lt;/code&gt;, &lt;code&gt;dict()&lt;/code&gt; oder &lt;code&gt;set()&lt;/code&gt; als Standardwert nehmen was dan f√ºr viel Freude beim Debuggen sorgt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, know your Python und vorsicht mit Standardargumenten!&lt;/p&gt;
&lt;p&gt;Vielleicht kriegen wir ja irgendwann von unserem BDFL ein &lt;code&gt;from __future__ import runtime_standard_argument_evaluation&lt;/code&gt;.&lt;/p&gt;
</content></entry><entry><title>SOLID object oriented design</title><link href="https://h%C3%A4cker.net/blog/2010/1/solid-object-oriented-design/" rel="alternate"></link><updated>2010-01-10T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:e4559082-d3eb-3117-87de-3d84d54ead54</id><content type="html">&lt;p&gt;Ein Vortrag von der &lt;a href="http://goruco2009.confreaks.com/30-may-2009-15-40-solid-object-oriented-design-sandi-metz.html"&gt;GORUCO&lt;/a&gt; - sehr zu empfehlen.&lt;/p&gt;
&lt;p&gt;Besonders gefallen hat mir ihr Fazit dass man mehr als nur &lt;a href="http://en.wikipedia.org/wiki/Don&amp;#39;t_repeat_yourself"&gt;DRY&lt;/a&gt; als Prinzip beim Refactoring anwenden soll um bei gutem Code anzukommen.&lt;/p&gt;
&lt;p&gt;Sandy Metz empfiehlt das man sich an den 'Gr√ºnen' Stellen des Red/Green/Refactor Zyklus f√ºr jedes Objekt diese Fragen stellt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is it DRY?&lt;/li&gt;
&lt;li&gt;Does it have one responsibility?&lt;/li&gt;
&lt;li&gt;Does everything in it change at the same time?&lt;/li&gt;
&lt;li&gt;Does it depend (only) on things that change less often than it does?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Und bringt das auch an einem ordentlichen Beispiel auf den Punkt.&lt;/p&gt;
&lt;p&gt;Alles in allem: Ein Vortrag der zum Nachdenken √ºber den eigenen Code-Stil einl√§dt. Empfehlenswert!&lt;/p&gt;
</content></entry><entry><title>Method argument naming confusion</title><link href="https://h%C3%A4cker.net/blog/2010/1/method-argument-naming-confusion/" rel="alternate"></link><updated>2010-01-08T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:e6dbe7a1-d18f-3f7d-beb9-2bd61ec1369a</id><content type="html">&lt;p&gt;Schon seit einigen Wochen bin ich am gr√ºbeln, nach welcher Regel ich in Python meine variablen f√ºr Methoden-Argumente benennen soll. Das ist erstaunlicherweise gar nicht so klar.&lt;/p&gt;
&lt;p&gt;Hier mal das Problem: In Objective-C ist alles sehr klar und einfach (von Smalltalk kommend). Jede Methoden-Deklaration besteht abwechselnd aus einem Teil Methodennamen und dann einer Variablen. Hier mal ein Beispiel:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;setValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;forKey:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aKey&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das hat den gro√üen Vorteil dass man den Methodennamen benutzen kann um St√ºck f√ºr St√ºck die Argumente zu dokumentieren. Verwendet wird das so, dass das St√ºck Methodennamen das vor einem Argument kommt die Rolle beschreibt die das Argument spielen wird, w√§hrend der Name der Variablen eher generisch ist und sich eher am Typ orientiert. Dazu kommt nat√ºrlich das man die Typen auch explizit auszeichnen kann, was die notwendigkeit f√ºr die Typ-Annotation im Namen der Variablen im vergleich zu Smalltalk oder Python noch mal vermindert und man kann ihn ganz der Rolle hingeben die die Variable in der Methode spielen wird - versehen mit dem a/an/some/etc. prefix der Argumente (als generische Instanzen von etwas) von den lokalen und instanz-variablen unterscheidet.&lt;/p&gt;
&lt;p&gt;In Python geht das so nicht. Man kann versuchen das auf zwei wegen anzun√§hern:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set_value_for_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="c1"&gt;# benutze als: some_dict.set_value_for_key(&amp;#39;value&amp;#39;, &amp;#39;key&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das hat den Vorteil das man die Argumente mehr oder weniger benennen kann wie man m√∂chte, aber den Nachteil das die Dokumentation der argumente nicht mit diesen zusammen ist. Das hat schon mal den unangenehmen seiteneffekt das es sehr viel schlechter auf mehrere Argumente skaliert und damit sehr fix mehr extra-dokumentation n√∂tig macht.&lt;/p&gt;
&lt;p&gt;Der andere Weg w√§re so:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;for_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="c1"&gt;#benutze als: some_dict.set(value=&amp;#39;value&amp;#39;, for_key=&amp;#39;key&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Das hat den Vorteil dass der MethodenNamen von der Dokumentationsh√ºrde befreit ist - und damit Kurz wird.  Auf der anderen Seite sind die Argument-Namen jetzt effektiv teil des Methoden-Namens und damit kann man sie nicht mehr so gut benutzen um den Typ der Argumente zu dokumentieren.&lt;/p&gt;
&lt;p&gt;:-(&lt;/p&gt;
&lt;p&gt;Das ist der Grund wieso ich die Objective-C / Smalltalk Syntax so gerne mag, weil es darin so einfach ist selbstdokumentierenden Code von hoher qualit√§t zu schreiben.&lt;/p&gt;
</content></entry><entry><title>Here be electric dragons</title><link href="https://h%C3%A4cker.net/blog/2010/1/here-be-electric-dragons/" rel="alternate"></link><updated>2010-01-08T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:235d7d10-6598-3d18-9e90-12da2a1db8a6</id><content type="html">&lt;p&gt;Ich vertrete ja schon l√§nger den Punkt dass ein Grundeinkommen eine Notwendigkeit sein wird in einer Gesellschaft in der Maschinen uns alle physischen Arbeiten abnehmen k√∂nnen.&lt;/p&gt;
&lt;p&gt;Well, jetzt habe ich endlich jemanden gefunden der dieses Argument auch vertritt.&lt;/p&gt;
&lt;p&gt;Auf dem 26C3 im Vortrag &lt;a href="http://events.ccc.de/congress/2009/Fahrplan/events/3452.en.html"&gt;Here be electric dragons&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sehr sehenswert!&lt;/p&gt;
</content></entry><entry><title>Python Saug-Punkte</title><link href="https://h%C3%A4cker.net/blog/2009/12/python-saug-punkte/" rel="alternate"></link><updated>2009-12-23T00:00:00Z</updated><author><name>Martin H√§cker</name></author><id>urn:uuid:6d74eccf-34e1-327e-8a6c-ab82a7abc2ac</id><content type="html">&lt;p&gt;Viele standard-funktionen und module in python haben zu kurze namen.&lt;/p&gt;
&lt;p&gt;Das ist deshalb ein Problem weil, man diese Namen nicht f√ºr lokale Variablen verwenden kann bzw. ungewollt eine Standardfunktion √ºberschreibt.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; zum Beispiel. Oder &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Module sind dabei aber auch Problemkandidaten - vor allem wenn man sie h√§ufig wie ein Objekt benutzt. Das &lt;code&gt;json&lt;/code&gt; Modul macht mir immer wieder probleme, weil ich eine lokale Variable die json enth√§lt nun mal gerne json nennen w√ºrde. &lt;code&gt;json_serialization&lt;/code&gt; w√§re vielleicht ein besserer Name f√ºr das Modul.&lt;/p&gt;
&lt;p&gt;Die Standard-Bibliothek ist leider voll von solchen Beispielen und der Include-Mechanismus von Python der die Module quasi als Objekt im namespace des Empf√§ngers verf√ºgbar macht hilft da nicht wirklich weiter. Das ist zwar IMO eine bessere Idee als der C-Pr√§prozessor &lt;code&gt;#include&lt;/code&gt; (was Ruby ja zum Beispiel nachbaut) aber gerade bei so kurzen Namen kann das wirklich nerven.&lt;/p&gt;
&lt;p&gt;Wenn man aus einem Modul ein Objekt importiert ist das interessanterweise kein Problem, da Objekte in Python (wenn sie sich an die Namenskonvention halten - leider auch oft nicht der Fall in der Standardbibliothek) immer mit einem Gro√übuchstaben anfangen und dadurch diese Namenskollision nicht auftritt.&lt;/p&gt;
&lt;p&gt;F√ºr mich ist da das Problem dass die Python Programmierer leider so eine Obsession damit haben alles m√∂glichst kurz machen zu wollen - und dabei aber dem Programmierer der mit der (Standard-) Bibliothek arbeiten m√∂chte gerade wieder Steine in den Weg legen dass kurz zu machen was f√ºr Ihn am meisten sinn macht - lokale Variablen.&lt;/p&gt;
&lt;p&gt;Das ist leider Premature Optimisation in Reinstkultur - und es st√∂rt mich beim Entwickeln von meiner Software. :-(&lt;/p&gt;
</content></entry></feed>